using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using AgentRiskScore.Models;
using AgentRiskScore.CustomModels;

namespace AgentRiskScore.Data
{
    public partial class CommonContext : DbContext
    {
        public CommonContext()
        {
        }

        public CommonContext(DbContextOptions<CommonContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Account> Accounts { get; set; }
        public virtual DbSet<AccountDeltum> AccountDelta { get; set; }
        public virtual DbSet<Address> Addresses { get; set; }
        public virtual DbSet<Apiswift> Apiswifts { get; set; }
        public virtual DbSet<AuditMaster> AuditMasters { get; set; }
        public virtual DbSet<AuditOm> AuditOms { get; set; }
        public virtual DbSet<AuditWm> AuditWms { get; set; }
        public virtual DbSet<AwAddress> AwAddresses { get; set; }
        public virtual DbSet<AwAssociation> AwAssociations { get; set; }
        public virtual DbSet<AwBirthinfo> AwBirthinfos { get; set; }
        public virtual DbSet<AwClassification> AwClassifications { get; set; }
        public virtual DbSet<AwCountry> AwCountries { get; set; }
        public virtual DbSet<AwCriminal> AwCriminals { get; set; }
        public virtual DbSet<AwDate> AwDates { get; set; }
        public virtual DbSet<AwDesc> AwDescs { get; set; }
        public virtual DbSet<AwEducation> AwEducations { get; set; }
        public virtual DbSet<AwFalsePositive> AwFalsePositives { get; set; }
        public virtual DbSet<AwFd> AwFds { get; set; }
        public virtual DbSet<AwHitlogger> AwHitloggers { get; set; }
        public virtual DbSet<AwIdnumber> AwIdnumbers { get; set; }
        public virtual DbSet<AwIdnumberDeltum> AwIdnumberDelta { get; set; }
        public virtual DbSet<AwImage> AwImages { get; set; }
        public virtual DbSet<AwMaster> AwMasters { get; set; }
        public virtual DbSet<AwMasterDelete> AwMasterDeletes { get; set; }
        public virtual DbSet<AwName> AwNames { get; set; }
        public virtual DbSet<AwNameDeltum> AwNameDelta { get; set; }
        public virtual DbSet<AwReference> AwReferences { get; set; }
        public virtual DbSet<AwRelationship> AwRelationships { get; set; }
        public virtual DbSet<AwResident> AwResidents { get; set; }
        public virtual DbSet<AwRole> AwRoles { get; set; }
        public virtual DbSet<AwSanction> AwSanctions { get; set; }
        public virtual DbSet<AwScanapproval> AwScanapprovals { get; set; }
        public virtual DbSet<AwScanremark> AwScanremarks { get; set; }
        public virtual DbSet<AwSource> AwSources { get; set; }
        public virtual DbSet<AwStake> AwStakes { get; set; }
        public virtual DbSet<AwStr> AwStrs { get; set; }
        public virtual DbSet<AwTempMatchCategoryId> AwTempMatchCategoryIds { get; set; }
        public virtual DbSet<AwTempMatchCategoryName> AwTempMatchCategoryNames { get; set; }
        public virtual DbSet<AwTempMatchSanctionId> AwTempMatchSanctionIds { get; set; }
        public virtual DbSet<AwTempMatchSanctionName> AwTempMatchSanctionNames { get; set; }
        public virtual DbSet<AwVessel> AwVessels { get; set; }
        public virtual DbSet<Bankfintran> Bankfintrans { get; set; }
        public virtual DbSet<Bankfintranhist> Bankfintranhists { get; set; }
        public virtual DbSet<Bankfintranhisthit> Bankfintranhisthits { get; set; }
        public virtual DbSet<Bankfintranhit> Bankfintranhits { get; set; }
        public virtual DbSet<Cifmnrisk> Cifmnrisks { get; set; }
        public virtual DbSet<Cifmnriskattach> Cifmnriskattaches { get; set; }
        public virtual DbSet<Cifmnriskhist> Cifmnriskhists { get; set; }
        public virtual DbSet<Cifrisk> Cifrisks { get; set; }
        public virtual DbSet<Cifriskhistory> Cifriskhistories { get; set; }
        public virtual DbSet<ConfigCodesDtl> ConfigCodesDtls { get; set; }
        public virtual DbSet<ConfigCodesDtlBackup> ConfigCodesDtlBackups { get; set; }
        public virtual DbSet<ConfigCodesHdr> ConfigCodesHdrs { get; set; }
        public virtual DbSet<ConfigFilter> ConfigFilters { get; set; }
        public virtual DbSet<ConfigJob> ConfigJobs { get; set; }
        public virtual DbSet<ConfigJobStep> ConfigJobSteps { get; set; }
        public virtual DbSet<ConfigOmEndpoint> ConfigOmEndpoints { get; set; }
        public virtual DbSet<ConfigPwrestrict> ConfigPwrestricts { get; set; }
        public virtual DbSet<ConfigRiskassessment> ConfigRiskassessments { get; set; }
        public virtual DbSet<ConfigRiskfactor> ConfigRiskfactors { get; set; }
        public virtual DbSet<ConfigRiskfactorDtl> ConfigRiskfactorDtls { get; set; }
        public virtual DbSet<ConfigTableFilter> ConfigTableFilters { get; set; }
        public virtual DbSet<ConfigTsEndpoint> ConfigTsEndpoints { get; set; }
        public virtual DbSet<ConfigWeb> ConfigWebs { get; set; }
        public virtual DbSet<ConfigWfDtl> ConfigWfDtls { get; set; }
        public virtual DbSet<ConfigWfFilter> ConfigWfFilters { get; set; }
        public virtual DbSet<ConfigWfHdr> ConfigWfHdrs { get; set; }
        public virtual DbSet<Configmisctabledatalist> Configmisctabledatalists { get; set; }
        public virtual DbSet<Customer> Customers { get; set; }
        public virtual DbSet<CustomerDeltum> CustomerDelta { get; set; }
        public virtual DbSet<CustomerHist> CustomerHists { get; set; }
        public virtual DbSet<CustomerWhitelist> CustomerWhitelists { get; set; }
        public virtual DbSet<Customerstatus> Customerstatuses { get; set; }
        public virtual DbSet<D2fSsIdTempalerttran> D2fSsIdTempalerttrans { get; set; }
        public virtual DbSet<D2fSsIdTempalerttrandtlhit> D2fSsIdTempalerttrandtlhits { get; set; }
        public virtual DbSet<D2fSsIdTempalerttranwlist> D2fSsIdTempalerttranwlists { get; set; }
        public virtual DbSet<D2fSsIdTempalerttranwlistdtl> D2fSsIdTempalerttranwlistdtls { get; set; }
        public virtual DbSet<D2fSsTempalerttran> D2fSsTempalerttrans { get; set; }
        public virtual DbSet<D2fSsTempalerttrandtlhit> D2fSsTempalerttrandtlhits { get; set; }
        public virtual DbSet<D2fSsTempalerttranwlist> D2fSsTempalerttranwlists { get; set; }
        public virtual DbSet<D2fSsTempalerttranwlistdtl> D2fSsTempalerttranwlistdtls { get; set; }
        public virtual DbSet<D2fWlIdTempalerttran> D2fWlIdTempalerttrans { get; set; }
        public virtual DbSet<D2fWlIdTempalerttrandtlhit> D2fWlIdTempalerttrandtlhits { get; set; }
        public virtual DbSet<D2fWlIdTempalerttranwlist> D2fWlIdTempalerttranwlists { get; set; }
        public virtual DbSet<D2fWlIdTempalerttranwlistdtl> D2fWlIdTempalerttranwlistdtls { get; set; }
        public virtual DbSet<D2fWlTempalerttran> D2fWlTempalerttrans { get; set; }
        public virtual DbSet<D2fWlTempalerttrandtlhit> D2fWlTempalerttrandtlhits { get; set; }
        public virtual DbSet<D2fWlTempalerttranwlist> D2fWlTempalerttranwlists { get; set; }
        public virtual DbSet<D2fWlTempalerttranwlistdtl> D2fWlTempalerttranwlistdtls { get; set; }
        public virtual DbSet<EsAccessToken> EsAccessTokens { get; set; }
        public virtual DbSet<EsSsArchweakResult> EsSsArchweakResults { get; set; }
        public virtual DbSet<EsSsResult> EsSsResults { get; set; }
        public virtual DbSet<EsWlArchweakResult> EsWlArchweakResults { get; set; }
        public virtual DbSet<EsWlResult> EsWlResults { get; set; }
        public virtual DbSet<EventViewerW> EventViewerWs { get; set; }
        public virtual DbSet<Jobbatchlog> Jobbatchlogs { get; set; }
        public virtual DbSet<Menu> Menus { get; set; }
        public virtual DbSet<NoMasterHist> NoMasterHists { get; set; }
        public virtual DbSet<ParamCtrDtl> ParamCtrDtls { get; set; }
        public virtual DbSet<ParamError> ParamErrors { get; set; }
        public virtual DbSet<ParamLicense> ParamLicenses { get; set; }
        public virtual DbSet<ParamLocation> ParamLocations { get; set; }
        public virtual DbSet<ParamMappingDtl> ParamMappingDtls { get; set; }
        public virtual DbSet<ParamMappingHdr> ParamMappingHdrs { get; set; }
        public virtual DbSet<ParamMappingTab> ParamMappingTabs { get; set; }
        public virtual DbSet<ParamMappingTabDtl> ParamMappingTabDtls { get; set; }
        public virtual DbSet<ParamMappingTabHdr> ParamMappingTabHdrs { get; set; }
        public virtual DbSet<ParamRoute> ParamRoutes { get; set; }
        public virtual DbSet<ParamRptHdr> ParamRptHdrs { get; set; }
        public virtual DbSet<ParamSmsemail> ParamSmsemails { get; set; }
        public virtual DbSet<ParamStaff> ParamStaffs { get; set; }
        public virtual DbSet<ParamStrDtl> ParamStrDtls { get; set; }
        public virtual DbSet<ParamStrHdr> ParamStrHdrs { get; set; }
        public virtual DbSet<ParamUser> ParamUsers { get; set; }
        public virtual DbSet<RelUbo> RelUbos { get; set; }
        public virtual DbSet<RfAlertAssigned> RfAlertAssigneds { get; set; }
        public virtual DbSet<RfCase> RfCases { get; set; }
        public virtual DbSet<RfOdd> RfOdds { get; set; }
        public virtual DbSet<RfOddAct> RfOddActs { get; set; }
        public virtual DbSet<RfOddAttach> RfOddAttaches { get; set; }
        public virtual DbSet<RfOdddtl> RfOdddtls { get; set; }
        public virtual DbSet<RfOm> RfOms { get; set; }
        public virtual DbSet<RfOmAct> RfOmActs { get; set; }
        public virtual DbSet<RfOmAttach> RfOmAttaches { get; set; }
        public virtual DbSet<RfOmcomparison> RfOmcomparisons { get; set; }
        public virtual DbSet<RfOmcountryresult> RfOmcountryresults { get; set; }
        public virtual DbSet<RfOmdtl> RfOmdtls { get; set; }
        public virtual DbSet<RfOmdtlArchive> RfOmdtlArchives { get; set; }
        public virtual DbSet<RfOmpassportresult> RfOmpassportresults { get; set; }
        public virtual DbSet<RfOmriskresult> RfOmriskresults { get; set; }
        public virtual DbSet<RfPortfolio> RfPortfolios { get; set; }
        public virtual DbSet<RfT> RfTs { get; set; }
        public virtual DbSet<RfTm> RfTms { get; set; }
        public virtual DbSet<RfTmAct> RfTmActs { get; set; }
        public virtual DbSet<RfTmAttach> RfTmAttaches { get; set; }
        public virtual DbSet<RfTmTxnhit> RfTmTxnhits { get; set; }
        public virtual DbSet<RfTmdtl> RfTmdtls { get; set; }
        public virtual DbSet<RfTsAct> RfTsActs { get; set; }
        public virtual DbSet<RfTsAttach> RfTsAttaches { get; set; }
        public virtual DbSet<RfTscomparison> RfTscomparisons { get; set; }
        public virtual DbSet<RfTsdtl> RfTsdtls { get; set; }
        public virtual DbSet<RfTshitdtl> RfTshitdtls { get; set; }
        public virtual DbSet<RfTswlcomparison> RfTswlcomparisons { get; set; }
        public virtual DbSet<RfTswldtl> RfTswldtls { get; set; }
        public virtual DbSet<RfWm> RfWms { get; set; }
        public virtual DbSet<RfWmAct> RfWmActs { get; set; }
        public virtual DbSet<RfWmAttach> RfWmAttaches { get; set; }
        public virtual DbSet<RfWmcomparison> RfWmcomparisons { get; set; }
        public virtual DbSet<RfWmdtl> RfWmdtls { get; set; }
        public virtual DbSet<RiskCalc> RiskCalcs { get; set; }
        public virtual DbSet<RiskCalcFilter> RiskCalcFilters { get; set; }
        public virtual DbSet<RiskCalcSource> RiskCalcSources { get; set; }
        public virtual DbSet<RiskTemp> RiskTemps { get; set; }
        public virtual DbSet<Riskrulematrixdtl> Riskrulematricesdtl { get; set; }
        public virtual DbSet<Riskrulematrixhdr> Riskrulematriceshdr { get; set; }
        public virtual DbSet<Riskrulemodeldtl> Riskrulemodeldtls { get; set; }
        public virtual DbSet<Riskrulemodelhdr> Riskrulemodelhdrs { get; set; }
        public virtual DbSet<RptCtrDtl> RptCtrDtls { get; set; }
        public virtual DbSet<RptCtrHdr> RptCtrHdrs { get; set; }
        public virtual DbSet<RptExtract> RptExtracts { get; set; }
        public virtual DbSet<RptExtractFile> RptExtractFiles { get; set; }
        public virtual DbSet<RptStr> RptStrs { get; set; }
        public virtual DbSet<RptStrAttach> RptStrAttaches { get; set; }
        public virtual DbSet<RptStrDtl> RptStrDtls { get; set; }
        public virtual DbSet<RptStrHdr> RptStrHdrs { get; set; }
        public virtual DbSet<RuleRpFilter> RuleRpFilters { get; set; }
        public virtual DbSet<RuleRpHdr> RuleRpHdrs { get; set; }
        public virtual DbSet<RuleTmFilter> RuleTmFilters { get; set; }
        public virtual DbSet<RuleTmFormula> RuleTmFormulas { get; set; }
        public virtual DbSet<RuleTmHdr> RuleTmHdrs { get; set; }
        public virtual DbSet<RuleWmDtl> RuleWmDtls { get; set; }
        public virtual DbSet<RuleWmFilter> RuleWmFilters { get; set; }
        public virtual DbSet<RuleWmHdr> RuleWmHdrs { get; set; }
        public virtual DbSet<ScandataIn> ScandataIns { get; set; }
        public virtual DbSet<ScanwldataIn> ScanwldataIns { get; set; }
        public virtual DbSet<StaffPermission> StaffPermissions { get; set; }
        public virtual DbSet<TemplateFile> TemplateFiles { get; set; }
        public virtual DbSet<Transaction> Transactions { get; set; }
        public virtual DbSet<TransactionDeltum> TransactionDelta { get; set; }
        public virtual DbSet<TsCase> TsCases { get; set; }
        public virtual DbSet<TxnDaily> TxnDailies { get; set; }
        public virtual DbSet<TxnHist> TxnHists { get; set; }
        public virtual DbSet<TxnOverview> TxnOverviews { get; set; }
        public virtual DbSet<TxnReportMisc> TxnReportMiscs { get; set; }
        public virtual DbSet<VwEsSsResult> VwEsSsResults { get; set; }
        public virtual DbSet<VwEsSsResultsCifacc> VwEsSsResultsCifaccs { get; set; }
        public virtual DbSet<VwEsWlResult> VwEsWlResults { get; set; }
        public virtual DbSet<VwEsWlResultsCifacc> VwEsWlResultsCifaccs { get; set; }
        public virtual DbSet<Watchlistalgorithm> Watchlistalgorithms { get; set; }
        public virtual DbSet<Watchlistalgorithmcat> Watchlistalgorithmcats { get; set; }
        public virtual DbSet<Watchlistalgorithmdtl> Watchlistalgorithmdtls { get; set; }
        public virtual DbSet<Watchlistcountryrisk> Watchlistcountryrisks { get; set; }
        public virtual DbSet<Watchlistresultmatrix> Watchlistresultmatrices { get; set; }
        public virtual DbSet<Watchliststoplist> Watchliststoplists { get; set; }
        public virtual DbSet<Wcfwlhitapproval> Wcfwlhitapprovals { get; set; }
        public virtual DbSet<Wcfwlhitapprovallog> Wcfwlhitapprovallogs { get; set; }
        public virtual DbSet<Wcfwlhitrisk> Wcfwlhitrisks { get; set; }
        public virtual DbSet<Wcfwlhittran> Wcfwlhittrans { get; set; }
        public virtual DbSet<Wcfwlinputtext> Wcfwlinputtexts { get; set; }
        public virtual DbSet<Wcfwslog> Wcfwslogs { get; set; }
        public virtual DbSet<WlBatchdtl> WlBatchdtls { get; set; }
        public virtual DbSet<WlBatchlog> WlBatchlogs { get; set; }
        public virtual DbSet<WlUpdateLog> WlUpdateLogs { get; set; }
        public virtual DbSet<WsAccessToken> WsAccessTokens { get; set; }
        public virtual DbSet<staff> staff { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
                optionsBuilder.UseSqlServer("Server=192.168.2.70,50679\\\\\\\\MSSQLSERVER19; initial catalog=ISEM_PANDA_STG;User ID=pandaDev; pwd=sa123qwe!@#; Integrated Security=false;MultipleActiveResultSets=true;");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Account>(entity =>
            {
                entity.HasKey(e => new { e.NoMaster, e.NoAcc, e.CodeComp, e.CodeOrg, e.NoCif });

                entity.ToTable("ACCOUNT");

                entity.Property(e => e.NoMaster)
                    .HasMaxLength(50)
                    .HasColumnName("NO_MASTER");

                entity.Property(e => e.NoAcc)
                    .HasMaxLength(50)
                    .HasColumnName("NO_ACC");

                entity.Property(e => e.CodeComp).HasColumnName("CODE_COMP");

                entity.Property(e => e.CodeOrg).HasColumnName("CODE_ORG");

                entity.Property(e => e.NoCif)
                    .HasMaxLength(50)
                    .HasColumnName("NO_CIF");

                entity.Property(e => e.AccCdate).HasColumnName("ACC_CDATE");

                entity.Property(e => e.AccIplace)
                    .HasMaxLength(50)
                    .HasColumnName("ACC_IPLACE");

                entity.Property(e => e.AccJoint).HasColumnName("ACC_JOINT");

                entity.Property(e => e.AccOther)
                    .HasMaxLength(50)
                    .HasColumnName("ACC_OTHER");

                entity.Property(e => e.AccProd).HasColumnName("ACC_PROD");

                entity.Property(e => e.AccSprod).HasColumnName("ACC_SPROD");

                entity.Property(e => e.AccStatus).HasColumnName("ACC_STATUS");

                entity.Property(e => e.AccStype).HasColumnName("ACC_STYPE");

                entity.Property(e => e.AccType).HasColumnName("ACC_TYPE");

                entity.Property(e => e.AccUdate).HasColumnName("ACC_UDATE");

                entity.Property(e => e.AgCat)
                    .HasMaxLength(50)
                    .HasColumnName("AG_CAT");

                entity.Property(e => e.AgName)
                    .HasMaxLength(50)
                    .HasColumnName("AG_NAME");

                entity.Property(e => e.AgNo)
                    .HasMaxLength(50)
                    .HasColumnName("AG_NO");

                entity.Property(e => e.AuditCreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("AUDIT_CREATED_DATE");

                entity.Property(e => e.AuditCreatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_CREATED_USER");

                entity.Property(e => e.AuditUpdatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("AUDIT_UPDATED_DATE");

                entity.Property(e => e.AuditUpdatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_UPDATED_USER");

                entity.Property(e => e.Bal1Avg).HasColumnName("BAL1_AVG");

                entity.Property(e => e.Bal1Out).HasColumnName("BAL1_OUT");

                entity.Property(e => e.Bal1Val).HasColumnName("BAL1_VAL");

                entity.Property(e => e.Bal2Avg).HasColumnName("BAL2_AVG");

                entity.Property(e => e.Bal2Out).HasColumnName("BAL2_OUT");

                entity.Property(e => e.Bal2Val).HasColumnName("BAL2_VAL");

                entity.Property(e => e.BatchDate).HasColumnName("BATCH_DATE");

                entity.Property(e => e.BatchNo)
                    .HasMaxLength(15)
                    .HasColumnName("BATCH_NO");

                entity.Property(e => e.CtcName)
                    .HasMaxLength(50)
                    .HasColumnName("CTC_NAME");

                entity.Property(e => e.CtcNo)
                    .HasMaxLength(50)
                    .HasColumnName("CTC_NO");

                entity.Property(e => e.CtcRdate).HasColumnName("CTC_RDATE");

                entity.Property(e => e.DataValue01)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE01");

                entity.Property(e => e.DataValue02)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE02");

                entity.Property(e => e.DataValue03)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE03");

                entity.Property(e => e.DataValue04)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE04");

                entity.Property(e => e.DataValue05)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE05");

                entity.Property(e => e.DataValue06)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE06");

                entity.Property(e => e.DataValue07)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE07");

                entity.Property(e => e.DataValue08)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE08");

                entity.Property(e => e.DataValue09)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE09");

                entity.Property(e => e.DataValue10)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE10");

                entity.Property(e => e.DataValue11)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE11");

                entity.Property(e => e.DataValue12)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE12");

                entity.Property(e => e.DataValue13)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE13");

                entity.Property(e => e.DataValue14)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE14");

                entity.Property(e => e.DataValue15)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE15");

                entity.Property(e => e.DataValue16)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE16");

                entity.Property(e => e.DataValue17)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE17");

                entity.Property(e => e.DataValue18)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE18");

                entity.Property(e => e.DataValue19)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE19");

                entity.Property(e => e.DataValue20)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE20");

                entity.Property(e => e.DataValue21)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE21");

                entity.Property(e => e.DataValue22)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE22");

                entity.Property(e => e.DataValue23)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE23");

                entity.Property(e => e.DataValue24)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE24");

                entity.Property(e => e.DataValue25)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE25");

                entity.Property(e => e.DataValue26)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE26");

                entity.Property(e => e.DataValue27)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE27");

                entity.Property(e => e.DataValue28)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE28");

                entity.Property(e => e.DataValue29)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE29");

                entity.Property(e => e.DataValue30)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE30");

                entity.Property(e => e.DataValue31)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE31");

                entity.Property(e => e.DataValue32)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE32");

                entity.Property(e => e.DataValue33)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE33");

                entity.Property(e => e.DataValue34)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE34");

                entity.Property(e => e.DataValue35)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE35");

                entity.Property(e => e.DataValue36)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE36");

                entity.Property(e => e.DataValue37)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE37");

                entity.Property(e => e.DataValue38)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE38");

                entity.Property(e => e.DataValue39)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE39");

                entity.Property(e => e.DataValue40)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE40");

                entity.Property(e => e.DataValue41)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE41");

                entity.Property(e => e.DataValue42)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE42");

                entity.Property(e => e.DataValue43)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE43");

                entity.Property(e => e.DataValue44)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE44");

                entity.Property(e => e.DataValue45)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE45");

                entity.Property(e => e.DataValue46)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE46");

                entity.Property(e => e.DataValue47)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE47");

                entity.Property(e => e.DataValue48)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE48");

                entity.Property(e => e.DataValue49)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE49");

                entity.Property(e => e.DataValue50)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE50");

                entity.Property(e => e.DataValue51)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE51");

                entity.Property(e => e.DataValue52)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE52");

                entity.Property(e => e.DataValue53)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE53");

                entity.Property(e => e.DataValue54)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE54");

                entity.Property(e => e.DataValue55)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE55");

                entity.Property(e => e.DateInv).HasColumnName("DATE_INV");

                entity.Property(e => e.DateRedem).HasColumnName("DATE_REDEM");

                entity.Property(e => e.DateRenew).HasColumnName("DATE_RENEW");

                entity.Property(e => e.DburseDate).HasColumnName("DBURSE_DATE");

                entity.Property(e => e.FlagFpos).HasColumnName("FLAG_FPOS");

                entity.Property(e => e.FposDate).HasColumnName("FPOS_DATE");

                entity.Property(e => e.InfoName)
                    .HasMaxLength(150)
                    .HasColumnName("INFO_NAME");

                entity.Property(e => e.PayAdvance).HasColumnName("PAY_ADVANCE");

                entity.Property(e => e.PayAmount).HasColumnName("PAY_AMOUNT");

                entity.Property(e => e.PayDate).HasColumnName("PAY_DATE");

                entity.Property(e => e.PayDburse).HasColumnName("PAY_DBURSE");

                entity.Property(e => e.PayDdate).HasColumnName("PAY_DDATE");

                entity.Property(e => e.PayDur).HasColumnName("PAY_DUR");

                entity.Property(e => e.PayFreq).HasColumnName("PAY_FREQ");

                entity.Property(e => e.PayIrate).HasColumnName("PAY_IRATE");

                entity.Property(e => e.PayLimit).HasColumnName("PAY_LIMIT");

                entity.Property(e => e.PaySdate).HasColumnName("PAY_SDATE");

                entity.Property(e => e.PaySettle).HasColumnName("PAY_SETTLE");

                entity.Property(e => e.PremAdv).HasColumnName("PREM_ADV");

                entity.Property(e => e.PremAmount).HasColumnName("PREM_AMOUNT");

                entity.Property(e => e.PremDdate).HasColumnName("PREM_DDATE");

                entity.Property(e => e.PremNdate).HasColumnName("PREM_NDATE");

                entity.Property(e => e.PremPdate).HasColumnName("PREM_PDATE");

                entity.Property(e => e.PremRdate).HasColumnName("PREM_RDATE");

                entity.Property(e => e.PremRlen)
                    .HasMaxLength(50)
                    .HasColumnName("PREM_RLEN");

                entity.Property(e => e.TypeCons).HasColumnName("TYPE_CONS");

                entity.Property(e => e.TypeCover).HasColumnName("TYPE_COVER");

                entity.Property(e => e.TypeFaci)
                    .HasMaxLength(50)
                    .HasColumnName("TYPE_FACI");

                entity.Property(e => e.TypePrem).HasColumnName("TYPE_PREM");
            });

            modelBuilder.Entity<AccountDeltum>(entity =>
            {
                entity.HasKey(e => new { e.CodeComp, e.CodeOrg, e.NoMaster, e.NoCif, e.NoAccount });

                entity.ToTable("ACCOUNT_DELTA");

                entity.HasIndex(e => new { e.CodeComp, e.CodeOrg, e.NoMaster, e.NoCif }, "fk_dbo_account_delta");

                entity.Property(e => e.CodeComp).HasColumnName("CODE_COMP");

                entity.Property(e => e.CodeOrg).HasColumnName("CODE_ORG");

                entity.Property(e => e.NoMaster).HasColumnName("NO_MASTER");

                entity.Property(e => e.NoCif)
                    .HasMaxLength(50)
                    .HasColumnName("NO_CIF");

                entity.Property(e => e.NoAccount)
                    .HasMaxLength(50)
                    .HasColumnName("NO_ACCOUNT");
            });

            modelBuilder.Entity<Address>(entity =>
            {
                entity.HasKey(e => new { e.SeqAuto, e.NoMaster, e.NoCif, e.CodeComp, e.NoAdd, e.CodeOrg });

                entity.ToTable("ADDRESS");

                entity.Property(e => e.SeqAuto)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("SEQ_AUTO");

                entity.Property(e => e.NoMaster)
                    .HasMaxLength(50)
                    .HasColumnName("NO_MASTER");

                entity.Property(e => e.NoCif)
                    .HasMaxLength(50)
                    .HasColumnName("NO_CIF");

                entity.Property(e => e.CodeComp).HasColumnName("CODE_COMP");

                entity.Property(e => e.NoAdd)
                    .HasMaxLength(50)
                    .HasColumnName("NO_ADD");

                entity.Property(e => e.CodeOrg).HasColumnName("CODE_ORG");

                entity.Property(e => e.AuditCreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("AUDIT_CREATED_DATE");

                entity.Property(e => e.AuditCreatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_CREATED_USER");

                entity.Property(e => e.BatchDate).HasColumnName("BATCH_DATE");

                entity.Property(e => e.BatchNo)
                    .HasMaxLength(15)
                    .HasColumnName("BATCH_NO");

                entity.Property(e => e.CtcHome).HasColumnName("CTC_HOME");

                entity.Property(e => e.CtcMobile).HasColumnName("CTC_MOBILE");

                entity.Property(e => e.CtcOffice).HasColumnName("CTC_OFFICE");

                entity.Property(e => e.DataValue01)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE01");

                entity.Property(e => e.DataValue02)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE02");

                entity.Property(e => e.DataValue03)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE03");

                entity.Property(e => e.DataValue04)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE04");

                entity.Property(e => e.DataValue05)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE05");

                entity.Property(e => e.DataValue06)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE06");

                entity.Property(e => e.DataValue07)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE07");

                entity.Property(e => e.DataValue08)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE08");

                entity.Property(e => e.DataValue09)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE09");

                entity.Property(e => e.DataValue10)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE10");

                entity.Property(e => e.DataValue11)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE11");

                entity.Property(e => e.DataValue12)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE12");

                entity.Property(e => e.DataValue13)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE13");

                entity.Property(e => e.DataValue14)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE14");

                entity.Property(e => e.DataValue15)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE15");

                entity.Property(e => e.DataValue16)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE16");

                entity.Property(e => e.DataValue17)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE17");

                entity.Property(e => e.DataValue18)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE18");

                entity.Property(e => e.DataValue19)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE19");

                entity.Property(e => e.DataValue20)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE20");

                entity.Property(e => e.DataValue21)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE21");

                entity.Property(e => e.DataValue22)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE22");

                entity.Property(e => e.DataValue23)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE23");

                entity.Property(e => e.DataValue24)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE24");

                entity.Property(e => e.DataValue25)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE25");

                entity.Property(e => e.DataValue26)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE26");

                entity.Property(e => e.DataValue27)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE27");

                entity.Property(e => e.DataValue28)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE28");

                entity.Property(e => e.DataValue29)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE29");

                entity.Property(e => e.DataValue30)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE30");

                entity.Property(e => e.DataValue31)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE31");

                entity.Property(e => e.DataValue32)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE32");

                entity.Property(e => e.DataValue33)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE33");

                entity.Property(e => e.DataValue34)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE34");

                entity.Property(e => e.DataValue35)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE35");

                entity.Property(e => e.DataValue36)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE36");

                entity.Property(e => e.DataValue37)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE37");

                entity.Property(e => e.DataValue38)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE38");

                entity.Property(e => e.DataValue39)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE39");

                entity.Property(e => e.DataValue40)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE40");

                entity.Property(e => e.DataValue41)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE41");

                entity.Property(e => e.DataValue42)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE42");

                entity.Property(e => e.DataValue43)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE43");

                entity.Property(e => e.DataValue44)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE44");

                entity.Property(e => e.DataValue45)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE45");

                entity.Property(e => e.DataValue46)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE46");

                entity.Property(e => e.DataValue47)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE47");

                entity.Property(e => e.DataValue48)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE48");

                entity.Property(e => e.DataValue49)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE49");

                entity.Property(e => e.DataValue50)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE50");

                entity.Property(e => e.DataValue51)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE51");

                entity.Property(e => e.DataValue52)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE52");

                entity.Property(e => e.DataValue53)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE53");

                entity.Property(e => e.DataValue54)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE54");

                entity.Property(e => e.DataValue55)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE55");

                entity.Property(e => e.Email)
                    .HasMaxLength(50)
                    .HasColumnName("EMAIL");

                entity.Property(e => e.InfoAdd1)
                    .HasMaxLength(100)
                    .HasColumnName("INFO_ADD1");

                entity.Property(e => e.InfoAdd2)
                    .HasMaxLength(100)
                    .HasColumnName("INFO_ADD2");

                entity.Property(e => e.InfoAdd3)
                    .HasMaxLength(100)
                    .HasColumnName("INFO_ADD3");

                entity.Property(e => e.InfoAdd4)
                    .HasMaxLength(100)
                    .HasColumnName("INFO_ADD4");

                entity.Property(e => e.InfoCity)
                    .HasMaxLength(50)
                    .HasColumnName("INFO_CITY");

                entity.Property(e => e.InfoCountry)
                    .HasMaxLength(50)
                    .HasColumnName("INFO_COUNTRY");

                entity.Property(e => e.InfoPcode)
                    .HasMaxLength(50)
                    .HasColumnName("INFO_PCODE");

                entity.Property(e => e.InfoState)
                    .HasMaxLength(50)
                    .HasColumnName("INFO_STATE");

                entity.Property(e => e.NoRef)
                    .HasMaxLength(50)
                    .HasColumnName("NO_REF");

                entity.Property(e => e.TypeRec)
                    .HasMaxLength(50)
                    .HasColumnName("TYPE_REC");
            });

            modelBuilder.Entity<Apiswift>(entity =>
            {
                entity.ToTable("APISWIFT");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.BankToBankInfo).HasMaxLength(2000);

                entity.Property(e => e.BankToBeneInfo).HasMaxLength(2000);

                entity.Property(e => e.BeneAccountNo)
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.BeneAddressLine).HasMaxLength(70);

                entity.Property(e => e.BeneBicfi)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Bene_BICFI");

                entity.Property(e => e.BeneBuildingFloor).HasMaxLength(70);

                entity.Property(e => e.BeneBuildingName).HasMaxLength(35);

                entity.Property(e => e.BeneBuildingNo).HasMaxLength(16);

                entity.Property(e => e.BeneCountry)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.BeneCountrySubDiv).HasMaxLength(35);

                entity.Property(e => e.BeneDistrictName).HasMaxLength(35);

                entity.Property(e => e.BeneIban)
                    .HasMaxLength(35)
                    .IsUnicode(false)
                    .HasColumnName("BeneIBAN");

                entity.Property(e => e.BeneIdno)
                    .HasMaxLength(35)
                    .IsUnicode(false)
                    .HasColumnName("BeneIDNo");

                entity.Property(e => e.BeneName)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.BenePostBox).HasMaxLength(16);

                entity.Property(e => e.BenePostCode)
                    .IsRequired()
                    .HasMaxLength(16);

                entity.Property(e => e.BeneProxyName).HasMaxLength(150);

                entity.Property(e => e.BeneStreetName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.BeneTownLocationName).HasMaxLength(35);

                entity.Property(e => e.BeneTownName)
                    .IsRequired()
                    .HasMaxLength(35);

                entity.Property(e => e.CreDtTm).HasColumnType("datetime");

                entity.Property(e => e.CreatedAt).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DlvryAddBuildingNo)
                    .HasMaxLength(100)
                    .HasColumnName("Dlvry_AddBuildingNo");

                entity.Property(e => e.DlvryAddCountry)
                    .HasMaxLength(5)
                    .HasColumnName("Dlvry_AddCountry");

                entity.Property(e => e.DlvryAddCountrySubDiv)
                    .HasMaxLength(35)
                    .HasColumnName("Dlvry_AddCountrySubDiv");

                entity.Property(e => e.DlvryAddPostCode)
                    .HasMaxLength(16)
                    .HasColumnName("Dlvry_AddPostCode");

                entity.Property(e => e.DlvryAddStreetName)
                    .HasMaxLength(100)
                    .HasColumnName("Dlvry_AddStreetName");

                entity.Property(e => e.DlvryAddTownName)
                    .HasMaxLength(35)
                    .HasColumnName("Dlvry_AddTownName");

                entity.Property(e => e.DlvryAddType)
                    .HasMaxLength(5)
                    .HasColumnName("Dlvry_AddType");

                entity.Property(e => e.DlvryAddressLine)
                    .HasMaxLength(70)
                    .HasColumnName("Dlvry_AddressLine");

                entity.Property(e => e.DlvryName)
                    .HasMaxLength(150)
                    .HasColumnName("Dlvry_Name");

                entity.Property(e => e.DlvryPartyType)
                    .HasMaxLength(35)
                    .HasColumnName("Dlvry_PartyType");

                entity.Property(e => e.DocType).HasMaxLength(35);

                entity.Property(e => e.FileId)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.InstructedAgentBicfi)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("InstructedAgent_BICFI");

                entity.Property(e => e.InstructingAgentBicfi)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("InstructingAgent_BICFI");

                entity.Property(e => e.Location)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.MatchStatus)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedAt).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MsgId)
                    .IsRequired()
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.OfficerId)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.PayInfoAmt)
                    .HasColumnType("money")
                    .HasColumnName("PayInfo_Amt");

                entity.Property(e => e.PayInfoAutoExtPeriod)
                    .HasMaxLength(18)
                    .IsUnicode(false)
                    .HasColumnName("PayInfo_AutoExtPeriod");

                entity.Property(e => e.PayInfoCcy)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("PayInfo_Ccy");

                entity.Property(e => e.PayInfoCountry)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("PayInfo_Country");

                entity.Property(e => e.PayInfoCountrySubDivision)
                    .HasMaxLength(35)
                    .IsUnicode(false)
                    .HasColumnName("PayInfo_CountrySubDivision");

                entity.Property(e => e.PayInfoDate).HasColumnName("PayInfo_Date");

                entity.Property(e => e.PayInfoDirection)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("PayInfo_Direction");

                entity.Property(e => e.PayInfoEndToEndId)
                    .HasMaxLength(35)
                    .IsUnicode(false)
                    .HasColumnName("PayInfo_EndToEndID");

                entity.Property(e => e.PayInfoExpDtTm)
                    .HasColumnType("datetime")
                    .HasColumnName("PayInfo_ExpDtTm");

                entity.Property(e => e.PayInfoFinalExpDt).HasColumnName("PayInfo_FinalExpDt");

                entity.Property(e => e.PayInfoFreqType)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("PayInfo_FreqType");

                entity.Property(e => e.PayInfoInstrId)
                    .HasMaxLength(35)
                    .IsUnicode(false)
                    .HasColumnName("PayInfo_InstrID");

                entity.Property(e => e.PayInfoInstrPriority)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("PayInfo_InstrPriority");

                entity.Property(e => e.PayInfoProprietary)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("PayInfo_Proprietary");

                entity.Property(e => e.PayInfoSeqType)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("PayInfo_SeqType");

                entity.Property(e => e.PayInfoTownName)
                    .HasMaxLength(35)
                    .IsUnicode(false)
                    .HasColumnName("PayInfo_TownName");

                entity.Property(e => e.PayInfoTxnId)
                    .HasMaxLength(35)
                    .IsUnicode(false)
                    .HasColumnName("PayInfo_TxnID");

                entity.Property(e => e.PresntnConfirmation)
                    .HasMaxLength(5)
                    .HasColumnName("Presntn_Confirmation");

                entity.Property(e => e.PresntnCountry)
                    .HasMaxLength(5)
                    .HasColumnName("Presntn_Country");

                entity.Property(e => e.PresntnDocCodeorProp)
                    .HasMaxLength(35)
                    .HasColumnName("Presntn_DocCodeorProp");

                entity.Property(e => e.PresntnElctrncDtlsCodeorProp)
                    .HasMaxLength(35)
                    .HasColumnName("Presntn_ElctrncDtls_CodeorProp");

                entity.Property(e => e.PresntnPlace)
                    .HasMaxLength(5)
                    .HasColumnName("Presntn_Place");

                entity.Property(e => e.PresntnWording)
                    .HasMaxLength(2000)
                    .HasColumnName("Presntn_Wording");

                entity.Property(e => e.PurposeCodeOrProp)
                    .HasMaxLength(35)
                    .HasColumnName("Purpose_CodeOrProp");

                entity.Property(e => e.RedFlagType)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.RmtInfoCode)
                    .HasMaxLength(5)
                    .HasColumnName("RmtInfo_Code");

                entity.Property(e => e.RmtInfoNo)
                    .HasMaxLength(35)
                    .HasColumnName("RmtInfo_No");

                entity.Property(e => e.RmtInfoProprietary)
                    .HasMaxLength(35)
                    .HasColumnName("RmtInfo_Proprietary");

                entity.Property(e => e.RmtInfoRelatedDt).HasColumnName("RmtInfo_RelatedDt");

                entity.Property(e => e.RmtInfoUnstructured)
                    .HasMaxLength(150)
                    .HasColumnName("RmtInfo_Unstructured");

                entity.Property(e => e.SenderAccountNo)
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.SenderBicfi)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Sender_BICFI");

                entity.Property(e => e.SenderBuildingFloor).HasMaxLength(70);

                entity.Property(e => e.SenderBuildingName).HasMaxLength(35);

                entity.Property(e => e.SenderBuildingNo).HasMaxLength(16);

                entity.Property(e => e.SenderCountry)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.SenderCountrySubDiv).HasMaxLength(35);

                entity.Property(e => e.SenderDistrictName).HasMaxLength(35);

                entity.Property(e => e.SenderIban)
                    .HasMaxLength(35)
                    .IsUnicode(false)
                    .HasColumnName("SenderIBAN");

                entity.Property(e => e.SenderIdno)
                    .HasMaxLength(35)
                    .IsUnicode(false)
                    .HasColumnName("SenderIDNo");

                entity.Property(e => e.SenderName)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.SenderPostBox).HasMaxLength(16);

                entity.Property(e => e.SenderPostCode)
                    .IsRequired()
                    .HasMaxLength(16);

                entity.Property(e => e.SenderProxyName).HasMaxLength(150);

                entity.Property(e => e.SenderStreetName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.SenderTownLocationName).HasMaxLength(35);

                entity.Property(e => e.SenderTownName)
                    .IsRequired()
                    .HasMaxLength(35);

                entity.Property(e => e.ServiceType)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Source)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.SttlmInfAccountNo)
                    .HasMaxLength(35)
                    .IsUnicode(false)
                    .HasColumnName("SttlmInf_AccountNo");

                entity.Property(e => e.SttlmInfClientNo)
                    .HasMaxLength(35)
                    .IsUnicode(false)
                    .HasColumnName("SttlmInf_ClientNo");

                entity.Property(e => e.SttlmInfDate).HasColumnName("SttlmInf_Date");

                entity.Property(e => e.SttlmInfIban)
                    .HasMaxLength(35)
                    .IsUnicode(false)
                    .HasColumnName("SttlmInf_IBAN");

                entity.Property(e => e.SttlmInfIdno)
                    .HasMaxLength(35)
                    .IsUnicode(false)
                    .HasColumnName("SttlmInf_IDNo");

                entity.Property(e => e.SttlmInfMethod)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("SttlmInf_Method");

                entity.Property(e => e.TransferInd).HasMaxLength(5);

                entity.Property(e => e.TtlAmt).HasColumnType("money");

                entity.Property(e => e.TtlAmtCcy)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.TxnScreeningNo)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.WhitelistStatus)
                    .HasMaxLength(3)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<AuditMaster>(entity =>
            {
                entity.HasKey(e => e.CodeSeq)
                    .HasName("Pk_AUDIT_MASTER_CODE_SEQ");

                entity.ToTable("AUDIT_MASTER");

                entity.Property(e => e.CodeSeq).HasColumnName("CODE_SEQ");

                entity.Property(e => e.AuditActivity)
                    .HasColumnName("AUDIT_ACTIVITY")
                    .HasComment("Activity performed by user (click button, submit form, open, close, delete)");

                entity.Property(e => e.AuditActivityDesc)
                    .HasMaxLength(500)
                    .HasColumnName("AUDIT_ACTIVITY_DESC");

                entity.Property(e => e.AuditDate)
                    .HasColumnName("AUDIT_DATE")
                    .HasComment("Date activity being performed");

                entity.Property(e => e.AuditModule)
                    .HasColumnName("AUDIT_MODULE")
                    .HasComment("Module being accessed by user");

                entity.Property(e => e.AuditPage)
                    .HasColumnName("AUDIT_PAGE")
                    .HasComment("Page accessed by user");

                entity.Property(e => e.AuditStampdt)
                    .HasColumnType("datetime")
                    .HasColumnName("AUDIT_STAMPDT")
                    .HasComment("Date time activity being executed");

                entity.Property(e => e.AuditToken)
                    .HasColumnName("AUDIT_TOKEN")
                    .HasComment("Token registered by accessed user");

                entity.Property(e => e.AuditUserId)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_USER_ID")
                    .HasComment("User ID of staff performed activity");

                entity.Property(e => e.AuditUserType)
                    .HasColumnName("AUDIT_USER_TYPE")
                    .HasComment("User type of user who performed action");

                entity.Property(e => e.CodeComp)
                    .HasColumnName("CODE_COMP")
                    .HasComment("Company Code");

                entity.Property(e => e.CodeOrg)
                    .HasColumnName("CODE_ORG")
                    .HasComment("Organization Code");
            });

            modelBuilder.Entity<AuditOm>(entity =>
            {
                entity.HasKey(e => e.CodeSeq)
                    .HasName("Pk_AUDIT_MASTER_CODE_SEQ_0_1");

                entity.ToTable("AUDIT_OM");

                entity.Property(e => e.CodeSeq).HasColumnName("CODE_SEQ");

                entity.Property(e => e.AuditActivity)
                    .HasColumnName("AUDIT_ACTIVITY")
                    .HasComment("Activity performed by user (click button, submit form, open, close, delete)");

                entity.Property(e => e.AuditActivityDesc)
                    .HasMaxLength(500)
                    .HasColumnName("AUDIT_ACTIVITY_DESC");

                entity.Property(e => e.AuditModule)
                    .HasColumnName("AUDIT_MODULE")
                    .HasComment("Module being accessed by user");

                entity.Property(e => e.AuditPage)
                    .HasColumnName("AUDIT_PAGE")
                    .HasComment("Page accessed by user");

                entity.Property(e => e.AuditStampdt)
                    .HasColumnType("datetime")
                    .HasColumnName("AUDIT_STAMPDT")
                    .HasComment("Date time activity being executed");

                entity.Property(e => e.AuditUserId)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_USER_ID")
                    .HasComment("User ID of staff performed activity");

                entity.Property(e => e.CodeComp)
                    .HasColumnName("CODE_COMP")
                    .HasComment("Company Code");

                entity.Property(e => e.CodeOrg)
                    .HasColumnName("CODE_ORG")
                    .HasComment("Organization Code");
            });

            modelBuilder.Entity<AuditWm>(entity =>
            {
                entity.HasKey(e => e.CodeSeq)
                    .HasName("Pk_AUDIT_MASTER_CODE_SEQ_0");

                entity.ToTable("AUDIT_WM");

                entity.Property(e => e.CodeSeq).HasColumnName("CODE_SEQ");

                entity.Property(e => e.AuditActivity)
                    .HasColumnName("AUDIT_ACTIVITY")
                    .HasComment("Activity performed by user (click button, submit form, open, close, delete)");

                entity.Property(e => e.AuditActivityDesc)
                    .HasMaxLength(500)
                    .HasColumnName("AUDIT_ACTIVITY_DESC");

                entity.Property(e => e.AuditModule)
                    .HasColumnName("AUDIT_MODULE")
                    .HasComment("Module being accessed by user");

                entity.Property(e => e.AuditPage)
                    .HasColumnName("AUDIT_PAGE")
                    .HasComment("Page accessed by user");

                entity.Property(e => e.AuditStampdt)
                    .HasColumnType("datetime")
                    .HasColumnName("AUDIT_STAMPDT")
                    .HasComment("Date time activity being executed");

                entity.Property(e => e.AuditUserId)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_USER_ID")
                    .HasComment("User ID of staff performed activity");

                entity.Property(e => e.CodeComp)
                    .HasColumnName("CODE_COMP")
                    .HasComment("Company Code");

                entity.Property(e => e.CodeOrg)
                    .HasColumnName("CODE_ORG")
                    .HasComment("Organization Code");
            });

            modelBuilder.Entity<AwAddress>(entity =>
            {
                entity.HasKey(e => new { e.EntityId, e.SysId });

                entity.ToTable("AW_ADDRESS");

                entity.Property(e => e.EntityId)
                    .HasMaxLength(30)
                    .HasColumnName("ENTITY_ID");

                entity.Property(e => e.SysId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("SYS_ID");

                entity.Property(e => e.AddressCity)
                    .HasMaxLength(255)
                    .HasColumnName("ADDRESS_CITY");

                entity.Property(e => e.AddressCountry)
                    .HasMaxLength(200)
                    .HasColumnName("ADDRESS_COUNTRY");

                entity.Property(e => e.AddressLine)
                    .HasMaxLength(255)
                    .HasColumnName("ADDRESS_LINE");

                entity.Property(e => e.BatchDate).HasColumnName("BATCH_DATE");

                entity.Property(e => e.BatchNo)
                    .HasMaxLength(15)
                    .HasColumnName("BATCH_NO");

                entity.Property(e => e.InfoSource)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("INFO_SOURCE")
                    .HasDefaultValueSql("(N'DJ')");

                entity.Property(e => e.Url)
                    .HasMaxLength(255)
                    .HasColumnName("URL");
            });

            modelBuilder.Entity<AwAssociation>(entity =>
            {
                entity.HasKey(e => new { e.EntityId, e.SysId });

                entity.ToTable("AW_ASSOCIATION");

                entity.Property(e => e.EntityId)
                    .HasMaxLength(30)
                    .HasColumnName("ENTITY_ID");

                entity.Property(e => e.SysId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("SYS_ID");

                entity.Property(e => e.AssociateEntity)
                    .HasMaxLength(30)
                    .HasColumnName("ASSOCIATE_ENTITY");

                entity.Property(e => e.BatchDate).HasColumnName("BATCH_DATE");

                entity.Property(e => e.BatchNo)
                    .HasMaxLength(15)
                    .HasColumnName("BATCH_NO");

                entity.Property(e => e.ExRelationship)
                    .HasMaxLength(50)
                    .HasColumnName("EX_RELATIONSHIP");

                entity.Property(e => e.InfoSource)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("INFO_SOURCE")
                    .HasDefaultValueSql("(N'DJ')");

                entity.Property(e => e.RelationshipType)
                    .HasMaxLength(255)
                    .HasColumnName("RELATIONSHIP_TYPE");
            });

            modelBuilder.Entity<AwBirthinfo>(entity =>
            {
                entity.HasKey(e => new { e.EntityId, e.SysId });

                entity.ToTable("AW_BIRTHINFO");

                entity.Property(e => e.EntityId)
                    .HasMaxLength(30)
                    .HasColumnName("ENTITY_ID");

                entity.Property(e => e.SysId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("SYS_ID");

                entity.Property(e => e.BatchDate).HasColumnName("BATCH_DATE");

                entity.Property(e => e.BatchNo)
                    .HasMaxLength(15)
                    .HasColumnName("BATCH_NO");

                entity.Property(e => e.BirthinfoCountry)
                    .HasMaxLength(150)
                    .HasColumnName("BIRTHINFO_COUNTRY");

                entity.Property(e => e.BirthinfoDate)
                    .HasMaxLength(150)
                    .HasColumnName("BIRTHINFO_DATE");

                entity.Property(e => e.BirthinfoPlace)
                    .HasMaxLength(150)
                    .HasColumnName("BIRTHINFO_PLACE");

                entity.Property(e => e.InfoType).HasColumnName("INFO_TYPE");

                entity.Property(e => e.MainEntry).HasColumnName("MAIN_ENTRY");

                entity.Property(e => e.SubEntityId)
                    .HasMaxLength(30)
                    .HasColumnName("SUB_ENTITY_ID");
            });

            modelBuilder.Entity<AwClassification>(entity =>
            {
                entity.HasKey(e => new { e.EntityId, e.SysId });

                entity.ToTable("AW_CLASSIFICATION");

                entity.Property(e => e.EntityId)
                    .HasMaxLength(30)
                    .HasColumnName("ENTITY_ID");

                entity.Property(e => e.SysId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("SYS_ID");

                entity.Property(e => e.ModeMn)
                    .IsRequired()
                    .HasMaxLength(1)
                    .HasColumnName("MODE_MN");

                entity.Property(e => e.RegulationDesc)
                    .HasMaxLength(100)
                    .HasColumnName("REGULATION_DESC");

                entity.Property(e => e.RegulationMain)
                    .HasMaxLength(2500)
                    .HasColumnName("REGULATION_MAIN");

                entity.Property(e => e.RegulationSub)
                    .HasMaxLength(2500)
                    .HasColumnName("REGULATION_SUB");

                entity.Property(e => e.RegulationSubsub)
                    .HasMaxLength(2500)
                    .HasColumnName("REGULATION_SUBSUB");

                entity.Property(e => e.SectionNo).HasColumnName("SECTION_NO");

                entity.Property(e => e.StampDttm)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("STAMP_DTTM");

                entity.Property(e => e.SubSectionNo).HasColumnName("SUB_SECTION_NO");

                entity.Property(e => e.SubsubSectionNo).HasColumnName("SUBSUB_SECTION_NO");

                entity.Property(e => e.UserId)
                    .HasMaxLength(35)
                    .HasColumnName("USER_ID");
            });

            modelBuilder.Entity<AwCountry>(entity =>
            {
                entity.HasKey(e => new { e.EntityId, e.SysId });

                entity.ToTable("AW_COUNTRY");

                entity.Property(e => e.EntityId)
                    .HasMaxLength(30)
                    .HasColumnName("ENTITY_ID");

                entity.Property(e => e.SysId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("SYS_ID");

                entity.Property(e => e.BatchDate).HasColumnName("BATCH_DATE");

                entity.Property(e => e.BatchNo)
                    .HasMaxLength(15)
                    .HasColumnName("BATCH_NO");

                entity.Property(e => e.CountryCode)
                    .HasMaxLength(15)
                    .HasColumnName("COUNTRY_CODE");

                entity.Property(e => e.CountryDesc)
                    .HasMaxLength(255)
                    .HasColumnName("COUNTRY_DESC");

                entity.Property(e => e.CountryType)
                    .HasMaxLength(255)
                    .HasColumnName("COUNTRY_TYPE");

                entity.Property(e => e.InfoSource)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("INFO_SOURCE");
            });

            modelBuilder.Entity<AwCriminal>(entity =>
            {
                entity.HasKey(e => new { e.EntityId, e.SysId });

                entity.ToTable("AW_CRIMINAL");

                entity.Property(e => e.EntityId)
                    .HasMaxLength(30)
                    .HasColumnName("ENTITY_ID");

                entity.Property(e => e.SysId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("SYS_ID");

                entity.Property(e => e.BatchDate).HasColumnName("BATCH_DATE");

                entity.Property(e => e.BatchNo)
                    .HasMaxLength(15)
                    .HasColumnName("BATCH_NO");

                entity.Property(e => e.Reference)
                    .HasMaxLength(512)
                    .HasColumnName("REFERENCE");

                entity.Property(e => e.SinceDay).HasColumnName("SINCE_DAY");

                entity.Property(e => e.SinceMonth).HasColumnName("SINCE_MONTH");

                entity.Property(e => e.SinceYear).HasColumnName("SINCE_YEAR");

                entity.Property(e => e.ToDay).HasColumnName("TO_DAY");

                entity.Property(e => e.ToMonth).HasColumnName("TO_MONTH");

                entity.Property(e => e.ToYear).HasColumnName("TO_YEAR");
            });

            modelBuilder.Entity<AwDate>(entity =>
            {
                entity.HasKey(e => new { e.EntityId, e.SysId });

                entity.ToTable("AW_DATE");

                entity.Property(e => e.EntityId)
                    .HasMaxLength(30)
                    .HasColumnName("ENTITY_ID");

                entity.Property(e => e.SysId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("SYS_ID");

                entity.Property(e => e.BatchDate).HasColumnName("BATCH_DATE");

                entity.Property(e => e.BatchNo)
                    .HasMaxLength(15)
                    .HasColumnName("BATCH_NO");

                entity.Property(e => e.DateGiven)
                    .HasMaxLength(20)
                    .HasColumnName("DATE_GIVEN");

                entity.Property(e => e.DateNotes)
                    .HasMaxLength(255)
                    .HasColumnName("DATE_NOTES");

                entity.Property(e => e.DateType)
                    .HasMaxLength(255)
                    .HasColumnName("DATE_TYPE");

                entity.Property(e => e.InfoSource)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("INFO_SOURCE")
                    .HasDefaultValueSql("(N'DJ')");
            });

            modelBuilder.Entity<AwDesc>(entity =>
            {
                entity.HasKey(e => new { e.EntityId, e.SysId });

                entity.ToTable("AW_DESC");

                entity.Property(e => e.EntityId)
                    .HasMaxLength(30)
                    .HasColumnName("ENTITY_ID");

                entity.Property(e => e.SysId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("SYS_ID");

                entity.Property(e => e.BatchDate).HasColumnName("BATCH_DATE");

                entity.Property(e => e.BatchNo)
                    .HasMaxLength(15)
                    .HasColumnName("BATCH_NO");

                entity.Property(e => e.DescId1).HasColumnName("DESC_ID1");

                entity.Property(e => e.DescId2).HasColumnName("DESC_ID2");

                entity.Property(e => e.DescId3).HasColumnName("DESC_ID3");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.InfoSource)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("INFO_SOURCE");
            });

            modelBuilder.Entity<AwEducation>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("AW_EDUCATION");

                entity.Property(e => e.BatchDate).HasColumnName("BATCH_DATE");

                entity.Property(e => e.BatchNo)
                    .HasMaxLength(15)
                    .HasColumnName("BATCH_NO");

                entity.Property(e => e.EntityId)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("ENTITY_ID");

                entity.Property(e => e.InstituteName)
                    .HasMaxLength(100)
                    .HasColumnName("INSTITUTE_NAME");

                entity.Property(e => e.MajorSubject)
                    .HasMaxLength(256)
                    .HasColumnName("MAJOR_SUBJECT");

                entity.Property(e => e.ModeMn)
                    .HasMaxLength(1)
                    .HasColumnName("MODE_MN");

                entity.Property(e => e.Qualification)
                    .HasMaxLength(100)
                    .HasColumnName("QUALIFICATION");

                entity.Property(e => e.SinceDay).HasColumnName("SINCE_DAY");

                entity.Property(e => e.SinceMonth).HasColumnName("SINCE_MONTH");

                entity.Property(e => e.SinceYear).HasColumnName("SINCE_YEAR");

                entity.Property(e => e.StampDttm)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("STAMP_DTTM");

                entity.Property(e => e.SysId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("SYS_ID");

                entity.Property(e => e.ToDay).HasColumnName("TO_DAY");

                entity.Property(e => e.ToMonth).HasColumnName("TO_MONTH");

                entity.Property(e => e.ToYear).HasColumnName("TO_YEAR");

                entity.Property(e => e.UserId)
                    .HasMaxLength(35)
                    .HasColumnName("USER_ID");
            });

            modelBuilder.Entity<AwFalsePositive>(entity =>
            {
                entity.HasKey(e => e.EntityId);

                entity.ToTable("AW_FALSE_POSITIVE");

                entity.Property(e => e.EntityId)
                    .HasMaxLength(30)
                    .HasColumnName("ENTITY_ID");

                entity.Property(e => e.BatchDate).HasColumnName("BATCH_DATE");

                entity.Property(e => e.BatchNo)
                    .HasMaxLength(15)
                    .HasColumnName("BATCH_NO");

                entity.Property(e => e.FalsePositive).HasColumnName("FALSE_POSITIVE");

                entity.Property(e => e.FalsePositiveExpiryDt).HasColumnName("FALSE_POSITIVE_EXPIRY_DT");

                entity.Property(e => e.InfoSource)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("INFO_SOURCE")
                    .HasDefaultValueSql("(N'DJ')");
            });

            modelBuilder.Entity<AwFd>(entity =>
            {
                entity.HasKey(e => new { e.EntityId, e.SysId })
                    .HasName("AW_FDS_PK");

                entity.ToTable("AW_FDS");

                entity.Property(e => e.EntityId)
                    .HasMaxLength(30)
                    .HasColumnName("ENTITY_ID");

                entity.Property(e => e.SysId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("SYS_ID");

                entity.Property(e => e.BatchDate).HasColumnName("BATCH_DATE");

                entity.Property(e => e.BatchNo)
                    .HasMaxLength(15)
                    .HasColumnName("BATCH_NO");

                entity.Property(e => e.FdsCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("FDS_CODE")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FdsType).HasColumnName("FDS_TYPE");

                entity.Property(e => e.FdsTypedesc)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("FDS_TYPEDESC")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.InfoSource)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("INFO_SOURCE");
            });

            modelBuilder.Entity<AwHitlogger>(entity =>
            {
                entity.HasKey(e => new { e.CompCode, e.SeqNo, e.SubSeqNo });

                entity.ToTable("AW_HITLOGGER");

                entity.Property(e => e.CompCode)
                    .HasColumnName("COMP_CODE")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.SeqNo).HasColumnName("SEQ_NO");

                entity.Property(e => e.SubSeqNo).HasColumnName("SUB_SEQ_NO");

                entity.Property(e => e.BrCode)
                    .HasMaxLength(20)
                    .HasColumnName("BR_CODE");

                entity.Property(e => e.HitDate).HasColumnName("HIT_DATE");

                entity.Property(e => e.HitTime).HasColumnName("HIT_TIME");

                entity.Property(e => e.KivOk).HasColumnName("KIV_OK");

                entity.Property(e => e.ModuleId).HasColumnName("MODULE_ID");

                entity.Property(e => e.ReturnCategory)
                    .HasMaxLength(1042)
                    .HasColumnName("RETURN_CATEGORY");

                entity.Property(e => e.ReturnCategorynum)
                    .HasMaxLength(500)
                    .HasColumnName("RETURN_CATEGORYNUM")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ReturnDob)
                    .HasMaxLength(1042)
                    .HasColumnName("RETURN_DOB");

                entity.Property(e => e.ReturnDobs)
                    .HasMaxLength(100)
                    .HasColumnName("RETURN_DOBS");

                entity.Property(e => e.ReturnEntityId)
                    .HasMaxLength(50)
                    .HasColumnName("RETURN_ENTITY_ID");

                entity.Property(e => e.ReturnEntityName)
                    .HasMaxLength(255)
                    .HasColumnName("RETURN_ENTITY_NAME");

                entity.Property(e => e.ReturnEntityType)
                    .HasMaxLength(20)
                    .HasColumnName("RETURN_ENTITY_TYPE")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ReturnExpiryDate).HasColumnName("RETURN_EXPIRY_DATE");

                entity.Property(e => e.ReturnGender)
                    .HasMaxLength(20)
                    .HasColumnName("RETURN_GENDER")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ReturnHighRiskCountry)
                    .HasMaxLength(100)
                    .HasColumnName("RETURN_HIGH_RISK_COUNTRY");

                entity.Property(e => e.ReturnIdValue)
                    .HasMaxLength(150)
                    .HasColumnName("RETURN_ID_VALUE");

                entity.Property(e => e.ReturnInfoSource)
                    .HasMaxLength(20)
                    .HasColumnName("RETURN_INFO_SOURCE");

                entity.Property(e => e.ReturnMatch)
                    .HasMaxLength(20)
                    .HasColumnName("RETURN_MATCH")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ReturnMatchPercent).HasColumnName("RETURN_MATCH_PERCENT");

                entity.Property(e => e.ReturnOk).HasColumnName("RETURN_OK");

                entity.Property(e => e.ReturnSanction)
                    .HasMaxLength(1024)
                    .HasColumnName("RETURN_SANCTION")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ReturnSecurityNo)
                    .HasMaxLength(50)
                    .HasColumnName("RETURN_SECURITY_NO");

                entity.Property(e => e.ReturnSubCategory)
                    .HasMaxLength(1042)
                    .HasColumnName("RETURN_SUB_CATEGORY");

                entity.Property(e => e.ReturnSysIdAuto).HasColumnName("RETURN_SYS_ID_AUTO");

                entity.Property(e => e.ScanCategory)
                    .HasMaxLength(60)
                    .HasColumnName("SCAN_CATEGORY");

                entity.Property(e => e.ScanCategorynum)
                    .HasMaxLength(500)
                    .HasColumnName("SCAN_CATEGORYNUM")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ScanCountryName)
                    .HasMaxLength(60)
                    .HasColumnName("SCAN_COUNTRY_NAME");

                entity.Property(e => e.ScanDobs)
                    .HasMaxLength(50)
                    .HasColumnName("SCAN_DOBS");

                entity.Property(e => e.ScanEntityName)
                    .HasMaxLength(200)
                    .HasColumnName("SCAN_ENTITY_NAME");

                entity.Property(e => e.ScanEntityType)
                    .HasMaxLength(20)
                    .HasColumnName("SCAN_ENTITY_TYPE")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ScanExpiryDate).HasColumnName("SCAN_EXPIRY_DATE");

                entity.Property(e => e.ScanFirstName)
                    .HasMaxLength(100)
                    .HasColumnName("SCAN_FIRST_NAME");

                entity.Property(e => e.ScanFullPartil)
                    .IsRequired()
                    .HasMaxLength(6)
                    .HasColumnName("SCAN_FULL_PARTIL")
                    .HasDefaultValueSql("(N'F')");

                entity.Property(e => e.ScanGender)
                    .HasMaxLength(20)
                    .HasColumnName("SCAN_GENDER")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ScanIdValue)
                    .HasMaxLength(50)
                    .HasColumnName("SCAN_ID_VALUE");

                entity.Property(e => e.ScanLastName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("SCAN_LAST_NAME");

                entity.Property(e => e.ScanNativeName)
                    .HasMaxLength(200)
                    .HasColumnName("SCAN_NATIVE_NAME")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ScanPurpose)
                    .IsRequired()
                    .HasMaxLength(1024)
                    .HasColumnName("SCAN_PURPOSE")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ScanSanction)
                    .HasMaxLength(1024)
                    .HasColumnName("SCAN_SANCTION")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ScanSanctionCountry)
                    .HasMaxLength(100)
                    .HasColumnName("SCAN_SANCTION_COUNTRY");

                entity.Property(e => e.ScanSecurityNo)
                    .HasMaxLength(50)
                    .HasColumnName("SCAN_SECURITY_NO");

                entity.Property(e => e.UserId)
                    .HasMaxLength(35)
                    .HasColumnName("USER_ID");
            });

            modelBuilder.Entity<AwIdnumber>(entity =>
            {
                entity.HasKey(e => new { e.EntityId, e.SysId });

                entity.ToTable("AW_IDNUMBER");

                entity.HasIndex(e => e.SysId, "NonClusteredIndex-20220421-165602")
                    .IsUnique();

                entity.Property(e => e.EntityId)
                    .HasMaxLength(30)
                    .HasColumnName("ENTITY_ID");

                entity.Property(e => e.SysId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("SYS_ID");

                entity.Property(e => e.BatchDate).HasColumnName("BATCH_DATE");

                entity.Property(e => e.BatchNo)
                    .HasMaxLength(15)
                    .HasColumnName("BATCH_NO");

                entity.Property(e => e.IdNotes)
                    .HasColumnType("text")
                    .HasColumnName("ID_NOTES");

                entity.Property(e => e.IdType)
                    .HasMaxLength(255)
                    .HasColumnName("ID_TYPE");

                entity.Property(e => e.IdValue)
                    .HasMaxLength(500)
                    .HasColumnName("ID_VALUE");

                entity.Property(e => e.IdValue2)
                    .HasMaxLength(500)
                    .HasColumnName("ID_VALUE_2")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.InfoSource)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("INFO_SOURCE")
                    .HasDefaultValueSql("(N'DJ')");
            });

            modelBuilder.Entity<AwIdnumberDeltum>(entity =>
            {
                entity.HasKey(e => new { e.EntityId, e.SysId });

                entity.ToTable("AW_IDNUMBER_DELTA");

                entity.Property(e => e.EntityId)
                    .HasMaxLength(30)
                    .HasColumnName("ENTITY_ID");

                entity.Property(e => e.SysId).HasColumnName("SYS_ID");

                entity.Property(e => e.BatchDate).HasColumnName("BATCH_DATE");

                entity.Property(e => e.BatchNo)
                    .HasMaxLength(15)
                    .HasColumnName("BATCH_NO");

                entity.Property(e => e.IdNotes)
                    .HasColumnType("text")
                    .HasColumnName("ID_NOTES");

                entity.Property(e => e.IdType)
                    .HasMaxLength(255)
                    .HasColumnName("ID_TYPE");

                entity.Property(e => e.IdValue)
                    .HasMaxLength(500)
                    .HasColumnName("ID_VALUE");

                entity.Property(e => e.IdValue2)
                    .HasMaxLength(500)
                    .HasColumnName("ID_VALUE_2")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.InfoSource)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("INFO_SOURCE");
            });

            modelBuilder.Entity<AwImage>(entity =>
            {
                entity.HasKey(e => new { e.EntityId, e.SysId });

                entity.ToTable("AW_IMAGE");

                entity.Property(e => e.EntityId)
                    .HasMaxLength(30)
                    .HasColumnName("ENTITY_ID");

                entity.Property(e => e.SysId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("SYS_ID");

                entity.Property(e => e.BatchDate).HasColumnName("BATCH_DATE");

                entity.Property(e => e.BatchNo)
                    .HasMaxLength(15)
                    .HasColumnName("BATCH_NO");

                entity.Property(e => e.ImageId)
                    .HasMaxLength(30)
                    .HasColumnName("IMAGE_ID");

                entity.Property(e => e.ImageType)
                    .HasMaxLength(15)
                    .HasColumnName("IMAGE_TYPE");

                entity.Property(e => e.ImageUrl)
                    .HasMaxLength(2000)
                    .HasColumnName("IMAGE_URL");

                entity.Property(e => e.InfoSource)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("INFO_SOURCE");
            });

            modelBuilder.Entity<AwMaster>(entity =>
            {
                entity.HasKey(e => e.EntityId);

                entity.ToTable("AW_MASTER");

                entity.Property(e => e.EntityId)
                    .HasMaxLength(30)
                    .HasColumnName("ENTITY_ID");

                entity.Property(e => e.Action)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasColumnName("ACTION")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ActiveStatus)
                    .HasMaxLength(50)
                    .HasColumnName("ACTIVE_STATUS");

                entity.Property(e => e.BatchDate).HasColumnName("BATCH_DATE");

                entity.Property(e => e.BatchNo)
                    .HasMaxLength(15)
                    .HasColumnName("BATCH_NO");

                entity.Property(e => e.BirthPlace)
                    .HasMaxLength(150)
                    .HasColumnName("BIRTH_PLACE");

                entity.Property(e => e.CompCode).HasColumnName("COMP_CODE");

                entity.Property(e => e.DateOfBirth)
                    .HasMaxLength(500)
                    .HasColumnName("DATE_OF_BIRTH");

                entity.Property(e => e.DateOfCessation)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("DATE_OF_CESSATION")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DateOfDeath)
                    .HasMaxLength(500)
                    .HasColumnName("DATE_OF_DEATH");

                entity.Property(e => e.DateOfNational)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("DATE_OF_NATIONAL")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DateOfPrivate)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("DATE_OF_PRIVATE")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Deceased)
                    .HasMaxLength(50)
                    .HasColumnName("DECEASED");

                entity.Property(e => e.EntityType)
                    .HasMaxLength(20)
                    .HasColumnName("ENTITY_TYPE");

                entity.Property(e => e.FalsePositive).HasColumnName("FALSE_POSITIVE");

                entity.Property(e => e.FalsePositiveExpiryDt).HasColumnName("FALSE_POSITIVE_EXPIRY_DT");

                entity.Property(e => e.Gender)
                    .HasMaxLength(15)
                    .HasColumnName("GENDER");

                entity.Property(e => e.HighRiskCountry)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasColumnName("HIGH_RISK_COUNTRY")
                    .HasDefaultValueSql("(N' ')");

                entity.Property(e => e.HighRiskCountryScore).HasColumnName("HIGH_RISK_COUNTRY_SCORE");

                entity.Property(e => e.IndustryCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("INDUSTRY_CODE")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.IndustryDesc)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("INDUSTRY_DESC")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.InfoSource)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("INFO_SOURCE")
                    .HasDefaultValueSql("(N'DJ')");

                entity.Property(e => e.LastUpdateDate)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATE_DATE")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ProfileNotes).HasColumnName("PROFILE_NOTES");

                entity.Property(e => e.SubsidiaryCode).HasColumnName("SUBSIDIARY_CODE");

                entity.Property(e => e.SubsidiaryDesc)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("SUBSIDIARY_DESC")
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<AwMasterDelete>(entity =>
            {
                entity.HasKey(e => e.EntityId);

                entity.ToTable("AW_MASTER_DELETE");

                entity.Property(e => e.EntityId)
                    .HasMaxLength(30)
                    .HasColumnName("ENTITY_ID");

                entity.Property(e => e.Action)
                    .HasMaxLength(10)
                    .HasColumnName("ACTION")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ActiveStatus)
                    .HasMaxLength(50)
                    .HasColumnName("ACTIVE_STATUS");

                entity.Property(e => e.ApprovalStatus)
                    .HasColumnName("APPROVAL_STATUS")
                    .HasDefaultValueSql("('0')");

                entity.Property(e => e.ApprovedBy)
                    .HasMaxLength(10)
                    .HasColumnName("APPROVED_BY")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ApprovedDt)
                    .HasColumnName("APPROVED_DT")
                    .HasDefaultValueSql("('0')");

                entity.Property(e => e.ApprovedTm)
                    .HasColumnName("APPROVED_TM")
                    .HasDefaultValueSql("('0')");

                entity.Property(e => e.BatchDate).HasColumnName("BATCH_DATE");

                entity.Property(e => e.BatchNo)
                    .HasMaxLength(15)
                    .HasColumnName("BATCH_NO");

                entity.Property(e => e.BirthPlace)
                    .HasMaxLength(150)
                    .HasColumnName("BIRTH_PLACE");

                entity.Property(e => e.BriefName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("BRIEF_NAME")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CompCode).HasColumnName("COMP_CODE");

                entity.Property(e => e.DateOfBirth)
                    .HasMaxLength(20)
                    .HasColumnName("DATE_OF_BIRTH");

                entity.Property(e => e.DateOfDeath)
                    .HasMaxLength(20)
                    .HasColumnName("DATE_OF_DEATH");

                entity.Property(e => e.Deceased)
                    .HasMaxLength(50)
                    .HasColumnName("DECEASED");

                entity.Property(e => e.EntityType)
                    .HasMaxLength(20)
                    .HasColumnName("ENTITY_TYPE");

                entity.Property(e => e.ExistingStatus)
                    .HasColumnName("EXISTING_STATUS")
                    .HasDefaultValueSql("('0')");

                entity.Property(e => e.FalsePositive).HasColumnName("FALSE_POSITIVE");

                entity.Property(e => e.FalsePositiveExpiryDt).HasColumnName("FALSE_POSITIVE_EXPIRY_DT");

                entity.Property(e => e.Gender)
                    .HasMaxLength(15)
                    .HasColumnName("GENDER");

                entity.Property(e => e.HighRiskCountry)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasColumnName("HIGH_RISK_COUNTRY")
                    .HasDefaultValueSql("(N' ')");

                entity.Property(e => e.HighRiskCountryScore).HasColumnName("HIGH_RISK_COUNTRY_SCORE");

                entity.Property(e => e.InfoSource)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("INFO_SOURCE")
                    .HasDefaultValueSql("(N'DJ')");

                entity.Property(e => e.LastUpdateDate)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATE_DATE")
                    .HasDefaultValueSql("('2007-05-08 12:35:29.123')");

                entity.Property(e => e.ModeMn)
                    .IsRequired()
                    .HasMaxLength(1)
                    .HasColumnName("MODE_MN")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ProfileNotes)
                    .HasColumnType("text")
                    .HasColumnName("PROFILE_NOTES");

                entity.Property(e => e.RjRemarks)
                    .HasMaxLength(512)
                    .HasColumnName("RJ_REMARKS")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StampDttm)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("STAMP_DTTM")
                    .HasDefaultValueSql("('2007-05-08 12:35:00')");

                entity.Property(e => e.UserId)
                    .HasMaxLength(35)
                    .HasColumnName("USER_ID")
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<AwName>(entity =>
            {
                entity.HasKey(e => new { e.EntityId, e.SysId });

                entity.ToTable("AW_NAME");

                entity.HasIndex(e => e.SysId, "NonClusteredIndex-20211213-135200");

                entity.Property(e => e.EntityId)
                    .HasMaxLength(30)
                    .HasColumnName("ENTITY_ID");

                entity.Property(e => e.SysId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("SYS_ID");

                entity.Property(e => e.Action)
                    .HasMaxLength(10)
                    .HasColumnName("ACTION")
                    .HasDefaultValueSql("(N'add')");

                entity.Property(e => e.ApprovalStatus).HasColumnName("APPROVAL_STATUS");

                entity.Property(e => e.BatchDate).HasColumnName("BATCH_DATE");

                entity.Property(e => e.BatchNo)
                    .HasMaxLength(15)
                    .HasColumnName("BATCH_NO");

                entity.Property(e => e.Category)
                    .HasMaxLength(500)
                    .HasColumnName("CATEGORY")
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Categorynum)
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasColumnName("CATEGORYNUM")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Countries)
                    .IsRequired()
                    .HasMaxLength(4000)
                    .HasColumnName("COUNTRIES")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Country)
                    .HasMaxLength(150)
                    .HasColumnName("COUNTRY")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Dob)
                    .HasMaxLength(500)
                    .HasColumnName("DOB")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.EntityName)
                    .HasMaxLength(255)
                    .HasColumnName("ENTITY_NAME");

                entity.Property(e => e.FalsePositive).HasColumnName("FALSE_POSITIVE");

                entity.Property(e => e.FalsePositiveExpiryDt).HasColumnName("FALSE_POSITIVE_EXPIRY_DT");

                entity.Property(e => e.FirstName)
                    .HasMaxLength(255)
                    .HasColumnName("FIRST_NAME");

                entity.Property(e => e.HighRiskCountry)
                    .HasMaxLength(60)
                    .HasColumnName("HIGH_RISK_COUNTRY")
                    .HasDefaultValueSql("(N' ')");

                entity.Property(e => e.HighRiskCountryScore).HasColumnName("HIGH_RISK_COUNTRY_SCORE");

                entity.Property(e => e.IdFilter)
                    .IsRequired()
                    .HasMaxLength(4000)
                    .HasColumnName("ID_FILTER")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.IdRefNo)
                    .HasMaxLength(1000)
                    .HasColumnName("ID_REF_NO")
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.InfoSource)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("INFO_SOURCE")
                    .HasDefaultValueSql("(N'DJ')");

                entity.Property(e => e.MaidenName)
                    .HasMaxLength(255)
                    .HasColumnName("MAIDEN_NAME");

                entity.Property(e => e.MiddleName)
                    .HasMaxLength(255)
                    .HasColumnName("MIDDLE_NAME");

                entity.Property(e => e.NameType)
                    .HasMaxLength(255)
                    .HasColumnName("NAME_TYPE");

                entity.Property(e => e.OriginalScriptName)
                    .HasMaxLength(300)
                    .HasColumnName("ORIGINAL_SCRIPT_NAME");

                entity.Property(e => e.Sanction)
                    .IsRequired()
                    .HasMaxLength(1024)
                    .HasColumnName("SANCTION")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SingleStringName)
                    .HasMaxLength(255)
                    .HasColumnName("SINGLE_STRING_NAME");

                entity.Property(e => e.SingleStringName2)
                    .HasMaxLength(255)
                    .HasColumnName("SINGLE_STRING_NAME2");

                entity.Property(e => e.SingleStringName3)
                    .HasMaxLength(1000)
                    .HasColumnName("SINGLE_STRING_NAME3");

                entity.Property(e => e.Suffix)
                    .HasMaxLength(255)
                    .HasColumnName("SUFFIX");

                entity.Property(e => e.Surname)
                    .HasMaxLength(255)
                    .HasColumnName("SURNAME");

                entity.Property(e => e.TitleHonorific)
                    .HasMaxLength(255)
                    .HasColumnName("TITLE_HONORIFIC");
            });

            modelBuilder.Entity<AwNameDeltum>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("AW_NAME_DELTA");

                entity.Property(e => e.Action)
                    .HasMaxLength(10)
                    .HasColumnName("ACTION");

                entity.Property(e => e.ApprovalStatus).HasColumnName("APPROVAL_STATUS");

                entity.Property(e => e.BatchDate).HasColumnName("BATCH_DATE");

                entity.Property(e => e.BatchNo)
                    .HasMaxLength(15)
                    .HasColumnName("BATCH_NO");

                entity.Property(e => e.Category)
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasColumnName("CATEGORY");

                entity.Property(e => e.Categorynum)
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasColumnName("CATEGORYNUM");

                entity.Property(e => e.Countries)
                    .IsRequired()
                    .HasMaxLength(4000)
                    .HasColumnName("COUNTRIES")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasColumnName("COUNTRY");

                entity.Property(e => e.Dob)
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasColumnName("DOB");

                entity.Property(e => e.EntityId)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("ENTITY_ID");

                entity.Property(e => e.EntityName)
                    .HasMaxLength(255)
                    .HasColumnName("ENTITY_NAME");

                entity.Property(e => e.FalsePositive).HasColumnName("FALSE_POSITIVE");

                entity.Property(e => e.FalsePositiveExpiryDt).HasColumnName("FALSE_POSITIVE_EXPIRY_DT");

                entity.Property(e => e.FirstName)
                    .HasMaxLength(255)
                    .HasColumnName("FIRST_NAME");

                entity.Property(e => e.HighRiskCountry)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasColumnName("HIGH_RISK_COUNTRY");

                entity.Property(e => e.HighRiskCountryScore).HasColumnName("HIGH_RISK_COUNTRY_SCORE");

                entity.Property(e => e.IdFilter)
                    .IsRequired()
                    .HasMaxLength(4000)
                    .HasColumnName("ID_FILTER")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.IdRefNo)
                    .HasMaxLength(1000)
                    .HasColumnName("ID_REF_NO");

                entity.Property(e => e.InfoSource)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("INFO_SOURCE");

                entity.Property(e => e.MaidenName)
                    .HasMaxLength(255)
                    .HasColumnName("MAIDEN_NAME");

                entity.Property(e => e.MiddleName)
                    .HasMaxLength(255)
                    .HasColumnName("MIDDLE_NAME");

                entity.Property(e => e.NameType)
                    .HasMaxLength(255)
                    .HasColumnName("NAME_TYPE");

                entity.Property(e => e.OriginalScriptName)
                    .HasMaxLength(300)
                    .HasColumnName("ORIGINAL_SCRIPT_NAME");

                entity.Property(e => e.Sanction)
                    .IsRequired()
                    .HasMaxLength(1024)
                    .HasColumnName("SANCTION");

                entity.Property(e => e.SingleStringName)
                    .HasMaxLength(255)
                    .HasColumnName("SINGLE_STRING_NAME");

                entity.Property(e => e.SingleStringName2)
                    .HasMaxLength(255)
                    .HasColumnName("SINGLE_STRING_NAME2");

                entity.Property(e => e.SingleStringName3)
                    .HasMaxLength(1000)
                    .HasColumnName("SINGLE_STRING_NAME3");

                entity.Property(e => e.Suffix)
                    .HasMaxLength(255)
                    .HasColumnName("SUFFIX");

                entity.Property(e => e.Surname)
                    .HasMaxLength(255)
                    .HasColumnName("SURNAME");

                entity.Property(e => e.SysId).HasColumnName("SYS_ID");

                entity.Property(e => e.TitleHonorific)
                    .HasMaxLength(255)
                    .HasColumnName("TITLE_HONORIFIC");
            });

            modelBuilder.Entity<AwReference>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("AW_REFERENCE");

                entity.Property(e => e.RefDesc)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("REF_DESC");

                entity.Property(e => e.RefKey1)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("REF_KEY1");

                entity.Property(e => e.RefKey2)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("REF_KEY2");

                entity.Property(e => e.RefNo).HasColumnName("REF_NO");

                entity.Property(e => e.RefType)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("REF_TYPE");

                entity.Property(e => e.RefValuei1).HasColumnName("REF_VALUEI1");

                entity.Property(e => e.RefValuei2).HasColumnName("REF_VALUEI2");

                entity.Property(e => e.RefValuet1)
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasColumnName("REF_VALUET1");

                entity.Property(e => e.RefValuet2)
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasColumnName("REF_VALUET2");
            });

            modelBuilder.Entity<AwRelationship>(entity =>
            {
                entity.HasKey(e => new { e.EntityId, e.SysId });

                entity.ToTable("AW_RELATIONSHIP");

                entity.Property(e => e.EntityId)
                    .HasMaxLength(30)
                    .HasColumnName("ENTITY_ID");

                entity.Property(e => e.SysId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("SYS_ID");

                entity.Property(e => e.AssociateEntity)
                    .HasMaxLength(30)
                    .HasColumnName("ASSOCIATE_ENTITY");

                entity.Property(e => e.BatchDate).HasColumnName("BATCH_DATE");

                entity.Property(e => e.BatchNo)
                    .HasMaxLength(15)
                    .HasColumnName("BATCH_NO");

                entity.Property(e => e.ExRelationship)
                    .HasMaxLength(50)
                    .HasColumnName("EX_RELATIONSHIP");

                entity.Property(e => e.RelationshipType)
                    .HasMaxLength(255)
                    .HasColumnName("RELATIONSHIP_TYPE");
            });

            modelBuilder.Entity<AwResident>(entity =>
            {
                entity.HasKey(e => new { e.EntityId, e.SysId });

                entity.ToTable("AW_RESIDENT");

                entity.Property(e => e.EntityId)
                    .HasMaxLength(30)
                    .HasColumnName("ENTITY_ID");

                entity.Property(e => e.SysId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("SYS_ID");

                entity.Property(e => e.BatchDate).HasColumnName("BATCH_DATE");

                entity.Property(e => e.BatchNo)
                    .HasMaxLength(15)
                    .HasColumnName("BATCH_NO");

                entity.Property(e => e.CountryCode)
                    .HasMaxLength(15)
                    .HasColumnName("COUNTRY_CODE");

                entity.Property(e => e.CountryDesc)
                    .HasMaxLength(150)
                    .HasColumnName("COUNTRY_DESC");

                entity.Property(e => e.CountryType)
                    .HasMaxLength(100)
                    .HasColumnName("COUNTRY_TYPE");

                entity.Property(e => e.MainEntry).HasColumnName("MAIN_ENTRY");

                entity.Property(e => e.SubEntityId)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("SUB_ENTITY_ID");

                entity.Property(e => e.Type).HasColumnName("TYPE");
            });

            modelBuilder.Entity<AwRole>(entity =>
            {
                entity.HasKey(e => new { e.EntityId, e.SysId });

                entity.ToTable("AW_ROLE");

                entity.Property(e => e.EntityId)
                    .HasMaxLength(30)
                    .HasColumnName("ENTITY_ID");

                entity.Property(e => e.SysId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("SYS_ID");

                entity.Property(e => e.BatchDate).HasColumnName("BATCH_DATE");

                entity.Property(e => e.BatchNo)
                    .HasMaxLength(15)
                    .HasColumnName("BATCH_NO");

                entity.Property(e => e.InfoSource)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("INFO_SOURCE");

                entity.Property(e => e.OccCategory)
                    .HasMaxLength(255)
                    .HasColumnName("OCC_CATEGORY");

                entity.Property(e => e.OccId)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasColumnName("OCC_ID");

                entity.Property(e => e.OccTitle)
                    .HasMaxLength(500)
                    .HasColumnName("OCC_TITLE");

                entity.Property(e => e.RoleType)
                    .HasMaxLength(255)
                    .HasColumnName("ROLE_TYPE");

                entity.Property(e => e.SinceDay).HasColumnName("SINCE_DAY");

                entity.Property(e => e.SinceMonth).HasColumnName("SINCE_MONTH");

                entity.Property(e => e.SinceYear).HasColumnName("SINCE_YEAR");

                entity.Property(e => e.ToDay).HasColumnName("TO_DAY");

                entity.Property(e => e.ToMonth).HasColumnName("TO_MONTH");

                entity.Property(e => e.ToYear).HasColumnName("TO_YEAR");
            });

            modelBuilder.Entity<AwSanction>(entity =>
            {
                entity.HasKey(e => new { e.EntityId, e.SysId });

                entity.ToTable("AW_SANCTION");

                entity.Property(e => e.EntityId)
                    .HasMaxLength(30)
                    .HasColumnName("ENTITY_ID");

                entity.Property(e => e.SysId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("SYS_ID");

                entity.Property(e => e.BatchDate).HasColumnName("BATCH_DATE");

                entity.Property(e => e.BatchNo)
                    .HasMaxLength(15)
                    .HasColumnName("BATCH_NO");

                entity.Property(e => e.InfoSource)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("INFO_SOURCE");

                entity.Property(e => e.Reference)
                    .HasMaxLength(300)
                    .HasColumnName("REFERENCE");

                entity.Property(e => e.SinceDay).HasColumnName("SINCE_DAY");

                entity.Property(e => e.SinceMonth).HasColumnName("SINCE_MONTH");

                entity.Property(e => e.SinceYear).HasColumnName("SINCE_YEAR");

                entity.Property(e => e.ToDay).HasColumnName("TO_DAY");

                entity.Property(e => e.ToMonth).HasColumnName("TO_MONTH");

                entity.Property(e => e.ToYear).HasColumnName("TO_YEAR");
            });

            modelBuilder.Entity<AwScanapproval>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("AW_SCANAPPROVAL");

                entity.Property(e => e.ApprovalStatus).HasColumnName("APPROVAL_STATUS");

                entity.Property(e => e.ApprovedBy1)
                    .HasMaxLength(30)
                    .HasColumnName("APPROVED_BY1");

                entity.Property(e => e.ApprovedBy2)
                    .HasMaxLength(30)
                    .HasColumnName("APPROVED_BY2");

                entity.Property(e => e.ApprovedBy3)
                    .HasMaxLength(30)
                    .HasColumnName("APPROVED_BY3");

                entity.Property(e => e.ApprovedDt1).HasColumnName("APPROVED_DT1");

                entity.Property(e => e.ApprovedDt2).HasColumnName("APPROVED_DT2");

                entity.Property(e => e.ApprovedDt3).HasColumnName("APPROVED_DT3");

                entity.Property(e => e.ApprovedTm1).HasColumnName("APPROVED_TM1");

                entity.Property(e => e.ApprovedTm2).HasColumnName("APPROVED_TM2");

                entity.Property(e => e.ApprovedTm3).HasColumnName("APPROVED_TM3");

                entity.Property(e => e.BrCode)
                    .HasMaxLength(20)
                    .HasColumnName("BR_CODE");

                entity.Property(e => e.CompCode).HasColumnName("COMP_CODE");

                entity.Property(e => e.DismissInd).HasColumnName("DISMISS_IND");

                entity.Property(e => e.DoneUserId)
                    .HasMaxLength(35)
                    .HasColumnName("DONE_USER_ID");

                entity.Property(e => e.HitDate).HasColumnName("HIT_DATE");

                entity.Property(e => e.HitTime).HasColumnName("HIT_TIME");

                entity.Property(e => e.NoOfApprovalDone).HasColumnName("NO_OF_APPROVAL_DONE");

                entity.Property(e => e.NoOfApprovalRequired).HasColumnName("NO_OF_APPROVAL_REQUIRED");

                entity.Property(e => e.NoOfRejectedDone).HasColumnName("NO_OF_REJECTED_DONE");

                entity.Property(e => e.Remarks)
                    .HasMaxLength(512)
                    .HasColumnName("REMARKS");

                entity.Property(e => e.ReturnOk).HasColumnName("RETURN_OK");

                entity.Property(e => e.RjRemarks)
                    .HasMaxLength(512)
                    .HasColumnName("RJ_REMARKS");

                entity.Property(e => e.ScanFullPartil)
                    .IsRequired()
                    .HasMaxLength(6)
                    .HasColumnName("SCAN_FULL_PARTIL");

                entity.Property(e => e.ScanInput)
                    .HasMaxLength(300)
                    .HasColumnName("SCAN_INPUT");

                entity.Property(e => e.ScanNo).HasColumnName("SCAN_NO");
            });

            modelBuilder.Entity<AwScanremark>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("AW_SCANREMARK");

                entity.Property(e => e.ApprovalDate).HasColumnName("APPROVAL_DATE");

                entity.Property(e => e.ApprovalTime).HasColumnName("APPROVAL_TIME");

                entity.Property(e => e.ApprovalType)
                    .HasMaxLength(30)
                    .HasColumnName("APPROVAL_TYPE");

                entity.Property(e => e.ApprovedBy)
                    .HasMaxLength(35)
                    .HasColumnName("APPROVED_BY");

                entity.Property(e => e.EstDate).HasColumnName("EST_DATE");

                entity.Property(e => e.Remark)
                    .HasMaxLength(1000)
                    .HasColumnName("REMARK");

                entity.Property(e => e.ScanNo).HasColumnName("SCAN_NO");

                entity.Property(e => e.SysId).HasColumnName("SYS_ID");
            });

            modelBuilder.Entity<AwSource>(entity =>
            {
                entity.HasKey(e => new { e.EntityId, e.SysId });

                entity.ToTable("AW_SOURCE");

                entity.Property(e => e.EntityId)
                    .HasMaxLength(30)
                    .HasColumnName("ENTITY_ID");

                entity.Property(e => e.SysId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("SYS_ID");

                entity.Property(e => e.BatchDate).HasColumnName("BATCH_DATE");

                entity.Property(e => e.BatchNo)
                    .HasMaxLength(15)
                    .HasColumnName("BATCH_NO");

                entity.Property(e => e.InfoSource)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("INFO_SOURCE");

                entity.Property(e => e.Name)
                    .HasMaxLength(2000)
                    .HasColumnName("NAME");
            });

            modelBuilder.Entity<AwStake>(entity =>
            {
                entity.HasKey(e => new { e.EntityId, e.SysId });

                entity.ToTable("AW_STAKE");

                entity.Property(e => e.EntityId)
                    .HasMaxLength(30)
                    .HasColumnName("ENTITY_ID");

                entity.Property(e => e.SysId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("SYS_ID");

                entity.Property(e => e.BatchDate).HasColumnName("BATCH_DATE");

                entity.Property(e => e.BatchNo)
                    .HasMaxLength(15)
                    .HasColumnName("BATCH_NO");

                entity.Property(e => e.InfoSource)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("INFO_SOURCE");

                entity.Property(e => e.Stake1Desc)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("STAKE1_DESC");

                entity.Property(e => e.Stake1Id).HasColumnName("STAKE1_ID");

                entity.Property(e => e.Stake2Desc)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("STAKE2_DESC");

                entity.Property(e => e.Stake2Id).HasColumnName("STAKE2_ID");

                entity.Property(e => e.Stake3Desc)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("STAKE3_DESC");

                entity.Property(e => e.Stake3Id).HasColumnName("STAKE3_ID");

                entity.Property(e => e.StakeNotes)
                    .IsRequired()
                    .HasMaxLength(4000)
                    .HasColumnName("STAKE_NOTES");

                entity.Property(e => e.StakePrct)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("STAKE_PRCT");
            });

            modelBuilder.Entity<AwStr>(entity =>
            {
                entity.HasKey(e => new { e.EntityId, e.SysId });

                entity.ToTable("AW_STR");

                entity.Property(e => e.EntityId)
                    .HasMaxLength(30)
                    .HasColumnName("ENTITY_ID");

                entity.Property(e => e.SysId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("SYS_ID");

                entity.Property(e => e.AccountNo)
                    .HasMaxLength(30)
                    .HasColumnName("ACCOUNT_NO");

                entity.Property(e => e.BatchDate).HasColumnName("BATCH_DATE");

                entity.Property(e => e.BatchNo)
                    .HasMaxLength(15)
                    .HasColumnName("BATCH_NO");

                entity.Property(e => e.DocControlNo)
                    .HasMaxLength(50)
                    .HasColumnName("DOC_CONTROL_NO");

                entity.Property(e => e.DocType)
                    .HasMaxLength(20)
                    .HasColumnName("DOC_TYPE");

                entity.Property(e => e.DownloadableInd).HasColumnName("DOWNLOADABLE_IND");

                entity.Property(e => e.OrgId)
                    .HasMaxLength(20)
                    .HasColumnName("ORG_ID");

                entity.Property(e => e.OrgName)
                    .HasMaxLength(250)
                    .HasColumnName("ORG_NAME");

                entity.Property(e => e.PublicInd).HasColumnName("PUBLIC_IND");

                entity.Property(e => e.RefCaseNo)
                    .HasMaxLength(30)
                    .HasColumnName("REF_CASE_NO");

                entity.Property(e => e.RefNoticeNo)
                    .HasMaxLength(30)
                    .HasColumnName("REF_NOTICE_NO");
            });

            modelBuilder.Entity<AwTempMatchCategoryId>(entity =>
            {
                entity.HasKey(e => e.EntityId);

                entity.ToTable("AW_TempMatchCategoryID");

                entity.Property(e => e.EntityId)
                    .HasMaxLength(30)
                    .HasColumnName("ENTITY_ID")
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<AwTempMatchCategoryName>(entity =>
            {
                entity.HasKey(e => e.EntityId);

                entity.ToTable("AW_TempMatchCategoryName");

                entity.Property(e => e.EntityId)
                    .HasMaxLength(30)
                    .HasColumnName("ENTITY_ID")
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<AwTempMatchSanctionId>(entity =>
            {
                entity.HasKey(e => e.EntityId);

                entity.ToTable("AW_TempMatchSanctionID");

                entity.Property(e => e.EntityId)
                    .HasMaxLength(30)
                    .HasColumnName("ENTITY_ID")
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<AwTempMatchSanctionName>(entity =>
            {
                entity.HasKey(e => e.EntityId);

                entity.ToTable("AW_TempMatchSanctionName");

                entity.Property(e => e.EntityId)
                    .HasMaxLength(30)
                    .HasColumnName("ENTITY_ID")
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<AwVessel>(entity =>
            {
                entity.HasKey(e => new { e.EntityId, e.SysId });

                entity.ToTable("AW_VESSEL");

                entity.Property(e => e.EntityId)
                    .HasMaxLength(30)
                    .HasColumnName("ENTITY_ID");

                entity.Property(e => e.SysId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("SYS_ID");

                entity.Property(e => e.BatchDate).HasColumnName("BATCH_DATE");

                entity.Property(e => e.BatchNo)
                    .HasMaxLength(15)
                    .HasColumnName("BATCH_NO");

                entity.Property(e => e.InfoSource)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("INFO_SOURCE");

                entity.Property(e => e.VesselCallSign)
                    .HasMaxLength(255)
                    .HasColumnName("VESSEL_CALL_SIGN");

                entity.Property(e => e.VesselFlag)
                    .HasMaxLength(255)
                    .HasColumnName("VESSEL_FLAG");

                entity.Property(e => e.VesselGrt)
                    .HasMaxLength(255)
                    .HasColumnName("VESSEL_GRT");

                entity.Property(e => e.VesselOwner)
                    .HasMaxLength(255)
                    .HasColumnName("VESSEL_OWNER");

                entity.Property(e => e.VesselTonnage)
                    .HasMaxLength(255)
                    .HasColumnName("VESSEL_TONNAGE");

                entity.Property(e => e.VesselType)
                    .HasMaxLength(255)
                    .HasColumnName("VESSEL_TYPE");
            });

            modelBuilder.Entity<Bankfintran>(entity =>
            {
                entity.HasKey(e => e.TranId);

                entity.ToTable("BANKFINTRAN");

                entity.Property(e => e.TranId).HasColumnName("TRAN_ID");

                entity.Property(e => e.AccountNo)
                    .HasMaxLength(30)
                    .HasColumnName("ACCOUNT_NO");

                entity.Property(e => e.AuditCreatedDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("AUDIT_CREATED_DATE")
                    .HasComment("Date of this record created");

                entity.Property(e => e.AuditCreatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_CREATED_USER")
                    .HasComment("User who created this record");

                entity.Property(e => e.AuditUpdatedDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("AUDIT_UPDATED_DATE")
                    .HasComment("Date of this record updated");

                entity.Property(e => e.AuditUpdatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_UPDATED_USER")
                    .HasComment("User who updated this record");

                entity.Property(e => e.BatchDate).HasColumnName("BATCH_DATE");

                entity.Property(e => e.BatchNo)
                    .HasMaxLength(15)
                    .HasColumnName("BATCH_NO");

                entity.Property(e => e.BrCode)
                    .HasMaxLength(15)
                    .HasColumnName("BR_CODE");

                entity.Property(e => e.CifId)
                    .HasMaxLength(30)
                    .HasColumnName("CIF_ID");

                entity.Property(e => e.CodeComp)
                    .HasColumnName("CODE_COMP")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.CrAmount).HasColumnName("CR_AMOUNT");

                entity.Property(e => e.CrInd).HasColumnName("CR_IND");

                entity.Property(e => e.CreditDebit).HasColumnName("CREDIT_DEBIT");

                entity.Property(e => e.DrAmount).HasColumnName("DR_AMOUNT");

                entity.Property(e => e.DrInd).HasColumnName("DR_IND");

                entity.Property(e => e.Field1).HasMaxLength(50);

                entity.Property(e => e.Field10)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Field11).HasMaxLength(100);

                entity.Property(e => e.Field12).HasMaxLength(100);

                entity.Property(e => e.Field13)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.Field14).HasMaxLength(100);

                entity.Property(e => e.Field15).HasMaxLength(150);

                entity.Property(e => e.Field2).HasMaxLength(50);

                entity.Property(e => e.Field21).HasColumnName("FIELD21");

                entity.Property(e => e.Field22).HasColumnName("FIELD22");

                entity.Property(e => e.Field23).HasColumnName("FIELD23");

                entity.Property(e => e.Field24).HasColumnName("FIELD24");

                entity.Property(e => e.Field25).HasColumnName("FIELD25");

                entity.Property(e => e.Field26).HasColumnName("FIELD26");

                entity.Property(e => e.Field27).HasColumnName("FIELD27");

                entity.Property(e => e.Field28).HasColumnName("FIELD28");

                entity.Property(e => e.Field29).HasColumnName("FIELD29");

                entity.Property(e => e.Field3).HasMaxLength(50);

                entity.Property(e => e.Field30).HasColumnName("FIELD30");

                entity.Property(e => e.Field31).HasColumnName("FIELD31");

                entity.Property(e => e.Field32).HasColumnName("FIELD32");

                entity.Property(e => e.Field33).HasColumnName("FIELD33");

                entity.Property(e => e.Field34).HasColumnName("FIELD34");

                entity.Property(e => e.Field35).HasColumnName("FIELD35");

                entity.Property(e => e.Field36).HasColumnName("FIELD36");

                entity.Property(e => e.Field37).HasColumnName("FIELD37");

                entity.Property(e => e.Field38).HasColumnName("FIELD38");

                entity.Property(e => e.Field39).HasColumnName("FIELD39");

                entity.Property(e => e.Field4).HasMaxLength(50);

                entity.Property(e => e.Field40).HasColumnName("FIELD40");

                entity.Property(e => e.Field5)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Field50)
                    .HasMaxLength(250)
                    .HasColumnName("FIELD50");

                entity.Property(e => e.Field51)
                    .HasMaxLength(250)
                    .HasColumnName("FIELD51");

                entity.Property(e => e.Field52)
                    .HasMaxLength(250)
                    .HasColumnName("FIELD52");

                entity.Property(e => e.Field53)
                    .HasMaxLength(250)
                    .HasColumnName("FIELD53");

                entity.Property(e => e.Field54)
                    .HasMaxLength(250)
                    .HasColumnName("FIELD54");

                entity.Property(e => e.Field55)
                    .HasMaxLength(250)
                    .HasColumnName("FIELD55");

                entity.Property(e => e.Field6)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Field7)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Field8)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Field9)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ForeignAmount).HasColumnName("FOREIGN_AMOUNT");

                entity.Property(e => e.FxRate)
                    .HasColumnName("FX_RATE")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.InwardOutwardCode)
                    .HasMaxLength(8)
                    .HasColumnName("INWARD_OUTWARD_CODE");

                entity.Property(e => e.LocalAmount).HasColumnName("LOCAL_AMOUNT");

                entity.Property(e => e.LocalCurrency)
                    .HasMaxLength(8)
                    .HasColumnName("LOCAL_CURRENCY");

                entity.Property(e => e.ModeMn)
                    .HasMaxLength(1)
                    .HasColumnName("MODE_MN")
                    .HasDefaultValueSql("(N'A')");

                entity.Property(e => e.PostingDate).HasColumnName("POSTING_DATE");

                entity.Property(e => e.RecIdentityNo)
                    .HasMaxLength(20)
                    .HasColumnName("REC_IDENTITY_NO");

                entity.Property(e => e.RecType)
                    .IsRequired()
                    .HasMaxLength(8)
                    .HasColumnName("REC_TYPE");

                entity.Property(e => e.ReferanceDt)
                    .HasMaxLength(30)
                    .HasColumnName("REFERANCE_DT");

                entity.Property(e => e.ReferanceNo)
                    .HasMaxLength(30)
                    .HasColumnName("REFERANCE_NO");

                entity.Property(e => e.TranCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("TRAN_CODE");

                entity.Property(e => e.TranDate).HasColumnName("TRAN_DATE");

                entity.Property(e => e.TranLocation)
                    .HasMaxLength(20)
                    .HasColumnName("TRAN_LOCATION");

                entity.Property(e => e.TranReversalInd).HasColumnName("TRAN_REVERSAL_IND");

                entity.Property(e => e.UnloadInd)
                    .IsRequired()
                    .HasMaxLength(8)
                    .HasColumnName("UNLOAD_IND");

                entity.Property(e => e.ValueDate).HasColumnName("VALUE_DATE");
            });

            modelBuilder.Entity<Bankfintranhist>(entity =>
            {
                entity.HasKey(e => e.SeqNo)
                    .HasName("PK_BANKFINTRANHIST_1");

                entity.ToTable("BANKFINTRANHIST");

                entity.Property(e => e.SeqNo).HasColumnName("SEQ_NO");

                entity.Property(e => e.AccountNo)
                    .HasMaxLength(30)
                    .HasColumnName("ACCOUNT_NO");

                entity.Property(e => e.AuditCreatedDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("AUDIT_CREATED_DATE")
                    .HasComment("Date of this record created");

                entity.Property(e => e.AuditCreatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_CREATED_USER")
                    .HasComment("User who created this record");

                entity.Property(e => e.AuditUpdatedDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("AUDIT_UPDATED_DATE")
                    .HasComment("Date of this record updated");

                entity.Property(e => e.AuditUpdatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_UPDATED_USER")
                    .HasComment("User who updated this record");

                entity.Property(e => e.BatchDate).HasColumnName("BATCH_DATE");

                entity.Property(e => e.BatchNo)
                    .HasMaxLength(15)
                    .HasColumnName("BATCH_NO");

                entity.Property(e => e.BrCode)
                    .HasMaxLength(15)
                    .HasColumnName("BR_CODE");

                entity.Property(e => e.CifId)
                    .HasMaxLength(30)
                    .HasColumnName("CIF_ID");

                entity.Property(e => e.CompCode).HasColumnName("COMP_CODE");

                entity.Property(e => e.CrAmount).HasColumnName("CR_AMOUNT");

                entity.Property(e => e.CrInd).HasColumnName("CR_IND");

                entity.Property(e => e.CreditDebit).HasColumnName("CREDIT_DEBIT");

                entity.Property(e => e.DrAmount).HasColumnName("DR_AMOUNT");

                entity.Property(e => e.DrInd).HasColumnName("DR_IND");

                entity.Property(e => e.Field1).HasMaxLength(50);

                entity.Property(e => e.Field10)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Field11).HasMaxLength(100);

                entity.Property(e => e.Field12).HasMaxLength(100);

                entity.Property(e => e.Field13)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.Field14).HasMaxLength(100);

                entity.Property(e => e.Field15).HasMaxLength(150);

                entity.Property(e => e.Field2).HasMaxLength(50);

                entity.Property(e => e.Field21).HasColumnName("FIELD21");

                entity.Property(e => e.Field22).HasColumnName("FIELD22");

                entity.Property(e => e.Field23).HasColumnName("FIELD23");

                entity.Property(e => e.Field24).HasColumnName("FIELD24");

                entity.Property(e => e.Field25).HasColumnName("FIELD25");

                entity.Property(e => e.Field26).HasColumnName("FIELD26");

                entity.Property(e => e.Field27).HasColumnName("FIELD27");

                entity.Property(e => e.Field28).HasColumnName("FIELD28");

                entity.Property(e => e.Field29).HasColumnName("FIELD29");

                entity.Property(e => e.Field3).HasMaxLength(50);

                entity.Property(e => e.Field30).HasColumnName("FIELD30");

                entity.Property(e => e.Field31).HasColumnName("FIELD31");

                entity.Property(e => e.Field32).HasColumnName("FIELD32");

                entity.Property(e => e.Field33).HasColumnName("FIELD33");

                entity.Property(e => e.Field34).HasColumnName("FIELD34");

                entity.Property(e => e.Field35).HasColumnName("FIELD35");

                entity.Property(e => e.Field36).HasColumnName("FIELD36");

                entity.Property(e => e.Field37).HasColumnName("FIELD37");

                entity.Property(e => e.Field38).HasColumnName("FIELD38");

                entity.Property(e => e.Field39).HasColumnName("FIELD39");

                entity.Property(e => e.Field4).HasMaxLength(50);

                entity.Property(e => e.Field40).HasColumnName("FIELD40");

                entity.Property(e => e.Field5)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Field50)
                    .HasMaxLength(250)
                    .HasColumnName("FIELD50");

                entity.Property(e => e.Field51)
                    .HasMaxLength(250)
                    .HasColumnName("FIELD51");

                entity.Property(e => e.Field52)
                    .HasMaxLength(250)
                    .HasColumnName("FIELD52");

                entity.Property(e => e.Field53)
                    .HasMaxLength(250)
                    .HasColumnName("FIELD53");

                entity.Property(e => e.Field54)
                    .HasMaxLength(250)
                    .HasColumnName("FIELD54");

                entity.Property(e => e.Field55)
                    .HasMaxLength(250)
                    .HasColumnName("FIELD55");

                entity.Property(e => e.Field6)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Field7)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Field8)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Field9)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ForeignAmount).HasColumnName("FOREIGN_AMOUNT");

                entity.Property(e => e.FxRate).HasColumnName("FX_RATE");

                entity.Property(e => e.InwardOutwardCode)
                    .HasMaxLength(8)
                    .HasColumnName("INWARD_OUTWARD_CODE");

                entity.Property(e => e.LocalAmount).HasColumnName("LOCAL_AMOUNT");

                entity.Property(e => e.LocalCurrency)
                    .HasMaxLength(8)
                    .HasColumnName("LOCAL_CURRENCY");

                entity.Property(e => e.ModeMn)
                    .HasMaxLength(1)
                    .HasColumnName("MODE_MN")
                    .HasDefaultValueSql("(N'A')");

                entity.Property(e => e.PostingDate).HasColumnName("POSTING_DATE");

                entity.Property(e => e.RecIdentityNo)
                    .HasMaxLength(20)
                    .HasColumnName("REC_IDENTITY_NO");

                entity.Property(e => e.RecType)
                    .IsRequired()
                    .HasMaxLength(8)
                    .HasColumnName("REC_TYPE");

                entity.Property(e => e.ReferanceDt)
                    .HasMaxLength(30)
                    .HasColumnName("REFERANCE_DT");

                entity.Property(e => e.ReferanceNo)
                    .HasMaxLength(30)
                    .HasColumnName("REFERANCE_NO");

                entity.Property(e => e.TranCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("TRAN_CODE");

                entity.Property(e => e.TranDate).HasColumnName("TRAN_DATE");

                entity.Property(e => e.TranId).HasColumnName("TRAN_ID");

                entity.Property(e => e.TranLocation)
                    .HasMaxLength(20)
                    .HasColumnName("TRAN_LOCATION");

                entity.Property(e => e.TranReversalInd).HasColumnName("TRAN_REVERSAL_IND");

                entity.Property(e => e.UnloadInd)
                    .IsRequired()
                    .HasMaxLength(8)
                    .HasColumnName("UNLOAD_IND");

                entity.Property(e => e.ValueDate).HasColumnName("VALUE_DATE");
            });

            modelBuilder.Entity<Bankfintranhisthit>(entity =>
            {
                entity.HasKey(e => e.HitTranhistAutoId);

                entity.ToTable("BANKFINTRANHISTHIT");

                entity.Property(e => e.HitTranhistAutoId).HasColumnName("HIT_TRANHIST_AUTO_ID");

                entity.Property(e => e.AccountNo)
                    .HasMaxLength(30)
                    .HasColumnName("ACCOUNT_NO");

                entity.Property(e => e.AlertId).HasColumnName("ALERT_ID");

                entity.Property(e => e.AuditCreatedDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("AUDIT_CREATED_DATE")
                    .HasComment("Date of this record created");

                entity.Property(e => e.AuditCreatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_CREATED_USER")
                    .HasComment("User who created this record");

                entity.Property(e => e.AuditUpdatedDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("AUDIT_UPDATED_DATE")
                    .HasComment("Date of this record updated");

                entity.Property(e => e.AuditUpdatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_UPDATED_USER")
                    .HasComment("User who updated this record");

                entity.Property(e => e.BatchDate).HasColumnName("BATCH_DATE");

                entity.Property(e => e.BatchNo)
                    .HasMaxLength(15)
                    .HasColumnName("BATCH_NO");

                entity.Property(e => e.BrCode)
                    .HasMaxLength(15)
                    .HasColumnName("BR_CODE");

                entity.Property(e => e.CifId)
                    .HasMaxLength(30)
                    .HasColumnName("CIF_ID");

                entity.Property(e => e.CodeComp)
                    .HasColumnName("CODE_COMP")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.CreditDebit)
                    .HasColumnName("CREDIT_DEBIT")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Field1).HasMaxLength(50);

                entity.Property(e => e.Field10)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Field11).HasMaxLength(100);

                entity.Property(e => e.Field12).HasMaxLength(100);

                entity.Property(e => e.Field13)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.Field14).HasMaxLength(100);

                entity.Property(e => e.Field15).HasMaxLength(150);

                entity.Property(e => e.Field2).HasMaxLength(50);

                entity.Property(e => e.Field21).HasColumnName("FIELD21");

                entity.Property(e => e.Field22).HasColumnName("FIELD22");

                entity.Property(e => e.Field23).HasColumnName("FIELD23");

                entity.Property(e => e.Field24).HasColumnName("FIELD24");

                entity.Property(e => e.Field25).HasColumnName("FIELD25");

                entity.Property(e => e.Field26).HasColumnName("FIELD26");

                entity.Property(e => e.Field27).HasColumnName("FIELD27");

                entity.Property(e => e.Field28).HasColumnName("FIELD28");

                entity.Property(e => e.Field29).HasColumnName("FIELD29");

                entity.Property(e => e.Field3).HasMaxLength(50);

                entity.Property(e => e.Field30).HasColumnName("FIELD30");

                entity.Property(e => e.Field31).HasColumnName("FIELD31");

                entity.Property(e => e.Field32).HasColumnName("FIELD32");

                entity.Property(e => e.Field33).HasColumnName("FIELD33");

                entity.Property(e => e.Field34).HasColumnName("FIELD34");

                entity.Property(e => e.Field35).HasColumnName("FIELD35");

                entity.Property(e => e.Field36).HasColumnName("FIELD36");

                entity.Property(e => e.Field37).HasColumnName("FIELD37");

                entity.Property(e => e.Field38).HasColumnName("FIELD38");

                entity.Property(e => e.Field39).HasColumnName("FIELD39");

                entity.Property(e => e.Field4).HasMaxLength(50);

                entity.Property(e => e.Field40).HasColumnName("FIELD40");

                entity.Property(e => e.Field5)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Field50)
                    .HasMaxLength(250)
                    .HasColumnName("FIELD50");

                entity.Property(e => e.Field51)
                    .HasMaxLength(250)
                    .HasColumnName("FIELD51");

                entity.Property(e => e.Field52)
                    .HasMaxLength(250)
                    .HasColumnName("FIELD52");

                entity.Property(e => e.Field53)
                    .HasMaxLength(250)
                    .HasColumnName("FIELD53");

                entity.Property(e => e.Field54)
                    .HasMaxLength(250)
                    .HasColumnName("FIELD54");

                entity.Property(e => e.Field55)
                    .HasMaxLength(250)
                    .HasColumnName("FIELD55");

                entity.Property(e => e.Field6)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Field7)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Field8)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Field9)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ForeignAmount).HasColumnName("FOREIGN_AMOUNT");

                entity.Property(e => e.FxRate).HasColumnName("FX_RATE");

                entity.Property(e => e.InwardOutwardCode)
                    .HasMaxLength(8)
                    .HasColumnName("INWARD_OUTWARD_CODE");

                entity.Property(e => e.LocalAmount).HasColumnName("LOCAL_AMOUNT");

                entity.Property(e => e.LocalCurrency)
                    .HasMaxLength(8)
                    .HasColumnName("LOCAL_CURRENCY");

                entity.Property(e => e.ModeMn)
                    .HasMaxLength(1)
                    .HasColumnName("MODE_MN");

                entity.Property(e => e.PostingDate).HasColumnName("POSTING_DATE");

                entity.Property(e => e.RecIdentityNo)
                    .HasMaxLength(20)
                    .HasColumnName("REC_IDENTITY_NO");

                entity.Property(e => e.RecType)
                    .HasMaxLength(8)
                    .HasColumnName("REC_TYPE");

                entity.Property(e => e.ReferanceDt)
                    .HasMaxLength(30)
                    .HasColumnName("REFERANCE_DT");

                entity.Property(e => e.ReferanceNo)
                    .HasMaxLength(30)
                    .HasColumnName("REFERANCE_NO");

                entity.Property(e => e.TranCode)
                    .HasMaxLength(8)
                    .HasColumnName("TRAN_CODE");

                entity.Property(e => e.TranDate).HasColumnName("TRAN_DATE");

                entity.Property(e => e.TranId).HasColumnName("TRAN_ID");

                entity.Property(e => e.TranLocation)
                    .HasMaxLength(20)
                    .HasColumnName("TRAN_LOCATION");

                entity.Property(e => e.TranReversalInd).HasColumnName("TRAN_REVERSAL_IND");

                entity.Property(e => e.UnloadInd)
                    .HasMaxLength(8)
                    .HasColumnName("UNLOAD_IND");

                entity.Property(e => e.ValueDate).HasColumnName("VALUE_DATE");
            });

            modelBuilder.Entity<Bankfintranhit>(entity =>
            {
                entity.HasKey(e => e.HitTranAutoId);

                entity.ToTable("BANKFINTRANHIT");

                entity.Property(e => e.HitTranAutoId).HasColumnName("HIT_TRAN_AUTO_ID");

                entity.Property(e => e.AccountNo)
                    .HasMaxLength(30)
                    .HasColumnName("ACCOUNT_NO");

                entity.Property(e => e.AlertId).HasColumnName("ALERT_ID");

                entity.Property(e => e.AuditCreatedDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("AUDIT_CREATED_DATE")
                    .HasComment("Date of this record created");

                entity.Property(e => e.AuditCreatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_CREATED_USER")
                    .HasComment("User who created this record");

                entity.Property(e => e.AuditUpdatedDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("AUDIT_UPDATED_DATE")
                    .HasComment("Date of this record updated");

                entity.Property(e => e.AuditUpdatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_UPDATED_USER")
                    .HasComment("User who updated this record");

                entity.Property(e => e.BatchDate).HasColumnName("BATCH_DATE");

                entity.Property(e => e.BatchNo)
                    .HasMaxLength(15)
                    .HasColumnName("BATCH_NO");

                entity.Property(e => e.BrCode)
                    .HasMaxLength(15)
                    .HasColumnName("BR_CODE");

                entity.Property(e => e.CifId)
                    .HasMaxLength(30)
                    .HasColumnName("CIF_ID");

                entity.Property(e => e.CodeComp)
                    .HasColumnName("CODE_COMP")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.CreditDebit).HasColumnName("CREDIT_DEBIT");

                entity.Property(e => e.Field1).HasMaxLength(100);

                entity.Property(e => e.Field10)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Field11).HasMaxLength(100);

                entity.Property(e => e.Field12).HasMaxLength(100);

                entity.Property(e => e.Field13)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.Field14).HasMaxLength(100);

                entity.Property(e => e.Field15).HasMaxLength(150);

                entity.Property(e => e.Field2).HasMaxLength(100);

                entity.Property(e => e.Field21).HasColumnName("FIELD21");

                entity.Property(e => e.Field22).HasColumnName("FIELD22");

                entity.Property(e => e.Field23).HasColumnName("FIELD23");

                entity.Property(e => e.Field24).HasColumnName("FIELD24");

                entity.Property(e => e.Field25).HasColumnName("FIELD25");

                entity.Property(e => e.Field26).HasColumnName("FIELD26");

                entity.Property(e => e.Field27).HasColumnName("FIELD27");

                entity.Property(e => e.Field28).HasColumnName("FIELD28");

                entity.Property(e => e.Field29).HasColumnName("FIELD29");

                entity.Property(e => e.Field3).HasMaxLength(100);

                entity.Property(e => e.Field30).HasColumnName("FIELD30");

                entity.Property(e => e.Field31).HasColumnName("FIELD31");

                entity.Property(e => e.Field32).HasColumnName("FIELD32");

                entity.Property(e => e.Field33).HasColumnName("FIELD33");

                entity.Property(e => e.Field34).HasColumnName("FIELD34");

                entity.Property(e => e.Field35).HasColumnName("FIELD35");

                entity.Property(e => e.Field36).HasColumnName("FIELD36");

                entity.Property(e => e.Field37).HasColumnName("FIELD37");

                entity.Property(e => e.Field38).HasColumnName("FIELD38");

                entity.Property(e => e.Field39).HasColumnName("FIELD39");

                entity.Property(e => e.Field4).HasMaxLength(100);

                entity.Property(e => e.Field40).HasColumnName("FIELD40");

                entity.Property(e => e.Field5)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Field50)
                    .HasMaxLength(250)
                    .HasColumnName("FIELD50");

                entity.Property(e => e.Field51)
                    .HasMaxLength(250)
                    .HasColumnName("FIELD51");

                entity.Property(e => e.Field52)
                    .HasMaxLength(250)
                    .HasColumnName("FIELD52");

                entity.Property(e => e.Field53)
                    .HasMaxLength(250)
                    .HasColumnName("FIELD53");

                entity.Property(e => e.Field54)
                    .HasMaxLength(250)
                    .HasColumnName("FIELD54");

                entity.Property(e => e.Field55)
                    .HasMaxLength(250)
                    .HasColumnName("FIELD55");

                entity.Property(e => e.Field6)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Field7)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Field8)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Field9)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ForeignAmount).HasColumnName("FOREIGN_AMOUNT");

                entity.Property(e => e.FxRate).HasColumnName("FX_RATE");

                entity.Property(e => e.InwardOutwardCode)
                    .HasMaxLength(8)
                    .HasColumnName("INWARD_OUTWARD_CODE");

                entity.Property(e => e.LocalAmount).HasColumnName("LOCAL_AMOUNT");

                entity.Property(e => e.LocalCurrency)
                    .HasMaxLength(8)
                    .HasColumnName("LOCAL_CURRENCY");

                entity.Property(e => e.ModeMn)
                    .HasMaxLength(1)
                    .HasColumnName("MODE_MN")
                    .HasDefaultValueSql("(N'A')");

                entity.Property(e => e.PostingDate).HasColumnName("POSTING_DATE");

                entity.Property(e => e.RecIdentityNo)
                    .HasMaxLength(20)
                    .HasColumnName("REC_IDENTITY_NO");

                entity.Property(e => e.RecType)
                    .HasMaxLength(8)
                    .HasColumnName("REC_TYPE");

                entity.Property(e => e.ReferanceDt)
                    .HasMaxLength(30)
                    .HasColumnName("REFERANCE_DT");

                entity.Property(e => e.ReferanceNo)
                    .HasMaxLength(30)
                    .HasColumnName("REFERANCE_NO");

                entity.Property(e => e.TranCode)
                    .HasMaxLength(8)
                    .HasColumnName("TRAN_CODE");

                entity.Property(e => e.TranDate).HasColumnName("TRAN_DATE");

                entity.Property(e => e.TranId).HasColumnName("TRAN_ID");

                entity.Property(e => e.TranLocation)
                    .HasMaxLength(20)
                    .HasColumnName("TRAN_LOCATION");

                entity.Property(e => e.TranReversalInd).HasColumnName("TRAN_REVERSAL_IND");

                entity.Property(e => e.UnloadInd)
                    .HasMaxLength(8)
                    .HasColumnName("UNLOAD_IND");

                entity.Property(e => e.ValueDate).HasColumnName("VALUE_DATE");
            });

            modelBuilder.Entity<Cifmnrisk>(entity =>
            {
                entity.HasKey(e => new { e.CodeComp, e.CodeOrg, e.NoMaster, e.NoCif })
                    .HasName("PK_CIFMNRISK_1");

                entity.ToTable("CIFMNRISK");

                entity.Property(e => e.CodeComp)
                    .HasColumnName("CODE_COMP")
                    .HasComment("Code Company");

                entity.Property(e => e.CodeOrg)
                    .HasColumnName("CODE_ORG")
                    .HasComment("Code Organization");

                entity.Property(e => e.NoMaster)
                    .HasMaxLength(150)
                    .HasColumnName("NO_MASTER")
                    .HasComment("Master no of client");

                entity.Property(e => e.NoCif)
                    .HasMaxLength(150)
                    .HasColumnName("NO_CIF")
                    .HasComment("CIF Number");

                entity.Property(e => e.ApprovalStatus).HasColumnName("APPROVAL_STATUS");

                entity.Property(e => e.ApprovedBy1)
                    .HasMaxLength(30)
                    .HasColumnName("APPROVED_BY1");

                entity.Property(e => e.ApprovedDt1).HasColumnName("APPROVED_DT1");

                entity.Property(e => e.ApprovedTm1).HasColumnName("APPROVED_TM1");

                entity.Property(e => e.AuditCreatedDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("AUDIT_CREATED_DATE");

                entity.Property(e => e.AuditCreatedUser)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("AUDIT_CREATED_USER")
                    .HasDefaultValueSql("(N'None')");

                entity.Property(e => e.BatchDate).HasColumnName("BATCH_DATE");

                entity.Property(e => e.BatchNo)
                    .HasMaxLength(15)
                    .HasColumnName("BATCH_NO");

                entity.Property(e => e.DoneUserId)
                    .HasMaxLength(30)
                    .HasColumnName("DONE_USER_ID");

                entity.Property(e => e.ModeMn)
                    .HasMaxLength(1)
                    .HasColumnName("MODE_MN")
                    .HasDefaultValueSql("(N'A')");

                entity.Property(e => e.ModifiedDate).HasColumnName("MODIFIED_DATE");

                entity.Property(e => e.ModifiedRiskDesc)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("MODIFIED_RISK_DESC")
                    .HasDefaultValueSql("(N'CIF01')");

                entity.Property(e => e.ModifiedRiskDesc1)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("MODIFIED_RISK_DESC1")
                    .HasDefaultValueSql("(N'CIF01')");

                entity.Property(e => e.ModifiedRiskLevel).HasColumnName("MODIFIED_RISK_LEVEL");

                entity.Property(e => e.ModifiedRiskLevel1).HasColumnName("MODIFIED_RISK_LEVEL1");

                entity.Property(e => e.Remarks)
                    .HasMaxLength(2000)
                    .HasColumnName("REMARKS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.RiskDesc)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("RISK_DESC")
                    .HasDefaultValueSql("(N'ACCOUNT01')");

                entity.Property(e => e.RiskDesc1)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("RISK_DESC1")
                    .HasDefaultValueSql("(N'ACCOUNT01')");

                entity.Property(e => e.RiskLevel).HasColumnName("RISK_LEVEL");

                entity.Property(e => e.RiskLevel1).HasColumnName("RISK_LEVEL1");

                entity.Property(e => e.RjRemarks)
                    .HasMaxLength(1000)
                    .HasColumnName("RJ_REMARKS")
                    .HasDefaultValueSql("(N'None')");

                entity.Property(e => e.UpdateDate).HasColumnName("UPDATE_DATE");

                entity.Property(e => e.UserId1)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("USER_ID1")
                    .HasDefaultValueSql("(N'None')");
            });

            modelBuilder.Entity<Cifmnriskattach>(entity =>
            {
                entity.HasKey(e => new { e.CodeSeq, e.NoCif })
                    .HasName("Pk_CIFMNRISKATTACH_CODE_SEQ_2");

                entity.ToTable("CIFMNRISKATTACH");

                entity.HasComment("Attachment on CIF Risk module");

                entity.Property(e => e.CodeSeq)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("CODE_SEQ");

                entity.Property(e => e.NoCif)
                    .HasMaxLength(150)
                    .HasColumnName("NO_CIF");

                entity.Property(e => e.AuditCreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("AUDIT_CREATED_DATE")
                    .HasComment("Date time attachment being executed");

                entity.Property(e => e.AuditCreatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_CREATED_USER")
                    .HasComment("User ID of staff performed activity");

                entity.Property(e => e.CodeComp)
                    .HasColumnName("CODE_COMP")
                    .HasComment("Company Code");

                entity.Property(e => e.CodeOrg)
                    .HasColumnName("CODE_ORG")
                    .HasComment("Organization Code");

                entity.Property(e => e.FileDesc)
                    .HasMaxLength(200)
                    .HasColumnName("FILE_DESC")
                    .HasComment("File Description");

                entity.Property(e => e.FileEncode)
                    .HasColumnName("FILE_ENCODE")
                    .HasComment("Encoded data of each files");

                entity.Property(e => e.FileName)
                    .HasMaxLength(200)
                    .HasColumnName("FILE_NAME")
                    .HasComment("Attachment File Name");

                entity.Property(e => e.FilePath)
                    .HasMaxLength(200)
                    .HasColumnName("FILE_PATH")
                    .HasComment("Attachment File Path");
            });

            modelBuilder.Entity<Cifmnriskhist>(entity =>
            {
                entity.HasKey(e => new { e.CodeComp, e.CodeOrg, e.NoMaster, e.NoCif })
                    .HasName("PK_CIFMNRISKHIST_1");

                entity.ToTable("CIFMNRISKHIST");

                entity.Property(e => e.CodeComp)
                    .HasColumnName("CODE_COMP")
                    .HasComment("Code Company");

                entity.Property(e => e.CodeOrg)
                    .HasColumnName("CODE_ORG")
                    .HasComment("Code Organization");

                entity.Property(e => e.NoMaster)
                    .HasMaxLength(150)
                    .HasColumnName("NO_MASTER")
                    .HasComment("Master no of client");

                entity.Property(e => e.NoCif)
                    .HasMaxLength(150)
                    .HasColumnName("NO_CIF")
                    .HasComment("CIF Number");

                entity.Property(e => e.ApprovalStatus)
                    .HasColumnName("APPROVAL_STATUS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ApprovedBy1)
                    .HasMaxLength(30)
                    .HasColumnName("APPROVED_BY1");

                entity.Property(e => e.ApprovedDt1)
                    .HasColumnName("APPROVED_DT1")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ApprovedTm1)
                    .HasColumnName("APPROVED_TM1")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.BatchDate)
                    .HasColumnName("BATCH_DATE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.BatchNo)
                    .HasMaxLength(15)
                    .HasColumnName("BATCH_NO");

                entity.Property(e => e.DoneUserId)
                    .HasMaxLength(30)
                    .HasColumnName("DONE_USER_ID");

                entity.Property(e => e.ModeMn)
                    .HasMaxLength(1)
                    .HasColumnName("MODE_MN")
                    .HasDefaultValueSql("(N'A')");

                entity.Property(e => e.ModifiedDate)
                    .HasColumnName("MODIFIED_DATE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ModifiedRiskDesc)
                    .HasMaxLength(30)
                    .HasColumnName("MODIFIED_RISK_DESC")
                    .HasDefaultValueSql("(N'CIF01')");

                entity.Property(e => e.ModifiedRiskDesc1)
                    .HasMaxLength(30)
                    .HasColumnName("MODIFIED_RISK_DESC1")
                    .HasDefaultValueSql("(N'CIF01')");

                entity.Property(e => e.ModifiedRiskLevel).HasColumnName("MODIFIED_RISK_LEVEL");

                entity.Property(e => e.ModifiedRiskLevel1)
                    .HasColumnName("MODIFIED_RISK_LEVEL1")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Remarks)
                    .HasMaxLength(2000)
                    .HasColumnName("REMARKS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.RiskDesc)
                    .HasMaxLength(30)
                    .HasColumnName("RISK_DESC")
                    .HasDefaultValueSql("(N'ACCOUNT01')");

                entity.Property(e => e.RiskDesc1)
                    .HasMaxLength(30)
                    .HasColumnName("RISK_DESC1")
                    .HasDefaultValueSql("(N'ACCOUNT01')");

                entity.Property(e => e.RiskLevel).HasColumnName("RISK_LEVEL");

                entity.Property(e => e.RiskLevel1)
                    .HasColumnName("RISK_LEVEL1")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.RjRemarks)
                    .HasMaxLength(1000)
                    .HasColumnName("RJ_REMARKS")
                    .HasDefaultValueSql("(N'None')");

                entity.Property(e => e.StampDttm)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("STAMP_DTTM");

                entity.Property(e => e.UpdateDate)
                    .HasColumnName("UPDATE_DATE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UserId)
                    .HasMaxLength(30)
                    .HasColumnName("USER_ID")
                    .HasDefaultValueSql("(N'None')");

                entity.Property(e => e.UserId1)
                    .HasMaxLength(30)
                    .HasColumnName("USER_ID1")
                    .HasDefaultValueSql("(N'None')");
            });

            modelBuilder.Entity<Cifrisk>(entity =>
            {
                entity.HasKey(e => new { e.CodeComp, e.CodeOrg, e.NoMaster, e.NoCif, e.RsDate })
                    .HasName("PK_CIFRISK_1");

                entity.ToTable("CIFRISK");

                entity.Property(e => e.CodeComp)
                    .HasColumnName("CODE_COMP")
                    .HasComment("Code Company");

                entity.Property(e => e.CodeOrg)
                    .HasColumnName("CODE_ORG")
                    .HasComment("Code Organization");

                entity.Property(e => e.NoMaster)
                    .HasMaxLength(150)
                    .HasColumnName("NO_MASTER")
                    .HasComment("Master no of client");

                entity.Property(e => e.NoCif)
                    .HasMaxLength(150)
                    .HasColumnName("NO_CIF")
                    .HasComment("CIF Number");

                entity.Property(e => e.RsDate).HasColumnName("RS_DATE");

                entity.Property(e => e.BatchNo)
                    .HasMaxLength(15)
                    .HasColumnName("BATCH_NO");

                entity.Property(e => e.FinalScore).HasColumnName("FINAL_SCORE");

                entity.Property(e => e.LastRiskLevel)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasColumnName("LAST_RISK_LEVEL")
                    .HasDefaultValueSql("(N'None')");

                entity.Property(e => e.LastRiskLevelValue).HasColumnName("LAST_RISK_LEVEL_VALUE");

                entity.Property(e => e.RiskLevel)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasColumnName("RISK_LEVEL")
                    .HasDefaultValueSql("(N'None')");

                entity.Property(e => e.RiskLevelValue).HasColumnName("RISK_LEVEL_VALUE");

                entity.Property(e => e.RiskModel)
                    .HasMaxLength(50)
                    .HasColumnName("RISK_MODEL")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Rsfdscore).HasColumnName("RSFDSCORE");

                entity.Property(e => e.Rsfdscore1).HasColumnName("RSFDSCORE1");

                entity.Property(e => e.Rsfdscore10).HasColumnName("RSFDSCORE10");

                entity.Property(e => e.Rsfdscore11).HasColumnName("RSFDSCORE11");

                entity.Property(e => e.Rsfdscore12).HasColumnName("RSFDSCORE12");

                entity.Property(e => e.Rsfdscore13).HasColumnName("RSFDSCORE13");

                entity.Property(e => e.Rsfdscore14).HasColumnName("RSFDSCORE14");

                entity.Property(e => e.Rsfdscore15)
                    .HasColumnName("RSFDSCORE15")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Rsfdscore16).HasColumnName("RSFDSCORE16");

                entity.Property(e => e.Rsfdscore17).HasColumnName("RSFDSCORE17");

                entity.Property(e => e.Rsfdscore18).HasColumnName("RSFDSCORE18");

                entity.Property(e => e.Rsfdscore19).HasColumnName("RSFDSCORE19");

                entity.Property(e => e.Rsfdscore2).HasColumnName("RSFDSCORE2");

                entity.Property(e => e.Rsfdscore20).HasColumnName("RSFDSCORE20");

                entity.Property(e => e.Rsfdscore3).HasColumnName("RSFDSCORE3");

                entity.Property(e => e.Rsfdscore4).HasColumnName("RSFDSCORE4");

                entity.Property(e => e.Rsfdscore5).HasColumnName("RSFDSCORE5");

                entity.Property(e => e.Rsfdscore6).HasColumnName("RSFDSCORE6");

                entity.Property(e => e.Rsfdscore7).HasColumnName("RSFDSCORE7");

                entity.Property(e => e.Rsfdscore8).HasColumnName("RSFDSCORE8");

                entity.Property(e => e.Rsfdscore9).HasColumnName("RSFDSCORE9");

                entity.Property(e => e.Rsfdvalue1)
                    .HasMaxLength(60)
                    .HasColumnName("RSFDVALUE1");

                entity.Property(e => e.Rsfdvalue10)
                    .HasMaxLength(250)
                    .HasColumnName("RSFDVALUE10");

                entity.Property(e => e.Rsfdvalue11)
                    .HasMaxLength(60)
                    .HasColumnName("RSFDVALUE11");

                entity.Property(e => e.Rsfdvalue12)
                    .HasMaxLength(60)
                    .HasColumnName("RSFDVALUE12");

                entity.Property(e => e.Rsfdvalue13)
                    .HasMaxLength(60)
                    .HasColumnName("RSFDVALUE13");

                entity.Property(e => e.Rsfdvalue14)
                    .HasMaxLength(60)
                    .HasColumnName("RSFDVALUE14");

                entity.Property(e => e.Rsfdvalue15)
                    .HasMaxLength(60)
                    .HasColumnName("RSFDVALUE15");

                entity.Property(e => e.Rsfdvalue16)
                    .HasMaxLength(60)
                    .HasColumnName("RSFDVALUE16");

                entity.Property(e => e.Rsfdvalue17)
                    .HasMaxLength(60)
                    .HasColumnName("RSFDVALUE17");

                entity.Property(e => e.Rsfdvalue18)
                    .HasMaxLength(60)
                    .HasColumnName("RSFDVALUE18");

                entity.Property(e => e.Rsfdvalue19)
                    .HasMaxLength(60)
                    .HasColumnName("RSFDVALUE19");

                entity.Property(e => e.Rsfdvalue2)
                    .HasMaxLength(60)
                    .HasColumnName("RSFDVALUE2");

                entity.Property(e => e.Rsfdvalue20)
                    .HasMaxLength(60)
                    .HasColumnName("RSFDVALUE20");

                entity.Property(e => e.Rsfdvalue3)
                    .HasMaxLength(60)
                    .HasColumnName("RSFDVALUE3");

                entity.Property(e => e.Rsfdvalue4)
                    .HasMaxLength(100)
                    .HasColumnName("RSFDVALUE4");

                entity.Property(e => e.Rsfdvalue5)
                    .HasMaxLength(100)
                    .HasColumnName("RSFDVALUE5");

                entity.Property(e => e.Rsfdvalue6)
                    .HasMaxLength(60)
                    .HasColumnName("RSFDVALUE6");

                entity.Property(e => e.Rsfdvalue7)
                    .HasMaxLength(60)
                    .HasColumnName("RSFDVALUE7");

                entity.Property(e => e.Rsfdvalue8)
                    .HasMaxLength(60)
                    .HasColumnName("RSFDVALUE8");

                entity.Property(e => e.Rsfdvalue9)
                    .HasMaxLength(250)
                    .HasColumnName("RSFDVALUE9");
            });

            modelBuilder.Entity<Cifriskhistory>(entity =>
            {
                entity.HasKey(e => new { e.CodeComp, e.CodeOrg, e.NoMaster, e.NoCif, e.RsDate, e.SeqNo })
                    .HasName("PK_CIFRISKHISTORY_1");

                entity.ToTable("CIFRISKHISTORY");

                entity.Property(e => e.CodeComp)
                    .HasColumnName("CODE_COMP")
                    .HasComment("Code Company");

                entity.Property(e => e.CodeOrg)
                    .HasColumnName("CODE_ORG")
                    .HasComment("Code Organization");

                entity.Property(e => e.NoMaster)
                    .HasMaxLength(150)
                    .HasColumnName("NO_MASTER")
                    .HasComment("Master no of client");

                entity.Property(e => e.NoCif)
                    .HasMaxLength(150)
                    .HasColumnName("NO_CIF")
                    .HasComment("CIF Number");

                entity.Property(e => e.RsDate).HasColumnName("RS_DATE");

                entity.Property(e => e.SeqNo)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("SEQ_NO");

                entity.Property(e => e.AuditCreatedDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("AUDIT_CREATED_DATE");

                entity.Property(e => e.AuditCreatedUser)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("AUDIT_CREATED_USER")
                    .HasDefaultValueSql("(N'SYSTEM')");

                entity.Property(e => e.AuditUpdatedDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("AUDIT_UPDATED_DATE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.AuditUpdatedUser)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("AUDIT_UPDATED_USER")
                    .HasDefaultValueSql("(N'SYSTEM')");

                entity.Property(e => e.BatchNo)
                    .HasMaxLength(15)
                    .HasColumnName("BATCH_NO");

                entity.Property(e => e.FinalScore).HasColumnName("FINAL_SCORE");

                entity.Property(e => e.LastRiskLevel)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasColumnName("LAST_RISK_LEVEL")
                    .HasDefaultValueSql("(N'None')");

                entity.Property(e => e.LastRiskLevelValue).HasColumnName("LAST_RISK_LEVEL_VALUE");

                entity.Property(e => e.ModifiedRiskDesc)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("MODIFIED_RISK_DESC")
                    .HasDefaultValueSql("(N'None')");

                entity.Property(e => e.ModifiedRiskLevel).HasColumnName("MODIFIED_RISK_LEVEL");

                entity.Property(e => e.Remarks)
                    .HasMaxLength(2000)
                    .HasColumnName("REMARKS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.RiskDesc)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("RISK_DESC")
                    .HasDefaultValueSql("(N'None')");

                entity.Property(e => e.RiskLevel).HasColumnName("RISK_LEVEL");

                entity.Property(e => e.RiskModel)
                    .HasColumnName("RISK_MODEL")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Rsfdscore).HasColumnName("RSFDSCORE");

                entity.Property(e => e.Rsfdscore1).HasColumnName("RSFDSCORE1");

                entity.Property(e => e.Rsfdscore10).HasColumnName("RSFDSCORE10");

                entity.Property(e => e.Rsfdscore11).HasColumnName("RSFDSCORE11");

                entity.Property(e => e.Rsfdscore12).HasColumnName("RSFDSCORE12");

                entity.Property(e => e.Rsfdscore13).HasColumnName("RSFDSCORE13");

                entity.Property(e => e.Rsfdscore14).HasColumnName("RSFDSCORE14");

                entity.Property(e => e.Rsfdscore15).HasColumnName("RSFDSCORE15");

                entity.Property(e => e.Rsfdscore16).HasColumnName("RSFDSCORE16");

                entity.Property(e => e.Rsfdscore17).HasColumnName("RSFDSCORE17");

                entity.Property(e => e.Rsfdscore18).HasColumnName("RSFDSCORE18");

                entity.Property(e => e.Rsfdscore19).HasColumnName("RSFDSCORE19");

                entity.Property(e => e.Rsfdscore2).HasColumnName("RSFDSCORE2");

                entity.Property(e => e.Rsfdscore20).HasColumnName("RSFDSCORE20");

                entity.Property(e => e.Rsfdscore3).HasColumnName("RSFDSCORE3");

                entity.Property(e => e.Rsfdscore4).HasColumnName("RSFDSCORE4");

                entity.Property(e => e.Rsfdscore5).HasColumnName("RSFDSCORE5");

                entity.Property(e => e.Rsfdscore6).HasColumnName("RSFDSCORE6");

                entity.Property(e => e.Rsfdscore7).HasColumnName("RSFDSCORE7");

                entity.Property(e => e.Rsfdscore8).HasColumnName("RSFDSCORE8");

                entity.Property(e => e.Rsfdscore9).HasColumnName("RSFDSCORE9");

                entity.Property(e => e.Rsfdvalue1)
                    .HasMaxLength(60)
                    .HasColumnName("RSFDVALUE1");

                entity.Property(e => e.Rsfdvalue10)
                    .HasMaxLength(250)
                    .HasColumnName("RSFDVALUE10");

                entity.Property(e => e.Rsfdvalue11)
                    .HasMaxLength(60)
                    .HasColumnName("RSFDVALUE11");

                entity.Property(e => e.Rsfdvalue12)
                    .HasMaxLength(60)
                    .HasColumnName("RSFDVALUE12");

                entity.Property(e => e.Rsfdvalue13)
                    .HasMaxLength(60)
                    .HasColumnName("RSFDVALUE13");

                entity.Property(e => e.Rsfdvalue14)
                    .HasMaxLength(60)
                    .HasColumnName("RSFDVALUE14");

                entity.Property(e => e.Rsfdvalue15)
                    .HasMaxLength(60)
                    .HasColumnName("RSFDVALUE15");

                entity.Property(e => e.Rsfdvalue16)
                    .HasMaxLength(60)
                    .HasColumnName("RSFDVALUE16");

                entity.Property(e => e.Rsfdvalue17)
                    .HasMaxLength(60)
                    .HasColumnName("RSFDVALUE17");

                entity.Property(e => e.Rsfdvalue18)
                    .HasMaxLength(60)
                    .HasColumnName("RSFDVALUE18");

                entity.Property(e => e.Rsfdvalue19)
                    .HasMaxLength(60)
                    .HasColumnName("RSFDVALUE19");

                entity.Property(e => e.Rsfdvalue2)
                    .HasMaxLength(60)
                    .HasColumnName("RSFDVALUE2");

                entity.Property(e => e.Rsfdvalue20)
                    .HasMaxLength(60)
                    .HasColumnName("RSFDVALUE20");

                entity.Property(e => e.Rsfdvalue3)
                    .HasMaxLength(60)
                    .HasColumnName("RSFDVALUE3");

                entity.Property(e => e.Rsfdvalue4)
                    .HasMaxLength(100)
                    .HasColumnName("RSFDVALUE4");

                entity.Property(e => e.Rsfdvalue5)
                    .HasMaxLength(100)
                    .HasColumnName("RSFDVALUE5");

                entity.Property(e => e.Rsfdvalue6)
                    .HasMaxLength(60)
                    .HasColumnName("RSFDVALUE6");

                entity.Property(e => e.Rsfdvalue7)
                    .HasMaxLength(60)
                    .HasColumnName("RSFDVALUE7");

                entity.Property(e => e.Rsfdvalue8)
                    .HasMaxLength(60)
                    .HasColumnName("RSFDVALUE8");

                entity.Property(e => e.Rsfdvalue9)
                    .HasMaxLength(250)
                    .HasColumnName("RSFDVALUE9");
            });

            modelBuilder.Entity<ConfigCodesDtl>(entity =>
            {
                entity.HasKey(e => new { e.CodeComp, e.CodeOrg, e.CodePrime, e.CodeSub });

                entity.ToTable("CONFIG_CODES_DTL");

                entity.HasComment("To list out the detail of the parameter codes available in the system");

                entity.Property(e => e.CodeComp)
                    .HasColumnName("CODE_COMP")
                    .HasDefaultValueSql("((1))")
                    .HasComment("Company Code");

                entity.Property(e => e.CodeOrg)
                    .HasColumnName("CODE_ORG")
                    .HasDefaultValueSql("((1))")
                    .HasComment("Organization Code");

                entity.Property(e => e.CodePrime)
                    .HasColumnName("CODE_PRIME")
                    .HasComment("Primary Grouping Code");

                entity.Property(e => e.CodeSub)
                    .HasMaxLength(20)
                    .HasColumnName("CODE_SUB")
                    .HasDefaultValueSql("((0))")
                    .HasComment("Paramater Code");

                entity.Property(e => e.AuditCreatedDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("AUDIT_CREATED_DATE")
                    .HasComment("Date of the parameter being registered");

                entity.Property(e => e.AuditCreatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_CREATED_USER")
                    .HasComment("User who created the paramater");

                entity.Property(e => e.AuditUpdatedDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("AUDIT_UPDATED_DATE")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the parameter being updated");

                entity.Property(e => e.AuditUpdatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_UPDATED_USER")
                    .HasComment("User who updated the parameter");

                entity.Property(e => e.ConfigStatus1).HasColumnName("CONFIG_STATUS1");

                entity.Property(e => e.ConfigStatus2).HasColumnName("CONFIG_STATUS2");

                entity.Property(e => e.DataValued1)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("DATA_VALUED1")
                    .HasDefaultValueSql("((0))")
                    .HasComment("Custom decimal field 1");

                entity.Property(e => e.DataValued2)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("DATA_VALUED2")
                    .HasDefaultValueSql("((0))")
                    .HasComment("Custom decimal field 2");

                entity.Property(e => e.DataValuef1)
                    .HasColumnName("DATA_VALUEF1")
                    .HasDefaultValueSql("((0))")
                    .HasComment("Custom float field 1");

                entity.Property(e => e.DataValuef2)
                    .HasColumnName("DATA_VALUEF2")
                    .HasDefaultValueSql("((0))")
                    .HasComment("Custom float field 2");

                entity.Property(e => e.DataValuei1)
                    .HasColumnName("DATA_VALUEI1")
                    .HasDefaultValueSql("((0))")
                    .HasComment("Custom integer field 1");

                entity.Property(e => e.DataValuei2)
                    .HasColumnName("DATA_VALUEI2")
                    .HasDefaultValueSql("((0))")
                    .HasComment("Custom integer field 2");

                entity.Property(e => e.DataValuet1)
                    .HasMaxLength(200)
                    .HasColumnName("DATA_VALUET1")
                    .HasDefaultValueSql("('')")
                    .HasComment("Custom text field 1");

                entity.Property(e => e.DataValuet2)
                    .HasMaxLength(200)
                    .HasColumnName("DATA_VALUET2")
                    .HasDefaultValueSql("('')")
                    .HasComment("Custom text field 2");

                entity.Property(e => e.InfoCategory)
                    .HasMaxLength(50)
                    .HasColumnName("INFO_CATEGORY")
                    .HasComment("Category name for the codes");

                entity.Property(e => e.InfoDesc)
                    .HasColumnName("INFO_DESC")
                    .HasComment("Desription of the paramater registered");

                entity.Property(e => e.InfoDescOther)
                    .HasMaxLength(200)
                    .HasColumnName("INFO_DESC_OTHER")
                    .HasComment("Other description for registered paramater");

                entity.Property(e => e.InfoOrder)
                    .HasColumnName("INFO_ORDER")
                    .HasDefaultValueSql("((0))")
                    .HasComment("To define the order of the paramater (usually in dropdownlist)");

                entity.Property(e => e.Rg1).HasColumnName("RG1");

                entity.Property(e => e.Rg2).HasColumnName("RG2");

                entity.Property(e => e.Rg3).HasColumnName("RG3");

                entity.Property(e => e.Rg4).HasColumnName("RG4");

                entity.Property(e => e.Rg5).HasColumnName("RG5");
            });

            modelBuilder.Entity<ConfigCodesDtlBackup>(entity =>
            {
                entity.HasKey(e => new { e.CodeComp, e.CodeOrg, e.CodePrime, e.CodeSub });

                entity.ToTable("CONFIG_CODES_DTL_BACKUP");

                entity.HasComment("To list out the detail of the parameter codes available in the system");

                entity.Property(e => e.CodeComp)
                    .HasColumnName("CODE_COMP")
                    .HasDefaultValueSql("((1))")
                    .HasComment("Company Code");

                entity.Property(e => e.CodeOrg)
                    .HasColumnName("CODE_ORG")
                    .HasDefaultValueSql("((1))")
                    .HasComment("Organization Code");

                entity.Property(e => e.CodePrime)
                    .HasColumnName("CODE_PRIME")
                    .HasComment("Primary Grouping Code");

                entity.Property(e => e.CodeSub)
                    .HasMaxLength(20)
                    .HasColumnName("CODE_SUB")
                    .HasDefaultValueSql("((0))")
                    .HasComment("Paramater Code");

                entity.Property(e => e.AuditCreatedDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("AUDIT_CREATED_DATE")
                    .HasComment("Date of the parameter being registered");

                entity.Property(e => e.AuditCreatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_CREATED_USER")
                    .HasComment("User who created the paramater");

                entity.Property(e => e.AuditUpdatedDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("AUDIT_UPDATED_DATE")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the parameter being updated");

                entity.Property(e => e.AuditUpdatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_UPDATED_USER")
                    .HasComment("User who updated the parameter");

                entity.Property(e => e.ConfigStatus1).HasColumnName("CONFIG_STATUS1");

                entity.Property(e => e.ConfigStatus2).HasColumnName("CONFIG_STATUS2");

                entity.Property(e => e.DataValued1)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("DATA_VALUED1")
                    .HasDefaultValueSql("((0))")
                    .HasComment("Custom decimal field 1");

                entity.Property(e => e.DataValued2)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("DATA_VALUED2")
                    .HasDefaultValueSql("((0))")
                    .HasComment("Custom decimal field 2");

                entity.Property(e => e.DataValuef1)
                    .HasColumnName("DATA_VALUEF1")
                    .HasDefaultValueSql("((0))")
                    .HasComment("Custom float field 1");

                entity.Property(e => e.DataValuef2)
                    .HasColumnName("DATA_VALUEF2")
                    .HasDefaultValueSql("((0))")
                    .HasComment("Custom float field 2");

                entity.Property(e => e.DataValuei1)
                    .HasColumnName("DATA_VALUEI1")
                    .HasDefaultValueSql("((0))")
                    .HasComment("Custom integer field 1");

                entity.Property(e => e.DataValuei2)
                    .HasColumnName("DATA_VALUEI2")
                    .HasDefaultValueSql("((0))")
                    .HasComment("Custom integer field 2");

                entity.Property(e => e.DataValuet1)
                    .HasMaxLength(200)
                    .HasColumnName("DATA_VALUET1")
                    .HasDefaultValueSql("('')")
                    .HasComment("Custom text field 1");

                entity.Property(e => e.DataValuet2)
                    .HasMaxLength(200)
                    .HasColumnName("DATA_VALUET2")
                    .HasDefaultValueSql("('')")
                    .HasComment("Custom text field 2");

                entity.Property(e => e.InfoCategory)
                    .HasMaxLength(50)
                    .HasColumnName("INFO_CATEGORY")
                    .HasComment("Category name for the codes");

                entity.Property(e => e.InfoDesc)
                    .HasMaxLength(200)
                    .HasColumnName("INFO_DESC")
                    .HasComment("Desription of the paramater registered");

                entity.Property(e => e.InfoDescOther)
                    .HasMaxLength(200)
                    .HasColumnName("INFO_DESC_OTHER")
                    .HasComment("Other description for registered paramater");

                entity.Property(e => e.InfoOrder)
                    .HasColumnName("INFO_ORDER")
                    .HasDefaultValueSql("((0))")
                    .HasComment("To define the order of the paramater (usually in dropdownlist)");
            });

            modelBuilder.Entity<ConfigCodesHdr>(entity =>
            {
                entity.HasKey(e => new { e.CodeComp, e.CodeOrg, e.CodePrime });

                entity.ToTable("CONFIG_CODES_HDR");

                entity.HasComment("Header for config codes dtl");

                entity.HasIndex(e => new { e.CodeComp, e.CodeOrg, e.CodePrime }, "Idx_CONFIG_CODES_HDR")
                    .IsUnique();

                entity.Property(e => e.CodeComp)
                    .HasColumnName("CODE_COMP")
                    .HasDefaultValueSql("((1))")
                    .HasComment("Company Code");

                entity.Property(e => e.CodeOrg)
                    .HasColumnName("CODE_ORG")
                    .HasDefaultValueSql("((1))")
                    .HasComment("Organization Code");

                entity.Property(e => e.CodePrime)
                    .HasColumnName("CODE_PRIME")
                    .HasComment("Grouping Code");

                entity.Property(e => e.AuditCreatedDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("AUDIT_CREATED_DATE")
                    .HasComment("Record created date");

                entity.Property(e => e.AuditCreatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_CREATED_USER")
                    .HasComment("User ID who created this record");

                entity.Property(e => e.AuditUpdateDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("AUDIT_UPDATE_DATE")
                    .HasComment("Date record being updated");

                entity.Property(e => e.AuditUpdateUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_UPDATE_USER")
                    .HasComment("User ID who updated the record");

                entity.Property(e => e.ConfigStatus)
                    .HasColumnName("CONFIG_STATUS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.D1Desc)
                    .HasMaxLength(200)
                    .HasColumnName("D1_DESC");

                entity.Property(e => e.D1Title)
                    .HasMaxLength(100)
                    .HasColumnName("D1_TITLE");

                entity.Property(e => e.D1Visible).HasColumnName("D1_VISIBLE");

                entity.Property(e => e.D2Desc)
                    .HasMaxLength(200)
                    .HasColumnName("D2_DESC");

                entity.Property(e => e.D2Title)
                    .HasMaxLength(100)
                    .HasColumnName("D2_TITLE");

                entity.Property(e => e.D2Visible).HasColumnName("D2_VISIBLE");

                entity.Property(e => e.F1Desc)
                    .HasMaxLength(200)
                    .HasColumnName("F1_DESC")
                    .HasComment("Description of the DATA_VALUEF1");

                entity.Property(e => e.F1Title)
                    .HasMaxLength(100)
                    .HasColumnName("F1_TITLE")
                    .HasComment("Title of the DATA_VALUEF1");

                entity.Property(e => e.F1Visible)
                    .HasColumnName("F1_VISIBLE")
                    .HasComment("Visibility of the DATA_VALUEF1");

                entity.Property(e => e.F2Desc)
                    .HasMaxLength(200)
                    .HasColumnName("F2_DESC");

                entity.Property(e => e.F2Title)
                    .HasMaxLength(100)
                    .HasColumnName("F2_TITLE");

                entity.Property(e => e.F2Visible).HasColumnName("F2_VISIBLE");

                entity.Property(e => e.I1Desc)
                    .HasMaxLength(200)
                    .HasColumnName("I1_DESC")
                    .HasComment("Description of the DATA_VALUEI1");

                entity.Property(e => e.I1Title)
                    .HasMaxLength(100)
                    .HasColumnName("I1_TITLE")
                    .HasComment("Title of the DATA_VALUEI1");

                entity.Property(e => e.I1Visible)
                    .HasColumnName("I1_VISIBLE")
                    .HasComment("Visibility of DATA_VALUEI1 (0D1E)");

                entity.Property(e => e.I2Desc)
                    .HasMaxLength(200)
                    .HasColumnName("I2_DESC")
                    .HasComment("Description of the DATA_VALUEI2");

                entity.Property(e => e.I2Title)
                    .HasMaxLength(100)
                    .HasColumnName("I2_TITLE")
                    .HasComment("Title of the DATA_VALUEI2");

                entity.Property(e => e.I2Visible)
                    .HasColumnName("I2_VISIBLE")
                    .HasComment("VIsibility of the DATA_VALUEI2 (0D1E)");

                entity.Property(e => e.InfoCategory)
                    .HasMaxLength(200)
                    .HasColumnName("INFO_CATEGORY")
                    .HasComment("Description of the grouping category");

                entity.Property(e => e.T1Desc)
                    .HasMaxLength(200)
                    .HasColumnName("T1_DESC");

                entity.Property(e => e.T1Title)
                    .HasMaxLength(100)
                    .HasColumnName("T1_TITLE");

                entity.Property(e => e.T1Visible).HasColumnName("T1_VISIBLE");

                entity.Property(e => e.T2Desc)
                    .HasMaxLength(200)
                    .HasColumnName("T2_DESC");

                entity.Property(e => e.T2Title)
                    .HasMaxLength(100)
                    .HasColumnName("T2_TITLE");

                entity.Property(e => e.T2Visible).HasColumnName("T2_VISIBLE");
            });

            modelBuilder.Entity<ConfigFilter>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CONFIG_FILTER");

                entity.HasComment("Table declared to specified filter for each template and level ID");

                entity.HasIndex(e => new { e.CodeComp, e.CodeOrg, e.FilterType, e.WfModule }, "Idx_CONFIG_FILTER_CODE_COMP");

                entity.Property(e => e.AuditCreatedDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("AUDIT_CREATED_DATE")
                    .HasDefaultValueSql("(sysdatetime())")
                    .HasComment("First date data being created");

                entity.Property(e => e.AuditCreatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_CREATED_USER")
                    .HasDefaultValueSql("('SYSADMIN')")
                    .HasComment("First user created data");

                entity.Property(e => e.AuditUpdatedDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("AUDIT_UPDATED_DATE")
                    .HasDefaultValueSql("(sysdatetime())")
                    .HasComment("Date data get updated");

                entity.Property(e => e.AuditUpdatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_UPDATED_USER")
                    .HasDefaultValueSql("('SYSADMIN')")
                    .HasComment("User who perform latest action");

                entity.Property(e => e.CodeComp)
                    .HasColumnName("CODE_COMP")
                    .HasComment("Company Code");

                entity.Property(e => e.CodeOrg)
                    .HasColumnName("CODE_ORG")
                    .HasComment("Organization Code");

                entity.Property(e => e.FilterData)
                    .HasMaxLength(500)
                    .HasColumnName("FILTER_DATA")
                    .HasComment("Data to be stored for specified filtering");

                entity.Property(e => e.FilterDataEnd)
                    .HasMaxLength(5)
                    .HasColumnName("FILTER_DATA_END")
                    .HasComment("End mark of the data");

                entity.Property(e => e.FilterDataStart)
                    .HasMaxLength(5)
                    .HasColumnName("FILTER_DATA_START");

                entity.Property(e => e.FilterFdName)
                    .HasMaxLength(100)
                    .HasColumnName("FILTER_FD_NAME")
                    .HasComment("Field Name for selection filtering");

                entity.Property(e => e.FilterForm)
                    .HasMaxLength(5)
                    .HasColumnName("FILTER_FORM");

                entity.Property(e => e.FilterTable)
                    .HasMaxLength(50)
                    .HasColumnName("FILTER_TABLE")
                    .HasComment("Table name for specified filtering (Customer/");

                entity.Property(e => e.FilterType)
                    .HasColumnName("FILTER_TYPE")
                    .HasComment("1 - Rule\\n2 - Workflow");

                entity.Property(e => e.RuleId)
                    .HasMaxLength(15)
                    .HasColumnName("RULE_ID")
                    .HasComment("rule for filtering purpose");

                entity.Property(e => e.WfId)
                    .HasColumnName("WF_ID")
                    .HasComment("Workflow ID for selected template");

                entity.Property(e => e.WfLevel)
                    .HasColumnName("WF_LEVEL")
                    .HasComment("Workflow level for selected row");

                entity.Property(e => e.WfModule)
                    .HasColumnName("WF_MODULE")
                    .HasComment("Workflow module affected");
            });

            modelBuilder.Entity<ConfigJob>(entity =>
            {
                entity.HasKey(e => e.JobId);

                entity.ToTable("CONFIG_JOB");

                entity.Property(e => e.JobId)
                    .HasMaxLength(15)
                    .HasColumnName("JOB_ID")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.AuditCreatedDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("AUDIT_CREATED_DATE")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.AuditCreatedUser)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_CREATED_USER")
                    .HasDefaultValueSql("('SYSADMIN')");

                entity.Property(e => e.AuditUpdatedDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("AUDIT_UPDATED_DATE")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.AuditUpdatedUser)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_UPDATED_USER")
                    .HasDefaultValueSql("('SYSADMIN')");

                entity.Property(e => e.CodeComp)
                    .HasColumnName("CODE_COMP")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.CodeOrg)
                    .HasColumnName("CODE_ORG")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.JobGroup)
                    .HasColumnName("JOB_GROUP")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.JobName)
                    .HasMaxLength(500)
                    .HasColumnName("JOB_NAME");

                entity.Property(e => e.JobSeq)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("JOB_SEQ");

                entity.Property(e => e.JobStatus)
                    .HasColumnName("JOB_STATUS")
                    .HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<ConfigJobStep>(entity =>
            {
                entity.HasKey(e => new { e.StepId, e.CodeComp, e.CodeOrg, e.JobId })
                    .HasName("Pk_CONFIG_JOB_STEP_JOB_SEQ");

                entity.ToTable("CONFIG_JOB_STEP");

                entity.Property(e => e.StepId)
                    .HasMaxLength(20)
                    .HasColumnName("STEP_ID");

                entity.Property(e => e.CodeComp)
                    .HasColumnName("CODE_COMP")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.CodeOrg)
                    .HasColumnName("CODE_ORG")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.JobId)
                    .HasMaxLength(15)
                    .HasColumnName("JOB_ID")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.AuditCreatedDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("AUDIT_CREATED_DATE")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.AuditCreatedUser)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_CREATED_USER")
                    .HasDefaultValueSql("('SYSADMIN')");

                entity.Property(e => e.AuditUpdatedDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("AUDIT_UPDATED_DATE")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.AuditUpdatedUser)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_UPDATED_USER")
                    .HasDefaultValueSql("('SYSADMIN')");

                entity.Property(e => e.ProcessPercent).HasColumnName("PROCESS_PERCENT");

                entity.Property(e => e.ProcessStatus)
                    .HasColumnName("PROCESS_STATUS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ProgArgument)
                    .HasMaxLength(500)
                    .HasColumnName("PROG_ARGUMENT");

                entity.Property(e => e.ProgName)
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasColumnName("PROG_NAME")
                    .HasDefaultValueSql("('D:\\AML_INTEGRATOR\\AML_JOBSPOOL\\')");

                entity.Property(e => e.StepName)
                    .HasMaxLength(500)
                    .HasColumnName("STEP_NAME");

                entity.Property(e => e.StepOrder)
                    .HasColumnName("STEP_ORDER")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.StepStatus).HasColumnName("STEP_STATUS");
            });

            modelBuilder.Entity<ConfigOmEndpoint>(entity =>
            {
                entity.HasKey(e => new { e.CodeComp, e.CodeOrg, e.SourceId });

                entity.ToTable("CONFIG_OM_ENDPOINT");

                entity.Property(e => e.CodeComp)
                    .HasColumnName("CODE_COMP")
                    .HasComment("Code Company");

                entity.Property(e => e.CodeOrg)
                    .HasColumnName("CODE_ORG")
                    .HasComment("Code Organization");

                entity.Property(e => e.SourceId)
                    .HasMaxLength(20)
                    .HasColumnName("SOURCE_ID");

                entity.Property(e => e.ApiEndpoint)
                    .HasMaxLength(250)
                    .HasColumnName("API_ENDPOINT");

                entity.Property(e => e.AuditCreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("AUDIT_CREATED_DATE");

                entity.Property(e => e.AuditCreatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_CREATED_USER");

                entity.Property(e => e.AuditUpdatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("AUDIT_UPDATED_DATE");

                entity.Property(e => e.AuditUpdatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_UPDATED_USER");

                entity.Property(e => e.AuthEndpoint)
                    .HasMaxLength(250)
                    .HasColumnName("AUTH_ENDPOINT");

                entity.Property(e => e.SourceName)
                    .HasMaxLength(50)
                    .HasColumnName("SOURCE_NAME");

                entity.Property(e => e.Status).HasColumnName("STATUS");

                entity.Property(e => e.Token)
                    .HasMaxLength(250)
                    .HasColumnName("TOKEN");
            });

            modelBuilder.Entity<ConfigPwrestrict>(entity =>
            {
                entity.HasKey(e => new { e.CodeComp, e.CodeOrg, e.RestrictId })
                    .HasName("PK_CONFIG_PWRESTRICT_1");

                entity.ToTable("CONFIG_PWRESTRICT");

                entity.Property(e => e.CodeComp)
                    .HasColumnName("CODE_COMP")
                    .HasDefaultValueSql("((1))")
                    .HasComment("Company Code");

                entity.Property(e => e.CodeOrg)
                    .HasColumnName("CODE_ORG")
                    .HasDefaultValueSql("((1))")
                    .HasComment("Organization Code");

                entity.Property(e => e.RestrictId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RESTRICT_ID")
                    .HasComment("Password Restriction ID");

                entity.Property(e => e.AuditCreatedDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("AUDIT_CREATED_DATE")
                    .HasComment("Date of the parameter being registered");

                entity.Property(e => e.AuditCreatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_CREATED_USER")
                    .HasComment("User who created the paramater");

                entity.Property(e => e.AuditUpdatedDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("AUDIT_UPDATED_DATE")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the parameter being updated");

                entity.Property(e => e.AuditUpdatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_UPDATED_USER")
                    .HasComment("User who updated the parameter");

                entity.Property(e => e.ConfigStatus).HasColumnName("CONFIG_STATUS");

                entity.Property(e => e.PasswordRestrict)
                    .HasMaxLength(500)
                    .HasColumnName("PASSWORD_RESTRICT");
            });

            modelBuilder.Entity<ConfigRiskassessment>(entity =>
            {
                entity.HasKey(e => new { e.CodeComp, e.CodeOrg, e.AssessmentId });

                entity.ToTable("CONFIG_RISKASSESSMENT");

                entity.Property(e => e.CodeComp)
                    .HasColumnName("CODE_COMP")
                    .HasComment("Company code");

                entity.Property(e => e.CodeOrg)
                    .HasColumnName("CODE_ORG")
                    .HasComment("Organization code");

                entity.Property(e => e.AssessmentId)
                    .HasMaxLength(50)
                    .HasColumnName("ASSESSMENT_ID")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.AssessmentDesc)
                    .HasMaxLength(500)
                    .HasColumnName("ASSESSMENT_DESC");

                entity.Property(e => e.AssessmentModule).HasColumnName("ASSESSMENT_MODULE");

                entity.Property(e => e.AuditCreatedDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("AUDIT_CREATED_DATE")
                    .HasComment("Date of this user being created");

                entity.Property(e => e.AuditCreatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_CREATED_USER")
                    .HasComment("User who created record for this ID");

                entity.Property(e => e.AuditUpdatedDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("AUDIT_UPDATED_DATE")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date of this record being updated");

                entity.Property(e => e.AuditUpdatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_UPDATED_USER")
                    .HasComment("User who update record for this ID");

                entity.Property(e => e.EodBatchStatus).HasColumnName("EOD_BATCH_STATUS");

                entity.Property(e => e.ReviewPeriod1)
                    .HasColumnName("REVIEW_PERIOD1")
                    .HasComment("Review Period (Month)");

                entity.Property(e => e.ReviewPeriod2)
                    .HasColumnName("REVIEW_PERIOD2")
                    .HasComment("Review Period (Month)");

                entity.Property(e => e.ReviewPeriod3)
                    .HasColumnName("REVIEW_PERIOD3")
                    .HasComment("Review Period (Month)");

                entity.Property(e => e.ReviewPeriod4)
                    .HasColumnName("REVIEW_PERIOD4")
                    .HasComment("Review Period (Month)");

                entity.Property(e => e.ReviewPeriod5)
                    .HasColumnName("REVIEW_PERIOD5")
                    .HasComment("Review Period (Month)");

                entity.Property(e => e.ReviewPeriod6)
                    .HasColumnName("REVIEW_PERIOD6")
                    .HasComment("Review Period (Month)");

                entity.Property(e => e.ReviewRiskLvl1)
                    .HasColumnName("REVIEW_RISK_LVL1")
                    .HasComment("Risk Level Need to be review? true or false");

                entity.Property(e => e.ReviewRiskLvl2)
                    .HasColumnName("REVIEW_RISK_LVL2")
                    .HasComment("Risk Level Need to be review? true or false");

                entity.Property(e => e.ReviewRiskLvl3)
                    .HasColumnName("REVIEW_RISK_LVL3")
                    .HasComment("Risk Level Need to be review? true or false");

                entity.Property(e => e.ReviewRiskLvl4)
                    .HasColumnName("REVIEW_RISK_LVL4")
                    .HasComment("Risk Level Need to be review? true or false");

                entity.Property(e => e.ReviewRiskLvl5)
                    .HasColumnName("REVIEW_RISK_LVL5")
                    .HasComment("Risk Level Need to be review? true or false");

                entity.Property(e => e.ReviewRiskLvl6)
                    .HasColumnName("REVIEW_RISK_LVL6")
                    .HasComment("Risk Level Need to be review? true or false");

                entity.Property(e => e.RiskLvl1CustMaxscore)
                    .HasColumnName("RISK_LVL1_CUST_MAXSCORE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.RiskLvl1CustMinscore)
                    .HasColumnName("RISK_LVL1_CUST_MINSCORE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.RiskLvl1Desc)
                    .HasMaxLength(50)
                    .HasColumnName("RISK_LVL1_DESC");

                entity.Property(e => e.RiskLvl1Status).HasColumnName("RISK_LVL1_STATUS");

                entity.Property(e => e.RiskLvl1SysMaxscore)
                    .HasColumnName("RISK_LVL1_SYS_MAXSCORE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.RiskLvl1SysMinscore)
                    .HasColumnName("RISK_LVL1_SYS_MINSCORE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.RiskLvl2CustMaxscore)
                    .HasColumnName("RISK_LVL2_CUST_MAXSCORE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.RiskLvl2CustMinscore)
                    .HasColumnName("RISK_LVL2_CUST_MINSCORE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.RiskLvl2Desc)
                    .HasMaxLength(50)
                    .HasColumnName("RISK_LVL2_DESC");

                entity.Property(e => e.RiskLvl2Status).HasColumnName("RISK_LVL2_STATUS");

                entity.Property(e => e.RiskLvl2SysMaxscore)
                    .HasColumnName("RISK_LVL2_SYS_MAXSCORE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.RiskLvl2SysMinscore)
                    .HasColumnName("RISK_LVL2_SYS_MINSCORE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.RiskLvl3CustMaxscore)
                    .HasColumnName("RISK_LVL3_CUST_MAXSCORE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.RiskLvl3CustMinscore)
                    .HasColumnName("RISK_LVL3_CUST_MINSCORE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.RiskLvl3Desc)
                    .HasMaxLength(50)
                    .HasColumnName("RISK_LVL3_DESC");

                entity.Property(e => e.RiskLvl3Status).HasColumnName("RISK_LVL3_STATUS");

                entity.Property(e => e.RiskLvl3SysMaxscore)
                    .HasColumnName("RISK_LVL3_SYS_MAXSCORE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.RiskLvl3SysMinscore)
                    .HasColumnName("RISK_LVL3_SYS_MINSCORE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.RiskLvl4CustMaxscore)
                    .HasColumnName("RISK_LVL4_CUST_MAXSCORE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.RiskLvl4CustMinscore)
                    .HasColumnName("RISK_LVL4_CUST_MINSCORE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.RiskLvl4Status).HasColumnName("RISK_LVL4_STATUS");

                entity.Property(e => e.RiskLvl4SysMaxscore)
                    .HasColumnName("RISK_LVL4_SYS_MAXSCORE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.RiskLvl4SysMinscore)
                    .HasColumnName("RISK_LVL4_SYS_MINSCORE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.RiskLvl5CustMaxscore)
                    .HasColumnName("RISK_LVL5_CUST_MAXSCORE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.RiskLvl5CustMinscore)
                    .HasColumnName("RISK_LVL5_CUST_MINSCORE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.RiskLvl5Desc)
                    .HasMaxLength(50)
                    .HasColumnName("RISK_LVL5_DESC");

                entity.Property(e => e.RiskLvl5Status).HasColumnName("RISK_LVL5_STATUS");

                entity.Property(e => e.RiskLvl5SysMaxscore)
                    .HasColumnName("RISK_LVL5_SYS_MAXSCORE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.RiskLvl5SysMinscore)
                    .HasColumnName("RISK_LVL5_SYS_MINSCORE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.RiskLvl6CustMaxscore)
                    .HasColumnName("RISK_LVL6_CUST_MAXSCORE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.RiskLvl6CustMinscore)
                    .HasColumnName("RISK_LVL6_CUST_MINSCORE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.RiskLvl6Desc)
                    .HasMaxLength(50)
                    .HasColumnName("RISK_LVL6_DESC");

                entity.Property(e => e.RiskLvl6Status).HasColumnName("RISK_LVL6_STATUS");

                entity.Property(e => e.RiskLvl6SysMaxscore)
                    .HasColumnName("RISK_LVL6_SYS_MAXSCORE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.RiskLvl6SysMinscore)
                    .HasColumnName("RISK_LVL6_SYS_MINSCORE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.RiskScoreCode)
                    .HasMaxLength(50)
                    .HasColumnName("RISK_SCORE_CODE");

                entity.Property(e => e.RskLvl4Desc)
                    .HasMaxLength(50)
                    .HasColumnName("RSK_LVL4_DESC");

                entity.Property(e => e.Status).HasColumnName("STATUS");

                entity.Property(e => e.TotalRisklevel)
                    .HasColumnName("TOTAL_RISKLEVEL")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<ConfigRiskfactor>(entity =>
            {
                entity.HasKey(e => new { e.CodeComp, e.CodeOrg, e.AssessmentId, e.RiskfactorId });

                entity.ToTable("CONFIG_RISKFACTOR");

                entity.Property(e => e.CodeComp)
                    .HasColumnName("CODE_COMP")
                    .HasComment("Company code");

                entity.Property(e => e.CodeOrg)
                    .HasColumnName("CODE_ORG")
                    .HasComment("Organization code");

                entity.Property(e => e.AssessmentId)
                    .HasMaxLength(50)
                    .HasColumnName("ASSESSMENT_ID")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.RiskfactorId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RISKFACTOR_ID");

                entity.Property(e => e.AuditCreatedDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("AUDIT_CREATED_DATE")
                    .HasComment("Date of this user being created");

                entity.Property(e => e.AuditCreatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_CREATED_USER")
                    .HasComment("User who created record for this ID");

                entity.Property(e => e.AuditUpdatedDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("AUDIT_UPDATED_DATE")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date of this record being updated");

                entity.Property(e => e.AuditUpdatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_UPDATED_USER")
                    .HasComment("User who update record for this ID");

                entity.Property(e => e.MaxScore).HasColumnName("MAX_SCORE");

                entity.Property(e => e.MinScore).HasColumnName("MIN_SCORE");

                entity.Property(e => e.ParamCode).HasColumnName("PARAM_CODE");

                entity.Property(e => e.RiskLvl1).HasColumnName("RISK_LVL1");

                entity.Property(e => e.RiskLvl2).HasColumnName("RISK_LVL2");

                entity.Property(e => e.RiskLvl3).HasColumnName("RISK_LVL3");

                entity.Property(e => e.RiskLvl4).HasColumnName("RISK_LVL4");

                entity.Property(e => e.RiskLvl5).HasColumnName("RISK_LVL5");

                entity.Property(e => e.RiskLvl6).HasColumnName("RISK_LVL6");

                entity.Property(e => e.RiskfactorDesc)
                    .HasMaxLength(200)
                    .HasColumnName("RISKFACTOR_DESC");

                entity.Property(e => e.RiskfactorTitle)
                    .HasMaxLength(50)
                    .HasColumnName("RISKFACTOR_TITLE");

                entity.Property(e => e.Status).HasColumnName("STATUS");
            });

            modelBuilder.Entity<ConfigRiskfactorDtl>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CONFIG_RISKFACTOR_DTL");

                entity.Property(e => e.AuditCreatedDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("AUDIT_CREATED_DATE")
                    .HasComment("Date of this user being created");

                entity.Property(e => e.AuditCreatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_CREATED_USER")
                    .HasComment("User who created record for this ID");

                entity.Property(e => e.AuditUpdatedDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("AUDIT_UPDATED_DATE")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date of this record being updated");

                entity.Property(e => e.AuditUpdatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_UPDATED_USER")
                    .HasComment("User who update record for this ID");

                entity.Property(e => e.CodeComp)
                    .HasColumnName("CODE_COMP")
                    .HasComment("Company code");

                entity.Property(e => e.CodeOrg)
                    .HasColumnName("CODE_ORG")
                    .HasComment("Organization code");

                entity.Property(e => e.ParamDesc)
                    .HasMaxLength(500)
                    .HasColumnName("PARAM_DESC");

                entity.Property(e => e.ParamNo).HasColumnName("PARAM_NO");

                entity.Property(e => e.RiskId).HasColumnName("RISK_ID");

                entity.Property(e => e.RiskScore).HasColumnName("RISK_SCORE");

                entity.Property(e => e.Status).HasColumnName("STATUS");
            });

            modelBuilder.Entity<ConfigTableFilter>(entity =>
            {
                entity.HasKey(e => new { e.CodeComp, e.CodeOrg, e.FilterId });

                entity.ToTable("CONFIG_TABLE_FILTER");

                entity.Property(e => e.CodeComp)
                    .HasColumnName("CODE_COMP")
                    .HasComment("Code Company");

                entity.Property(e => e.CodeOrg)
                    .HasColumnName("CODE_ORG")
                    .HasComment("Code Organization");

                entity.Property(e => e.FilterId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("FILTER_ID");

                entity.Property(e => e.AuditCreatedDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("AUDIT_CREATED_DATE")
                    .HasComment("Date of this user being created");

                entity.Property(e => e.AuditCreatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_CREATED_USER")
                    .HasComment("User who created record for this ID");

                entity.Property(e => e.AuditUpdatedDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("AUDIT_UPDATED_DATE")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date of this record being updated");

                entity.Property(e => e.AuditUpdatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_UPDATED_USER")
                    .HasComment("User who update record for this ID");

                entity.Property(e => e.ModuleId).HasColumnName("MODULE_ID");

                entity.Property(e => e.Remarks)
                    .HasMaxLength(50)
                    .HasColumnName("REMARKS");

                entity.Property(e => e.TableName)
                    .HasMaxLength(50)
                    .HasColumnName("TABLE_NAME");
            });

            modelBuilder.Entity<ConfigTsEndpoint>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CONFIG_TS_ENDPOINT");

                entity.Property(e => e.ApiEndpoint)
                    .HasMaxLength(250)
                    .HasColumnName("API_ENDPOINT");

                entity.Property(e => e.AuditCreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("AUDIT_CREATED_DATE");

                entity.Property(e => e.AuditCreatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_CREATED_USER");

                entity.Property(e => e.AuditUpdatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("AUDIT_UPDATED_DATE");

                entity.Property(e => e.AuditUpdatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_UPDATED_USER");

                entity.Property(e => e.AuthEndpoint)
                    .HasMaxLength(250)
                    .HasColumnName("AUTH_ENDPOINT");

                entity.Property(e => e.CodeComp)
                    .HasColumnName("CODE_COMP")
                    .HasComment("Code Company");

                entity.Property(e => e.CodeOrg)
                    .HasColumnName("CODE_ORG")
                    .HasComment("Code Organization");

                entity.Property(e => e.SourceId)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("SOURCE_ID");

                entity.Property(e => e.SourceName)
                    .HasMaxLength(50)
                    .HasColumnName("SOURCE_NAME");

                entity.Property(e => e.Status).HasColumnName("STATUS");

                entity.Property(e => e.Token)
                    .HasMaxLength(250)
                    .HasColumnName("TOKEN");
            });

            modelBuilder.Entity<ConfigWeb>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CONFIG_WEB");

                entity.HasComment("Storing global parameter to be access from the whole solution");

                entity.Property(e => e.AdType)
                    .HasColumnName("AD_TYPE")
                    .HasComment("To indicate the Single Sign On (SSO) Setup \\n0 - No SSO provider\\n1 - Single domain active directory\\n2 - Multiple domain active directory");

                entity.Property(e => e.CodeComp)
                    .HasColumnName("CODE_COMP")
                    .HasComment("Storing company code");

                entity.Property(e => e.CodeOrg)
                    .HasColumnName("CODE_ORG")
                    .HasComment("storing organization code");

                entity.Property(e => e.DateFormat)
                    .HasColumnName("DATE_FORMAT")
                    .HasComment("To set the default format of datetime in the system\\n0 - DD-MMM-YYYY\\n1 - DD-MM-YYYY");

                entity.Property(e => e.EmailExchange)
                    .HasColumnName("EMAIL_EXCHANGE")
                    .HasComment("To setup the email exchange connection\\n0 - Turn off email exchange server\\n1 - Turn on email exchange server\\n2 - Turn on demo email exchange server");

                entity.Property(e => e.EmailHost)
                    .HasMaxLength(200)
                    .HasColumnName("EMAIL_HOST")
                    .HasComment("To configure the email hosting url\\nwpplus04.mschosting.com");

                entity.Property(e => e.EmailPassword)
                    .HasMaxLength(100)
                    .HasColumnName("EMAIL_PASSWORD")
                    .HasComment("To declare the password used by the system\\n****");

                entity.Property(e => e.EmailPort)
                    .HasColumnName("EMAIL_PORT")
                    .HasComment("To declare the port used to access the email hosting\\n587");

                entity.Property(e => e.EmailSecurity)
                    .HasColumnName("EMAIL_SECURITY")
                    .HasComment("To declare the type of security encryption to be uesd for emails\\n0 - Standard SSL/TLS Connection\\n1 - STARTTLSL");

                entity.Property(e => e.EmailUserid)
                    .HasMaxLength(200)
                    .HasColumnName("EMAIL_USERID")
                    .HasComment("To declare the userid used to access email hosting\\nsmtpuser@tessinternational.com");

                entity.Property(e => e.FlagAnalysis).HasColumnName("FLAG_ANALYSIS");

                entity.Property(e => e.FlagLanguage)
                    .HasColumnName("FLAG_LANGUAGE")
                    .HasComment("To set default page language by the system\\n0 - English\\n1 - Configurable");

                entity.Property(e => e.FlagOffline)
                    .HasColumnName("FLAG_OFFLINE")
                    .HasComment("To navigate user to watchlist search page when system is not read\\n0 - Disable\\n1 - Enable");

                entity.Property(e => e.FlagTheme)
                    .HasColumnName("FLAG_THEME")
                    .HasComment("To set default theme by system\\n0 - Basic\\n1 - Dark Mode");

                entity.Property(e => e.FlagWatchlistLog)
                    .HasColumnName("FLAG_WATCHLIST_LOG")
                    .HasComment("To insert scan log into system\\n0 - Disable\\n1 - Enable");

                entity.Property(e => e.FlagWlType)
                    .HasMaxLength(5)
                    .HasColumnName("FLAG_WL_TYPE")
                    .HasComment("To indicate which watchlist provider is being used by system\\nSTD - Standard\\nDJ - Dowjones\\nWC - WorldCheck\\nLN - Lexis Nexis\\nACT - Accuity");

                entity.Property(e => e.PathDns)
                    .HasMaxLength(200)
                    .HasColumnName("PATH_DNS")
                    .HasComment("To set the DNS connection when AD is being used\\nhttp://SERVERNEWNBLOCK.com");

                entity.Property(e => e.PathFileact)
                    .HasMaxLength(200)
                    .HasColumnName("PATH_FILEACT")
                    .HasComment("To locate the path of uploaded file to be store\\nD:\\AML_UPLOAD\\IsemAttachFiles\\Actual_Files\\");

                entity.Property(e => e.PathFilebatch)
                    .HasMaxLength(200)
                    .HasColumnName("PATH_FILEBATCH")
                    .HasComment("To locate the path of batch file\\nD:\\AML_INTEGRATOR\\AML_JOBSPOOL");

                entity.Property(e => e.PathFileoutput)
                    .HasMaxLength(200)
                    .HasColumnName("PATH_FILEOUTPUT")
                    .HasComment("To locate the path of output data from the system\\nD:\\AML_UPLOAD");

                entity.Property(e => e.PathFilestr)
                    .HasMaxLength(200)
                    .HasColumnName("PATH_FILESTR")
                    .HasComment("To locate the path of uploaded file to be store\\nD:\\AML_UPLOAD\\");

                entity.Property(e => e.PathFiletemp)
                    .HasMaxLength(200)
                    .HasColumnName("PATH_FILETEMP")
                    .HasComment("To locate the path of uploaded file to be store\\nD:\\AML_UPLOAD\\IsemAttachFiles\\Temp_Files\\");

                entity.Property(e => e.PathWu)
                    .HasMaxLength(200)
                    .HasColumnName("PATH_WU")
                    .HasComment("To locate the path of western union file to be store\\nD:\\AML_INTEGRATOR\\AML_DATA\\WW");

                entity.Property(e => e.SessionExpireDur).HasColumnName("SESSION_EXPIRE_DUR");

                entity.Property(e => e.SessionLockDur).HasColumnName("SESSION_LOCK_DUR");

                entity.Property(e => e.SizeBatchfile)
                    .HasColumnName("SIZE_BATCHFILE")
                    .HasComment("To indicate the maximum file size allowed on the batch file");

                entity.Property(e => e.SizeUpfile)
                    .HasColumnName("SIZE_UPFILE")
                    .HasComment("To indicate the maximum file size allowed to be upload");

                entity.Property(e => e.TimeFormat)
                    .HasColumnName("TIME_FORMAT")
                    .HasComment("To set the default format of time in the system\\n0 - 24 hours\\n1 - 12 hours");
            });

            modelBuilder.Entity<ConfigWfDtl>(entity =>
            {
                entity.HasKey(e => new { e.CodeComp, e.CodeOrg, e.WfModule, e.WfId, e.WfLevel });

                entity.ToTable("CONFIG_WF_DTL");

                entity.HasComment("To setup the workflow configuration on Transaction Module (to confirm can merged with other modules)");

                entity.Property(e => e.CodeComp)
                    .HasColumnName("CODE_COMP")
                    .HasComment("Company Code");

                entity.Property(e => e.CodeOrg)
                    .HasColumnName("CODE_ORG")
                    .HasComment("Organization Code");

                entity.Property(e => e.WfModule)
                    .HasColumnName("WF_MODULE")
                    .HasComment("Module ID");

                entity.Property(e => e.WfId)
                    .HasColumnName("WF_ID")
                    .HasComment("ID of workflow template");

                entity.Property(e => e.WfLevel)
                    .HasColumnName("WF_LEVEL")
                    .HasComment("Workflow level under template");

                entity.Property(e => e.AuditCreatedDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("AUDIT_CREATED_DATE");

                entity.Property(e => e.AuditCreatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_CREATED_USER");

                entity.Property(e => e.AuditUpdatedDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("AUDIT_UPDATED_DATE");

                entity.Property(e => e.AuditUpdatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_UPDATED_USER");

                entity.Property(e => e.Btn1AllowAmlc)
                    .HasColumnName("BTN1_ALLOW_AMLC")
                    .HasComment("Allow AMLC case to go to approval");

                entity.Property(e => e.Btn1AllowMonitoring)
                    .HasColumnName("BTN1_ALLOW_MONITORING")
                    .HasComment("Allow monitoring for selected case (0D1E)");

                entity.Property(e => e.Btn1AllowPep)
                    .HasColumnName("BTN1_ALLOW_PEP")
                    .HasComment("Allow selected case to view PEP Flag (0D1E)");

                entity.Property(e => e.Btn1AllowReopen)
                    .HasColumnName("BTN1_ALLOW_REOPEN")
                    .HasComment("Allow selected case to be reopen (0D1E)");

                entity.Property(e => e.Btn1AllowReview)
                    .HasColumnName("BTN1_ALLOW_REVIEW")
                    .HasComment("Allow case to be reviewed (0D1E)");

                entity.Property(e => e.Btn1AllowSkip)
                    .HasColumnName("BTN1_ALLOW_SKIP")
                    .HasComment("Allow Skip Level (0D1E)");

                entity.Property(e => e.Btn1AllowStr)
                    .HasColumnName("BTN1_ALLOW_STR")
                    .HasComment("Allow selected case to assign STR Flag (0D1E)");

                entity.Property(e => e.Btn1AmlcAppoval)
                    .HasColumnName("BTN1_AMLC_APPOVAL")
                    .HasDefaultValueSql("((1))")
                    .HasComment("No of AMLC Approval assigned");

                entity.Property(e => e.Btn1AmlcStatus)
                    .HasColumnName("BTN1_AMLC_STATUS")
                    .HasComment("Assigned status AMLC to selected status");

                entity.Property(e => e.Btn1Casestatus)
                    .HasColumnName("BTN1_CASESTATUS")
                    .HasDefaultValueSql("((100))");

                entity.Property(e => e.Btn1EmailApprove)
                    .HasColumnName("BTN1_EMAIL_APPROVE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Btn1EmailApproveStatus)
                    .HasColumnName("BTN1_EMAIL_APPROVE_STATUS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Btn1EmailTemplate)
                    .HasColumnName("BTN1_EMAIL_TEMPLATE")
                    .HasComment("Assign grouping template to selected group");

                entity.Property(e => e.Btn1EmailType)
                    .HasColumnName("BTN1_EMAIL_TYPE")
                    .HasDefaultValueSql("((0))")
                    .HasComment("Assign email template to follow (0-Disable/1-Group/2-Individual)");

                entity.Property(e => e.Btn1EndpointType)
                    .HasColumnName("BTN1_ENDPOINT_TYPE")
                    .HasComment("Single (0) Multiple (1)");

                entity.Property(e => e.Btn1Level)
                    .HasColumnName("BTN1_LEVEL")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Btn1Name)
                    .HasMaxLength(25)
                    .HasColumnName("BTN1_NAME")
                    .HasComment("Display name for button 1");

                entity.Property(e => e.Btn1OmApi)
                    .HasMaxLength(50)
                    .HasColumnName("BTN1_OM_API")
                    .HasComment("API Source Name");

                entity.Property(e => e.Btn1OmApiStatus)
                    .HasColumnName("BTN1_OM_API_STATUS")
                    .HasComment("Onboard approval API status");

                entity.Property(e => e.Btn1PepField1)
                    .HasColumnName("BTN1_PEP_FIELD1")
                    .HasComment("PEP selected field 1");

                entity.Property(e => e.Btn1PepField2)
                    .HasColumnName("BTN1_PEP_FIELD2")
                    .HasComment("PEP selected field 2");

                entity.Property(e => e.Btn1ReopenStatus)
                    .HasColumnName("BTN1_REOPEN_STATUS")
                    .HasComment("Assigned the reopen status into selected status");

                entity.Property(e => e.Btn1ReopenTemplate)
                    .HasColumnName("BTN1_REOPEN_TEMPLATE")
                    .HasComment("Assigned the reopen status into selected template");

                entity.Property(e => e.Btn1ReviewStatus)
                    .HasColumnName("BTN1_REVIEW_STATUS")
                    .HasComment("Assigned the review status into selected status");

                entity.Property(e => e.Btn1Status)
                    .HasColumnName("BTN1_STATUS")
                    .HasComment("Enable button (0D1E)");

                entity.Property(e => e.Btn1StrField1)
                    .HasColumnName("BTN1_STR_FIELD1")
                    .HasComment("STR Selected field 1");

                entity.Property(e => e.Btn1StrField2)
                    .HasColumnName("BTN1_STR_FIELD2")
                    .HasComment("STR Selected field 2");

                entity.Property(e => e.Btn1StrReport)
                    .HasColumnName("BTN1_STR_REPORT")
                    .HasComment("Assign report status to selected status");

                entity.Property(e => e.Btn1Substatus)
                    .HasColumnName("BTN1_SUBSTATUS")
                    .HasDefaultValueSql("((100))");

                entity.Property(e => e.Btn2AllowAmlc).HasColumnName("BTN2_ALLOW_AMLC");

                entity.Property(e => e.Btn2AllowMonitoring).HasColumnName("BTN2_ALLOW_MONITORING");

                entity.Property(e => e.Btn2AllowPep).HasColumnName("BTN2_ALLOW_PEP");

                entity.Property(e => e.Btn2AllowReopen).HasColumnName("BTN2_ALLOW_REOPEN");

                entity.Property(e => e.Btn2AllowReview).HasColumnName("BTN2_ALLOW_REVIEW");

                entity.Property(e => e.Btn2AllowSkip).HasColumnName("BTN2_ALLOW_SKIP");

                entity.Property(e => e.Btn2AllowStr).HasColumnName("BTN2_ALLOW_STR");

                entity.Property(e => e.Btn2AmlcAppoval).HasColumnName("BTN2_AMLC_APPOVAL");

                entity.Property(e => e.Btn2AmlcStatus).HasColumnName("BTN2_AMLC_STATUS");

                entity.Property(e => e.Btn2Casestatus)
                    .HasColumnName("BTN2_CASESTATUS")
                    .HasDefaultValueSql("((100))");

                entity.Property(e => e.Btn2EmailApprove)
                    .HasColumnName("BTN2_EMAIL_APPROVE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Btn2EmailApproveStatus)
                    .HasColumnName("BTN2_EMAIL_APPROVE_STATUS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Btn2EmailTemplate).HasColumnName("BTN2_EMAIL_TEMPLATE");

                entity.Property(e => e.Btn2EmailType).HasColumnName("BTN2_EMAIL_TYPE");

                entity.Property(e => e.Btn2EndpointType)
                    .HasColumnName("BTN2_ENDPOINT_TYPE")
                    .HasComment("Single (0) Multiple (1)");

                entity.Property(e => e.Btn2Level)
                    .HasColumnName("BTN2_LEVEL")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Btn2Name)
                    .HasMaxLength(25)
                    .HasColumnName("BTN2_NAME");

                entity.Property(e => e.Btn2OmApi)
                    .HasMaxLength(50)
                    .HasColumnName("BTN2_OM_API")
                    .HasComment("API Source Name");

                entity.Property(e => e.Btn2OmApiStatus)
                    .HasColumnName("BTN2_OM_API_STATUS")
                    .HasComment("Onboard approval API status");

                entity.Property(e => e.Btn2PepField1).HasColumnName("BTN2_PEP_FIELD1");

                entity.Property(e => e.Btn2PepField2).HasColumnName("BTN2_PEP_FIELD2");

                entity.Property(e => e.Btn2ReopenStatus).HasColumnName("BTN2_REOPEN_STATUS");

                entity.Property(e => e.Btn2ReopenTemplate).HasColumnName("BTN2_REOPEN_TEMPLATE");

                entity.Property(e => e.Btn2ReviewStatus).HasColumnName("BTN2_REVIEW_STATUS");

                entity.Property(e => e.Btn2Status).HasColumnName("BTN2_STATUS");

                entity.Property(e => e.Btn2StrField1).HasColumnName("BTN2_STR_FIELD1");

                entity.Property(e => e.Btn2StrField2).HasColumnName("BTN2_STR_FIELD2");

                entity.Property(e => e.Btn2StrReport).HasColumnName("BTN2_STR_REPORT");

                entity.Property(e => e.Btn2Substatus)
                    .HasColumnName("BTN2_SUBSTATUS")
                    .HasDefaultValueSql("((100))");

                entity.Property(e => e.Btn3AllowAmlc).HasColumnName("BTN3_ALLOW_AMLC");

                entity.Property(e => e.Btn3AllowMonitoring).HasColumnName("BTN3_ALLOW_MONITORING");

                entity.Property(e => e.Btn3AllowPep).HasColumnName("BTN3_ALLOW_PEP");

                entity.Property(e => e.Btn3AllowReopen).HasColumnName("BTN3_ALLOW_REOPEN");

                entity.Property(e => e.Btn3AllowReview).HasColumnName("BTN3_ALLOW_REVIEW");

                entity.Property(e => e.Btn3AllowSkip).HasColumnName("BTN3_ALLOW_SKIP");

                entity.Property(e => e.Btn3AllowStr).HasColumnName("BTN3_ALLOW_STR");

                entity.Property(e => e.Btn3AmlcAppoval).HasColumnName("BTN3_AMLC_APPOVAL");

                entity.Property(e => e.Btn3AmlcStatus).HasColumnName("BTN3_AMLC_STATUS");

                entity.Property(e => e.Btn3Casestatus)
                    .HasColumnName("BTN3_CASESTATUS")
                    .HasDefaultValueSql("((100))");

                entity.Property(e => e.Btn3EmailApprove)
                    .HasColumnName("BTN3_EMAIL_APPROVE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Btn3EmailApproveStatus)
                    .HasColumnName("BTN3_EMAIL_APPROVE_STATUS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Btn3EmailTemplate).HasColumnName("BTN3_EMAIL_TEMPLATE");

                entity.Property(e => e.Btn3EmailType).HasColumnName("BTN3_EMAIL_TYPE");

                entity.Property(e => e.Btn3EndpointType)
                    .HasColumnName("BTN3_ENDPOINT_TYPE")
                    .HasComment("Single (0) Multiple (1)");

                entity.Property(e => e.Btn3Level)
                    .HasColumnName("BTN3_LEVEL")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Btn3Name)
                    .HasMaxLength(25)
                    .HasColumnName("BTN3_NAME");

                entity.Property(e => e.Btn3OmApi)
                    .HasMaxLength(50)
                    .HasColumnName("BTN3_OM_API")
                    .HasComment("API Source Name");

                entity.Property(e => e.Btn3OmApiStatus)
                    .HasColumnName("BTN3_OM_API_STATUS")
                    .HasComment("Onboard approval API status");

                entity.Property(e => e.Btn3PepField1).HasColumnName("BTN3_PEP_FIELD1");

                entity.Property(e => e.Btn3PepField2).HasColumnName("BTN3_PEP_FIELD2");

                entity.Property(e => e.Btn3ReopenStatus).HasColumnName("BTN3_REOPEN_STATUS");

                entity.Property(e => e.Btn3ReopenTemplate).HasColumnName("BTN3_REOPEN_TEMPLATE");

                entity.Property(e => e.Btn3ReviewStatus).HasColumnName("BTN3_REVIEW_STATUS");

                entity.Property(e => e.Btn3Status).HasColumnName("BTN3_STATUS");

                entity.Property(e => e.Btn3StrField1).HasColumnName("BTN3_STR_FIELD1");

                entity.Property(e => e.Btn3StrField2).HasColumnName("BTN3_STR_FIELD2");

                entity.Property(e => e.Btn3StrReport).HasColumnName("BTN3_STR_REPORT");

                entity.Property(e => e.Btn3Substatus)
                    .HasColumnName("BTN3_SUBSTATUS")
                    .HasDefaultValueSql("((100))");

                entity.Property(e => e.Btn4AllowAmlc).HasColumnName("BTN4_ALLOW_AMLC");

                entity.Property(e => e.Btn4AllowMonitoring).HasColumnName("BTN4_ALLOW_MONITORING");

                entity.Property(e => e.Btn4AllowPep).HasColumnName("BTN4_ALLOW_PEP");

                entity.Property(e => e.Btn4AllowReopen).HasColumnName("BTN4_ALLOW_REOPEN");

                entity.Property(e => e.Btn4AllowReview).HasColumnName("BTN4_ALLOW_REVIEW");

                entity.Property(e => e.Btn4AllowSkip).HasColumnName("BTN4_ALLOW_SKIP");

                entity.Property(e => e.Btn4AllowStr).HasColumnName("BTN4_ALLOW_STR");

                entity.Property(e => e.Btn4AmlcAppoval).HasColumnName("BTN4_AMLC_APPOVAL");

                entity.Property(e => e.Btn4AmlcStatus).HasColumnName("BTN4_AMLC_STATUS");

                entity.Property(e => e.Btn4Casestatus)
                    .HasColumnName("BTN4_CASESTATUS")
                    .HasDefaultValueSql("((100))");

                entity.Property(e => e.Btn4EmailApprove)
                    .HasColumnName("BTN4_EMAIL_APPROVE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Btn4EmailApproveStatus)
                    .HasColumnName("BTN4_EMAIL_APPROVE_STATUS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Btn4EmailTemplate).HasColumnName("BTN4_EMAIL_TEMPLATE");

                entity.Property(e => e.Btn4EmailType).HasColumnName("BTN4_EMAIL_TYPE");

                entity.Property(e => e.Btn4EndpointType)
                    .HasColumnName("BTN4_ENDPOINT_TYPE")
                    .HasComment("Single (0) Multiple (1)");

                entity.Property(e => e.Btn4Level)
                    .HasColumnName("BTN4_LEVEL")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Btn4Name)
                    .HasMaxLength(25)
                    .HasColumnName("BTN4_NAME");

                entity.Property(e => e.Btn4OmApi)
                    .HasMaxLength(50)
                    .HasColumnName("BTN4_OM_API")
                    .HasComment("API Source Name");

                entity.Property(e => e.Btn4OmApiStatus)
                    .HasColumnName("BTN4_OM_API_STATUS")
                    .HasComment("Onboard approval API status");

                entity.Property(e => e.Btn4PepField1).HasColumnName("BTN4_PEP_FIELD1");

                entity.Property(e => e.Btn4PepField2).HasColumnName("BTN4_PEP_FIELD2");

                entity.Property(e => e.Btn4ReopenStatus).HasColumnName("BTN4_REOPEN_STATUS");

                entity.Property(e => e.Btn4ReopenTemplate).HasColumnName("BTN4_REOPEN_TEMPLATE");

                entity.Property(e => e.Btn4ReviewStatus).HasColumnName("BTN4_REVIEW_STATUS");

                entity.Property(e => e.Btn4Status).HasColumnName("BTN4_STATUS");

                entity.Property(e => e.Btn4StrField1).HasColumnName("BTN4_STR_FIELD1");

                entity.Property(e => e.Btn4StrField2).HasColumnName("BTN4_STR_FIELD2");

                entity.Property(e => e.Btn4StrReport).HasColumnName("BTN4_STR_REPORT");

                entity.Property(e => e.Btn4Substatus)
                    .HasColumnName("BTN4_SUBSTATUS")
                    .HasDefaultValueSql("((100))");

                entity.Property(e => e.Btn5AllowAmlc).HasColumnName("BTN5_ALLOW_AMLC");

                entity.Property(e => e.Btn5AllowMonitoring).HasColumnName("BTN5_ALLOW_MONITORING");

                entity.Property(e => e.Btn5AllowPep).HasColumnName("BTN5_ALLOW_PEP");

                entity.Property(e => e.Btn5AllowReopen).HasColumnName("BTN5_ALLOW_REOPEN");

                entity.Property(e => e.Btn5AllowReview).HasColumnName("BTN5_ALLOW_REVIEW");

                entity.Property(e => e.Btn5AllowSkip).HasColumnName("BTN5_ALLOW_SKIP");

                entity.Property(e => e.Btn5AllowStr).HasColumnName("BTN5_ALLOW_STR");

                entity.Property(e => e.Btn5AmlcAppoval).HasColumnName("BTN5_AMLC_APPOVAL");

                entity.Property(e => e.Btn5AmlcStatus).HasColumnName("BTN5_AMLC_STATUS");

                entity.Property(e => e.Btn5Casestatus)
                    .HasColumnName("BTN5_CASESTATUS")
                    .HasDefaultValueSql("((100))");

                entity.Property(e => e.Btn5EmailApprove)
                    .HasColumnName("BTN5_EMAIL_APPROVE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Btn5EmailApproveStatus)
                    .HasColumnName("BTN5_EMAIL_APPROVE_STATUS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Btn5EmailTemplate).HasColumnName("BTN5_EMAIL_TEMPLATE");

                entity.Property(e => e.Btn5EmailType).HasColumnName("BTN5_EMAIL_TYPE");

                entity.Property(e => e.Btn5EndpointType)
                    .HasColumnName("BTN5_ENDPOINT_TYPE")
                    .HasComment("Single (0) Multiple (1)");

                entity.Property(e => e.Btn5Level)
                    .HasColumnName("BTN5_LEVEL")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Btn5Name)
                    .HasMaxLength(25)
                    .HasColumnName("BTN5_NAME");

                entity.Property(e => e.Btn5OmApi)
                    .HasMaxLength(50)
                    .HasColumnName("BTN5_OM_API")
                    .HasComment("API Source Name");

                entity.Property(e => e.Btn5OmApiStatus)
                    .HasColumnName("BTN5_OM_API_STATUS")
                    .HasComment("Onboard approval API status");

                entity.Property(e => e.Btn5PepField1).HasColumnName("BTN5_PEP_FIELD1");

                entity.Property(e => e.Btn5PepField2).HasColumnName("BTN5_PEP_FIELD2");

                entity.Property(e => e.Btn5ReopenStatus).HasColumnName("BTN5_REOPEN_STATUS");

                entity.Property(e => e.Btn5ReopenTemplate).HasColumnName("BTN5_REOPEN_TEMPLATE");

                entity.Property(e => e.Btn5ReviewStatus).HasColumnName("BTN5_REVIEW_STATUS");

                entity.Property(e => e.Btn5Status).HasColumnName("BTN5_STATUS");

                entity.Property(e => e.Btn5StrField1).HasColumnName("BTN5_STR_FIELD1");

                entity.Property(e => e.Btn5StrField2).HasColumnName("BTN5_STR_FIELD2");

                entity.Property(e => e.Btn5StrReport).HasColumnName("BTN5_STR_REPORT");

                entity.Property(e => e.Btn5Substatus)
                    .HasColumnName("BTN5_SUBSTATUS")
                    .HasDefaultValueSql("((100))");

                entity.Property(e => e.WfBypass)
                    .HasColumnName("WF_BYPASS")
                    .HasComment("Allowing  bypass on following level (0D1E)");

                entity.Property(e => e.WfChangeRiskLvl)
                    .HasColumnName("WF_CHANGE_RISK_LVL")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.WfDescription)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("WF_DESCRIPTION")
                    .HasComment("Description of the configured workflow");

                entity.Property(e => e.WfFilterStatus)
                    .HasColumnName("WF_FILTER_STATUS")
                    .HasDefaultValueSql("((0))")
                    .HasComment("To indicate the filtering is being used on following template (0D1E)");

                entity.Property(e => e.WfManageClientMonitoring).HasColumnName("WF_MANAGE_CLIENT_MONITORING");

                entity.Property(e => e.WfManageExposure)
                    .HasColumnName("WF_MANAGE_EXPOSURE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.WfManageOdd)
                    .HasColumnName("WF_MANAGE_ODD")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.WfManageRedFlag)
                    .HasColumnName("WF_MANAGE_RED_FLAG")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.WfPickup)
                    .HasColumnName("WF_PICKUP")
                    .HasDefaultValueSql("((0))")
                    .HasComment("Allow to pickup case at any level");

                entity.Property(e => e.WfReassign)
                    .HasColumnName("WF_REASSIGN")
                    .HasDefaultValueSql("((0))")
                    .HasComment("allow to reasign case");

                entity.Property(e => e.WfRework)
                    .HasColumnName("WF_REWORK")
                    .HasDefaultValueSql("((0))")
                    .HasComment("allow to rework case");

                entity.Property(e => e.WfRptDraft)
                    .HasColumnName("WF_RPT_DRAFT")
                    .HasComment("Enable draft report (0D1E)");

                entity.Property(e => e.WfRptMandatory)
                    .HasColumnName("WF_RPT_MANDATORY")
                    .HasComment("Enable mandatory to draft report (0D1E)");

                entity.Property(e => e.WfSkipLevel)
                    .HasColumnName("WF_SKIP_LEVEL")
                    .HasComment("To configure access on picking alert below accessible level");

                entity.Property(e => e.WfSource)
                    .HasColumnName("WF_SOURCE")
                    .HasComment("To declare the source type of data\\n0 - system generated\\n1 - manually raised");

                entity.Property(e => e.WfStatus)
                    .HasColumnName("WF_STATUS")
                    .HasComment("To indicate the status of template (0D1E)");
            });

            modelBuilder.Entity<ConfigWfFilter>(entity =>
            {
                entity.HasKey(e => new { e.CodeComp, e.CodeOrg, e.WfModule, e.WfId, e.WfLevel, e.FilterId });

                entity.ToTable("CONFIG_WF_FILTER");

                entity.HasComment("Table declared to specified filter for each template and level ID");

                entity.Property(e => e.CodeComp)
                    .HasColumnName("CODE_COMP")
                    .HasComment("Company Code");

                entity.Property(e => e.CodeOrg)
                    .HasColumnName("CODE_ORG")
                    .HasComment("Organization Code");

                entity.Property(e => e.WfModule)
                    .HasColumnName("WF_MODULE")
                    .HasComment("Workflow module affected");

                entity.Property(e => e.WfId)
                    .HasColumnName("WF_ID")
                    .HasComment("Workflow ID for selected template");

                entity.Property(e => e.WfLevel)
                    .HasColumnName("WF_LEVEL")
                    .HasComment("Workflow level for selected row");

                entity.Property(e => e.FilterId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("FILTER_ID");

                entity.Property(e => e.AuditCreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("AUDIT_CREATED_DATE");

                entity.Property(e => e.AuditCreatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_CREATED_USER");

                entity.Property(e => e.AuditUpdatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("AUDIT_UPDATED_DATE");

                entity.Property(e => e.AuditUpdatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_UPDATED_USER");

                entity.Property(e => e.FilterCbracket)
                    .HasMaxLength(50)
                    .HasColumnName("FILTER_CBRACKET");

                entity.Property(e => e.FilterDatatype)
                    .HasMaxLength(50)
                    .HasColumnName("FILTER_DATATYPE");

                entity.Property(e => e.FilterField)
                    .HasMaxLength(100)
                    .HasColumnName("FILTER_FIELD")
                    .HasComment("Field Name for selection filtering");

                entity.Property(e => e.FilterFormula)
                    .HasMaxLength(50)
                    .HasColumnName("FILTER_FORMULA");

                entity.Property(e => e.FilterInputData)
                    .HasMaxLength(500)
                    .HasColumnName("FILTER_INPUT_DATA")
                    .HasComment("Data to be stored for specified filtering");

                entity.Property(e => e.FilterObracket)
                    .HasMaxLength(50)
                    .HasColumnName("FILTER_OBRACKET");

                entity.Property(e => e.FilterOperator)
                    .HasMaxLength(50)
                    .HasColumnName("FILTER_OPERATOR");

                entity.Property(e => e.FilterQuery).HasColumnName("FILTER_QUERY");

                entity.Property(e => e.FilterTable)
                    .HasMaxLength(50)
                    .HasColumnName("FILTER_TABLE")
                    .HasComment("Table name for specified filtering (Customer/");
            });

            modelBuilder.Entity<ConfigWfHdr>(entity =>
            {
                entity.HasKey(e => new { e.CodeComp, e.CodeOrg, e.WfModule, e.WfId });

                entity.ToTable("CONFIG_WF_HDR");

                entity.Property(e => e.CodeComp)
                    .HasColumnName("CODE_COMP")
                    .HasComment("Company Code");

                entity.Property(e => e.CodeOrg)
                    .HasColumnName("CODE_ORG")
                    .HasComment("Organization Code");

                entity.Property(e => e.WfModule)
                    .HasColumnName("WF_MODULE")
                    .HasComment("Module ID");

                entity.Property(e => e.WfId)
                    .HasColumnName("WF_ID")
                    .HasComment("Template ID for workflow");

                entity.Property(e => e.AuditCreatedDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("AUDIT_CREATED_DATE")
                    .HasComment("Date template created");

                entity.Property(e => e.AuditCreatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_CREATED_USER")
                    .HasComment("User who create the template");

                entity.Property(e => e.AuditUpdatedDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("AUDIT_UPDATED_DATE")
                    .HasComment("Date template get updated");

                entity.Property(e => e.AuditUpdatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_UPDATED_USER")
                    .HasComment("User who update the template");

                entity.Property(e => e.WfFilterStatus)
                    .HasColumnName("WF_FILTER_STATUS")
                    .HasComment("Workflow filtering status (0-inactive/1-active)");

                entity.Property(e => e.WfLevelMax)
                    .HasColumnName("WF_LEVEL_MAX")
                    .HasComment("Max level of Alert Esculation");

                entity.Property(e => e.WfName)
                    .HasMaxLength(100)
                    .HasColumnName("WF_NAME")
                    .HasComment("Template name of the workflow");

                entity.Property(e => e.WfStatus)
                    .HasColumnName("WF_STATUS")
                    .HasComment("To indicate the template is active inactive (0D1E)");
            });

            modelBuilder.Entity<Configmisctabledatalist>(entity =>
            {
                entity.HasKey(e => new { e.CompCode, e.TemplateCode, e.QuestItemNo });

                entity.ToTable("CONFIGMISCTABLEDATALIST");

                entity.Property(e => e.CompCode)
                    .HasColumnName("COMP_CODE")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.TemplateCode)
                    .HasMaxLength(15)
                    .HasColumnName("TEMPLATE_CODE");

                entity.Property(e => e.QuestItemNo).HasColumnName("QUEST_ITEM_NO");

                entity.Property(e => e.AnsType).HasColumnName("ANS_TYPE");

                entity.Property(e => e.CompulsaryInd).HasColumnName("COMPULSARY_IND");

                entity.Property(e => e.DdlTableno).HasColumnName("DDL_TABLENO");

                entity.Property(e => e.DefaultValue)
                    .HasMaxLength(100)
                    .HasColumnName("DEFAULT_VALUE");

                entity.Property(e => e.DispQuesttextInd).HasColumnName("DISP_QUESTTEXT_IND");

                entity.Property(e => e.DispScoringInd).HasColumnName("DISP_SCORING_IND");

                entity.Property(e => e.DisplayOrder)
                    .HasColumnName("DISPLAY_ORDER")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.EditableInd).HasColumnName("EDITABLE_IND");

                entity.Property(e => e.EditableInd1).HasColumnName("EDITABLE_IND1");

                entity.Property(e => e.EditableInd2).HasColumnName("EDITABLE_IND2");

                entity.Property(e => e.EditableInd3).HasColumnName("EDITABLE_IND3");

                entity.Property(e => e.EditableInd4).HasColumnName("EDITABLE_IND4");

                entity.Property(e => e.FieldId)
                    .HasMaxLength(20)
                    .HasColumnName("FIELD_ID");

                entity.Property(e => e.FieldMaxLen)
                    .HasColumnName("FIELD_MAX_LEN")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ImportFieldseq).HasColumnName("IMPORT_FIELDSEQ");

                entity.Property(e => e.MaxScoringReq).HasColumnName("MAX_SCORING_REQ");

                entity.Property(e => e.MinScoringReq).HasColumnName("MIN_SCORING_REQ");

                entity.Property(e => e.ModeMn)
                    .HasMaxLength(1)
                    .HasColumnName("MODE_MN")
                    .HasDefaultValueSql("(N'A')");

                entity.Property(e => e.MultiplelineHeight)
                    .HasColumnName("MULTIPLELINE_HEIGHT")
                    .HasDefaultValueSql("((40))");

                entity.Property(e => e.OperatorValue).HasColumnName("OPERATOR_VALUE");

                entity.Property(e => e.OptionA)
                    .HasMaxLength(500)
                    .HasColumnName("OPTION_A");

                entity.Property(e => e.OptionB)
                    .HasMaxLength(500)
                    .HasColumnName("OPTION_B");

                entity.Property(e => e.OptionC)
                    .HasMaxLength(500)
                    .HasColumnName("OPTION_C");

                entity.Property(e => e.OptionD)
                    .HasMaxLength(500)
                    .HasColumnName("OPTION_D");

                entity.Property(e => e.OptionE)
                    .HasMaxLength(500)
                    .HasColumnName("OPTION_E");

                entity.Property(e => e.QuestText).HasColumnName("QUEST_TEXT");

                entity.Property(e => e.ScoringA).HasColumnName("SCORING_A");

                entity.Property(e => e.ScoringB).HasColumnName("SCORING_B");

                entity.Property(e => e.ScoringC).HasColumnName("SCORING_C");

                entity.Property(e => e.ScoringD).HasColumnName("SCORING_D");

                entity.Property(e => e.ScoringE).HasColumnName("SCORING_E");

                entity.Property(e => e.ScoringNo).HasColumnName("SCORING_NO");

                entity.Property(e => e.ScoringText).HasColumnName("SCORING_TEXT");

                entity.Property(e => e.ScoringYes).HasColumnName("SCORING_YES");

                entity.Property(e => e.ShortFdDesc)
                    .HasMaxLength(60)
                    .HasColumnName("SHORT_FD_DESC");

                entity.Property(e => e.StampDttm)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("STAMP_DTTM");

                entity.Property(e => e.Status).HasColumnName("STATUS");

                entity.Property(e => e.UserId)
                    .HasMaxLength(30)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.XmlAction1).HasColumnName("XML_ACTION1");

                entity.Property(e => e.XmlAction2).HasColumnName("XML_ACTION2");

                entity.Property(e => e.XmlAction3).HasColumnName("XML_ACTION3");

                entity.Property(e => e.XmlLevel1)
                    .HasMaxLength(100)
                    .HasColumnName("XML_LEVEL1");

                entity.Property(e => e.XmlLevel2)
                    .HasMaxLength(100)
                    .HasColumnName("XML_LEVEL2");

                entity.Property(e => e.XmlLevel3)
                    .HasMaxLength(100)
                    .HasColumnName("XML_LEVEL3");

                entity.Property(e => e.XmlLevel4)
                    .HasMaxLength(100)
                    .HasColumnName("XML_LEVEL4");

                entity.Property(e => e.XmlLevel5)
                    .HasMaxLength(100)
                    .HasColumnName("XML_LEVEL5");

                entity.Property(e => e.XmlLevel6)
                    .HasMaxLength(100)
                    .HasColumnName("XML_LEVEL6");

                entity.Property(e => e.XmlSectionNo).HasColumnName("XML_SECTION_NO");

                entity.Property(e => e.XmlSeqNo).HasColumnName("XML_SEQ_NO");

                entity.Property(e => e.XmlSubSeq).HasColumnName("XML_SUB_SEQ");
            });

            modelBuilder.Entity<Customer>(entity =>
            {
                entity.HasKey(e => new { e.CodeComp, e.CodeOrg, e.NoMaster, e.NoCif });

                entity.ToTable("CUSTOMER");

                entity.HasIndex(e => new { e.NoMaster, e.NoCif }, "NCI_CUSTOMER_NO_MASTER")
                    .IsUnique();

                entity.Property(e => e.CodeComp)
                    .HasColumnName("CODE_COMP")
                    .HasComment("Code Company");

                entity.Property(e => e.CodeOrg)
                    .HasColumnName("CODE_ORG")
                    .HasComment("Code Organization");

                entity.Property(e => e.NoMaster)
                    .HasMaxLength(150)
                    .HasColumnName("NO_MASTER")
                    .HasComment("Master no of client");

                entity.Property(e => e.NoCif)
                    .HasMaxLength(150)
                    .HasColumnName("NO_CIF")
                    .HasComment("CIF Number");

                entity.Property(e => e.AddCity)
                    .HasMaxLength(50)
                    .HasColumnName("ADD_CITY")
                    .HasComment("City");

                entity.Property(e => e.AddCountry)
                    .HasMaxLength(50)
                    .HasColumnName("ADD_COUNTRY")
                    .HasComment("Country");

                entity.Property(e => e.AddL1)
                    .HasMaxLength(100)
                    .HasColumnName("ADD_L1")
                    .HasComment("Address Line 1");

                entity.Property(e => e.AddL2)
                    .HasMaxLength(100)
                    .HasColumnName("ADD_L2")
                    .HasComment("Address Line 2");

                entity.Property(e => e.AddL3)
                    .HasMaxLength(100)
                    .HasColumnName("ADD_L3")
                    .HasComment("Address Line 3");

                entity.Property(e => e.AddL4)
                    .HasMaxLength(100)
                    .HasColumnName("ADD_L4")
                    .HasComment("Address Line 4");

                entity.Property(e => e.AddPcode)
                    .HasMaxLength(50)
                    .HasColumnName("ADD_PCODE")
                    .HasComment("Postcode");

                entity.Property(e => e.AddState)
                    .HasMaxLength(50)
                    .HasColumnName("ADD_STATE")
                    .HasComment("State");

                entity.Property(e => e.AuditCreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("AUDIT_CREATED_DATE")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date creation");

                entity.Property(e => e.AuditCreatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_CREATED_USER")
                    .HasComment("User who create");

                entity.Property(e => e.AuditMergedDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("AUDIT_MERGED_DATE")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date on merging cif");

                entity.Property(e => e.AuditUpdatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("AUDIT_UPDATED_DATE")
                    .HasComment("Date updated");

                entity.Property(e => e.AuditUpdatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_UPDATED_USER")
                    .HasComment("User who updating");

                entity.Property(e => e.BatchDate).HasColumnName("BATCH_DATE");

                entity.Property(e => e.BatchNo)
                    .HasMaxLength(15)
                    .HasColumnName("BATCH_NO");

                entity.Property(e => e.CifDateCreate)
                    .HasColumnName("CIF_DATE_CREATE")
                    .HasComment("CIF Creation Date [HOST]");

                entity.Property(e => e.CifDateUpdate)
                    .HasColumnName("CIF_DATE_UPDATE")
                    .HasComment("CIF Updated Date [HOST]");

                entity.Property(e => e.CifIplace)
                    .HasMaxLength(50)
                    .HasColumnName("CIF_IPLACE")
                    .HasComment("CIF Issue Place");

                entity.Property(e => e.CifJoint)
                    .HasColumnName("CIF_JOINT")
                    .HasComment("Joint Status");

                entity.Property(e => e.CifStatus)
                    .HasColumnName("CIF_STATUS")
                    .HasComment("CIF Status");

                entity.Property(e => e.ConHome)
                    .HasMaxLength(50)
                    .HasColumnName("CON_HOME")
                    .HasComment("Home  Number");

                entity.Property(e => e.ConMobile)
                    .HasMaxLength(50)
                    .HasColumnName("CON_MOBILE")
                    .HasComment("Mobile Number");

                entity.Property(e => e.ConOffice)
                    .HasMaxLength(50)
                    .HasColumnName("CON_OFFICE")
                    .HasComment("Office Number");

                entity.Property(e => e.DataValue01)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE01");

                entity.Property(e => e.DataValue02)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE02");

                entity.Property(e => e.DataValue03)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE03");

                entity.Property(e => e.DataValue04)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE04");

                entity.Property(e => e.DataValue05)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE05");

                entity.Property(e => e.DataValue06)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE06");

                entity.Property(e => e.DataValue07)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE07");

                entity.Property(e => e.DataValue08)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE08");

                entity.Property(e => e.DataValue09)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE09");

                entity.Property(e => e.DataValue10)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE10");

                entity.Property(e => e.DataValue11)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE11");

                entity.Property(e => e.DataValue12)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE12");

                entity.Property(e => e.DataValue13)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE13");

                entity.Property(e => e.DataValue14)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE14");

                entity.Property(e => e.DataValue15)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE15");

                entity.Property(e => e.DataValue16)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE16");

                entity.Property(e => e.DataValue17)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE17");

                entity.Property(e => e.DataValue18)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE18");

                entity.Property(e => e.DataValue19)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE19");

                entity.Property(e => e.DataValue20)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE20");

                entity.Property(e => e.DataValue21)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE21");

                entity.Property(e => e.DataValue22)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE22");

                entity.Property(e => e.DataValue23)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE23");

                entity.Property(e => e.DataValue24)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE24");

                entity.Property(e => e.DataValue25)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE25");

                entity.Property(e => e.DataValue26)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE26");

                entity.Property(e => e.DataValue27)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE27");

                entity.Property(e => e.DataValue28)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE28");

                entity.Property(e => e.DataValue29)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE29");

                entity.Property(e => e.DataValue30)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE30");

                entity.Property(e => e.DataValue31)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE31");

                entity.Property(e => e.DataValue32)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE32");

                entity.Property(e => e.DataValue33)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE33");

                entity.Property(e => e.DataValue34)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE34");

                entity.Property(e => e.DataValue35)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE35");

                entity.Property(e => e.DataValue36)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE36");

                entity.Property(e => e.DataValue37)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE37");

                entity.Property(e => e.DataValue38)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE38");

                entity.Property(e => e.DataValue39)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE39");

                entity.Property(e => e.DataValue40)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE40");

                entity.Property(e => e.DataValue41)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE41");

                entity.Property(e => e.DataValue42)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE42");

                entity.Property(e => e.DataValue43)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE43");

                entity.Property(e => e.DataValue44)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE44");

                entity.Property(e => e.DataValue45)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE45");

                entity.Property(e => e.DataValue46)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE46");

                entity.Property(e => e.DataValue47)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE47");

                entity.Property(e => e.DataValue48)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE48");

                entity.Property(e => e.DataValue49)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE49");

                entity.Property(e => e.DataValue50)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE50");

                entity.Property(e => e.DataValue51)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE51");

                entity.Property(e => e.DataValue52)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE52");

                entity.Property(e => e.DataValue53)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE53");

                entity.Property(e => e.DataValue54)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE54");

                entity.Property(e => e.DataValue55)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE55");

                entity.Property(e => e.Email)
                    .HasMaxLength(100)
                    .HasColumnName("EMAIL")
                    .HasComment("Email Address");

                entity.Property(e => e.EmpAdd1)
                    .HasMaxLength(100)
                    .HasColumnName("EMP_ADD1")
                    .HasComment("Address Line 1");

                entity.Property(e => e.EmpAdd2)
                    .HasMaxLength(100)
                    .HasColumnName("EMP_ADD2")
                    .HasComment("Address Line 2");

                entity.Property(e => e.EmpAdd3)
                    .HasMaxLength(100)
                    .HasColumnName("EMP_ADD3")
                    .HasComment("Address Line 3");

                entity.Property(e => e.EmpAdd4)
                    .HasMaxLength(100)
                    .HasColumnName("EMP_ADD4")
                    .HasComment("Address Line 4");

                entity.Property(e => e.EmpCity)
                    .HasMaxLength(15)
                    .HasColumnName("EMP_CITY")
                    .HasComment("City");

                entity.Property(e => e.EmpCountry)
                    .HasMaxLength(25)
                    .HasColumnName("EMP_COUNTRY")
                    .HasComment("Country");

                entity.Property(e => e.EmpName)
                    .HasMaxLength(100)
                    .HasColumnName("EMP_NAME")
                    .HasComment("Employer Name");

                entity.Property(e => e.EmpPcode)
                    .HasMaxLength(10)
                    .HasColumnName("EMP_PCODE")
                    .HasComment("Postcode");

                entity.Property(e => e.EmpState)
                    .HasMaxLength(15)
                    .HasColumnName("EMP_STATE")
                    .HasComment("State");

                entity.Property(e => e.EmpYear)
                    .HasColumnName("EMP_YEAR")
                    .HasComment("Year Employed");

                entity.Property(e => e.FatcaNo)
                    .HasMaxLength(15)
                    .HasColumnName("FATCA_NO")
                    .HasComment("Tin Number");

                entity.Property(e => e.FlagBlist)
                    .HasColumnName("FLAG_BLIST")
                    .HasComment("Blacklist Flag");

                entity.Property(e => e.FlagBumi)
                    .HasColumnName("FLAG_BUMI")
                    .HasComment("Bumi Flag");

                entity.Property(e => e.FlagCrs)
                    .HasColumnName("FLAG_CRS")
                    .HasComment("CRS Flag");

                entity.Property(e => e.FlagEkyc)
                    .HasColumnName("FLAG_EKYC")
                    .HasComment("E-KYC Flag");

                entity.Property(e => e.FlagFatca)
                    .HasColumnName("FLAG_FATCA")
                    .HasComment("Fatca Flag");

                entity.Property(e => e.FlagFi)
                    .HasColumnName("FLAG_FI")
                    .HasComment("FI/Non-FI Flag");

                entity.Property(e => e.FlagFpos)
                    .HasColumnName("FLAG_FPOS")
                    .HasComment("False Positive Flag");

                entity.Property(e => e.FlagLegal)
                    .HasColumnName("FLAG_LEGAL")
                    .HasComment("Legal Flag");

                entity.Property(e => e.FlagOther)
                    .HasColumnName("FLAG_OTHER")
                    .HasComment("Other Flag");

                entity.Property(e => e.FlagPdpa)
                    .HasColumnName("FLAG_PDPA")
                    .HasComment("PDPA Flag");

                entity.Property(e => e.FlagPep)
                    .HasColumnName("FLAG_PEP")
                    .HasComment("PEP Flag");

                entity.Property(e => e.FlagPrime)
                    .HasColumnName("FLAG_PRIME")
                    .HasDefaultValueSql("((1))")
                    .HasComment("Flag to indicate this NO_MASTER is primary");

                entity.Property(e => e.FlagSoc)
                    .HasColumnName("FLAG_SOC")
                    .HasComment("SOC Flag");

                entity.Property(e => e.FlagStaff)
                    .HasColumnName("FLAG_STAFF")
                    .HasComment("Staff Flag");

                entity.Property(e => e.FlagStr)
                    .HasColumnName("FLAG_STR")
                    .HasComment("Investigation Flag (STR)");

                entity.Property(e => e.FlagWlist)
                    .HasColumnName("FLAG_WLIST")
                    .HasComment("Watchlist Hit Flag");

                entity.Property(e => e.FlatHnw)
                    .HasColumnName("FLAT_HNW")
                    .HasComment("HNW Flag");

                entity.Property(e => e.FposDate)
                    .HasColumnName("FPOS_DATE")
                    .HasComment("False Positive Date");

                entity.Property(e => e.Id1Edate)
                    .HasColumnName("ID1_EDATE")
                    .HasComment("ID Expiry Date");

                entity.Property(e => e.Id1Idate)
                    .HasColumnName("ID1_IDATE")
                    .HasComment("ID Issue Date");

                entity.Property(e => e.Id1Iplace)
                    .HasMaxLength(50)
                    .HasColumnName("ID1_IPLACE")
                    .HasComment("ID Issue Place");

                entity.Property(e => e.Id1No)
                    .HasMaxLength(50)
                    .HasColumnName("ID1_NO")
                    .HasComment("ID Number (IC/ Biz Reg No.)");

                entity.Property(e => e.Id1Type)
                    .HasColumnName("ID1_TYPE")
                    .HasComment("ID Type");

                entity.Property(e => e.Id1Vdate)
                    .HasColumnName("ID1_VDATE")
                    .HasComment("ID Verify Date");

                entity.Property(e => e.Id2Edate)
                    .HasColumnName("ID2_EDATE")
                    .HasComment("Secondary ID Expiry Date");

                entity.Property(e => e.Id2Idate)
                    .HasColumnName("ID2_IDATE")
                    .HasComment("Secondary ID Issue Date");

                entity.Property(e => e.Id2Iplace)
                    .HasMaxLength(50)
                    .HasColumnName("ID2_IPLACE")
                    .HasComment("Secondary ID Issue Place");

                entity.Property(e => e.Id2No)
                    .HasMaxLength(50)
                    .HasColumnName("ID2_NO")
                    .HasComment("Secondary ID Number");

                entity.Property(e => e.Id2Type)
                    .HasColumnName("ID2_TYPE")
                    .HasComment("Secondary ID Type");

                entity.Property(e => e.Id2Vdate)
                    .HasColumnName("ID2_VDATE")
                    .HasComment("Secondary ID Verify Date");

                entity.Property(e => e.IndoDob)
                    .HasColumnName("INDO_DOB")
                    .HasComment("Date of Birth");

                entity.Property(e => e.InfoAge)
                    .HasColumnName("INFO_AGE")
                    .HasComment("Age");

                entity.Property(e => e.InfoAgent)
                    .HasMaxLength(50)
                    .HasColumnName("INFO_AGENT")
                    .HasComment("Agent Code");

                entity.Property(e => e.InfoBline)
                    .HasMaxLength(50)
                    .HasColumnName("INFO_BLINE")
                    .HasComment("Business Line");

                entity.Property(e => e.InfoBsect)
                    .HasMaxLength(50)
                    .HasColumnName("INFO_BSECT")
                    .HasComment("Business/industry Sector");

                entity.Property(e => e.InfoDdate)
                    .HasMaxLength(50)
                    .HasColumnName("INFO_DDATE")
                    .HasComment("Death Date");

                entity.Property(e => e.InfoEdu)
                    .HasMaxLength(50)
                    .HasColumnName("INFO_EDU")
                    .HasComment("Education Level");

                entity.Property(e => e.InfoGen)
                    .HasColumnName("INFO_GEN")
                    .HasComment("Gender");

                entity.Property(e => e.InfoIcome)
                    .HasMaxLength(50)
                    .HasColumnName("INFO_ICOME")
                    .HasComment("Annual Income Range");

                entity.Property(e => e.InfoLang)
                    .HasMaxLength(50)
                    .HasColumnName("INFO_LANG")
                    .HasComment("Primary Language");

                entity.Property(e => e.InfoMarry)
                    .HasColumnName("INFO_MARRY")
                    .HasComment("Marital Status");

                entity.Property(e => e.InfoNameFirst)
                    .HasMaxLength(150)
                    .HasColumnName("INFO_NAME_FIRST")
                    .HasComment("First Name");

                entity.Property(e => e.InfoNameFull)
                    .HasMaxLength(150)
                    .HasColumnName("INFO_NAME_FULL")
                    .HasComment("Name");

                entity.Property(e => e.InfoNameLast)
                    .HasMaxLength(150)
                    .HasColumnName("INFO_NAME_LAST")
                    .HasComment("Last Name");

                entity.Property(e => e.InfoNameMid)
                    .HasMaxLength(150)
                    .HasColumnName("INFO_NAME_MID")
                    .HasComment("Middle Name");

                entity.Property(e => e.InfoNameNative)
                    .HasMaxLength(150)
                    .HasColumnName("INFO_NAME_NATIVE")
                    .HasComment("Native Name");

                entity.Property(e => e.InfoNat)
                    .HasMaxLength(50)
                    .HasColumnName("INFO_NAT")
                    .HasComment("Nationality");

                entity.Property(e => e.InfoOcc)
                    .HasMaxLength(50)
                    .HasColumnName("INFO_OCC")
                    .HasComment("Occupation");

                entity.Property(e => e.InfoOsect)
                    .HasMaxLength(50)
                    .HasColumnName("INFO_OSECT")
                    .HasComment("Occupation/Industry Sector");

                entity.Property(e => e.InfoOyear)
                    .HasMaxLength(50)
                    .HasColumnName("INFO_OYEAR")
                    .HasComment("Occupation Year");

                entity.Property(e => e.InfoRace)
                    .HasMaxLength(50)
                    .HasColumnName("INFO_RACE")
                    .HasComment("Race");

                entity.Property(e => e.InfoReli)
                    .HasMaxLength(50)
                    .HasColumnName("INFO_RELI")
                    .HasComment("Religion");

                entity.Property(e => e.InfoRes)
                    .HasMaxLength(50)
                    .HasColumnName("INFO_RES")
                    .HasComment("Residence");

                entity.Property(e => e.InfoSof)
                    .HasMaxLength(50)
                    .HasColumnName("INFO_SOF")
                    .HasComment("Source of Fund");

                entity.Property(e => e.InfoType)
                    .HasMaxLength(50)
                    .HasColumnName("INFO_TYPE")
                    .HasComment("Entity Type (Individual/Corporate)");

                entity.Property(e => e.RiskHost)
                    .HasColumnName("RISK_HOST")
                    .HasComment("Host Level");

                entity.Property(e => e.RiskManual)
                    .HasColumnName("RISK_MANUAL")
                    .HasComment("Manual Level");

                entity.Property(e => e.RiskNew)
                    .HasColumnName("RISK_NEW")
                    .HasComment("System Current Level");

                entity.Property(e => e.RiskPrev)
                    .HasColumnName("RISK_PREV")
                    .HasComment("System Previous Level");

                entity.Property(e => e.RiskScore)
                    .HasColumnName("RISK_SCORE")
                    .HasComment("Risk score computed by system");
            });

            modelBuilder.Entity<CustomerDeltum>(entity =>
            {
                entity.HasKey(e => new { e.CodeComp, e.CodeOrg, e.NoMaster, e.NoCif });

                entity.ToTable("CUSTOMER_DELTA");

                entity.Property(e => e.CodeComp)
                    .HasColumnName("CODE_COMP")
                    .HasComment("Code Company");

                entity.Property(e => e.CodeOrg)
                    .HasColumnName("CODE_ORG")
                    .HasComment("Code Organization");

                entity.Property(e => e.NoMaster)
                    .HasMaxLength(150)
                    .HasColumnName("NO_MASTER")
                    .HasComment("Master no of client");

                entity.Property(e => e.NoCif)
                    .HasMaxLength(150)
                    .HasColumnName("NO_CIF")
                    .HasComment("CIF Number");

                entity.Property(e => e.AddCity)
                    .HasMaxLength(50)
                    .HasColumnName("ADD_CITY")
                    .HasComment("City");

                entity.Property(e => e.AddCountry)
                    .HasMaxLength(50)
                    .HasColumnName("ADD_COUNTRY")
                    .HasComment("Country");

                entity.Property(e => e.AddL1)
                    .HasMaxLength(100)
                    .HasColumnName("ADD_L1")
                    .HasComment("Address Line 1");

                entity.Property(e => e.AddL2)
                    .HasMaxLength(100)
                    .HasColumnName("ADD_L2")
                    .HasComment("Address Line 2");

                entity.Property(e => e.AddL3)
                    .HasMaxLength(100)
                    .HasColumnName("ADD_L3")
                    .HasComment("Address Line 3");

                entity.Property(e => e.AddL4)
                    .HasMaxLength(100)
                    .HasColumnName("ADD_L4")
                    .HasComment("Address Line 4");

                entity.Property(e => e.AddPcode)
                    .HasMaxLength(50)
                    .HasColumnName("ADD_PCODE")
                    .HasComment("Postcode");

                entity.Property(e => e.AddState)
                    .HasMaxLength(50)
                    .HasColumnName("ADD_STATE")
                    .HasComment("State");

                entity.Property(e => e.AuditCreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("AUDIT_CREATED_DATE")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date creation");

                entity.Property(e => e.AuditCreatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_CREATED_USER")
                    .HasComment("User who create");

                entity.Property(e => e.AuditMergedDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("AUDIT_MERGED_DATE")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date on merging cif");

                entity.Property(e => e.AuditUpdatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("AUDIT_UPDATED_DATE")
                    .HasComment("Date updated");

                entity.Property(e => e.AuditUpdatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_UPDATED_USER")
                    .HasComment("User who updating");

                entity.Property(e => e.BatchDate).HasColumnName("BATCH_DATE");

                entity.Property(e => e.BatchNo)
                    .HasMaxLength(15)
                    .HasColumnName("BATCH_NO");

                entity.Property(e => e.CifDateCreate)
                    .HasColumnName("CIF_DATE_CREATE")
                    .HasComment("CIF Creation Date [HOST]");

                entity.Property(e => e.CifDateUpdate)
                    .HasColumnName("CIF_DATE_UPDATE")
                    .HasComment("CIF Updated Date [HOST]");

                entity.Property(e => e.CifIplace)
                    .HasMaxLength(50)
                    .HasColumnName("CIF_IPLACE")
                    .HasComment("CIF Issue Place");

                entity.Property(e => e.CifJoint)
                    .HasColumnName("CIF_JOINT")
                    .HasComment("Joint Status");

                entity.Property(e => e.CifStatus)
                    .HasColumnName("CIF_STATUS")
                    .HasComment("CIF Status");

                entity.Property(e => e.ConHome)
                    .HasColumnName("CON_HOME")
                    .HasComment("Home  Number");

                entity.Property(e => e.ConMobile)
                    .HasColumnName("CON_MOBILE")
                    .HasComment("Mobile Number");

                entity.Property(e => e.ConOffice)
                    .HasColumnName("CON_OFFICE")
                    .HasComment("Office Number");

                entity.Property(e => e.DataValue01)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE01");

                entity.Property(e => e.DataValue02)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE02");

                entity.Property(e => e.DataValue03)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE03");

                entity.Property(e => e.DataValue04)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE04");

                entity.Property(e => e.DataValue05)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE05");

                entity.Property(e => e.DataValue06)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE06");

                entity.Property(e => e.DataValue07)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE07");

                entity.Property(e => e.DataValue08)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE08");

                entity.Property(e => e.DataValue09)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE09");

                entity.Property(e => e.DataValue10)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE10");

                entity.Property(e => e.DataValue11)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE11");

                entity.Property(e => e.DataValue12)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE12");

                entity.Property(e => e.DataValue13)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE13");

                entity.Property(e => e.DataValue14)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE14");

                entity.Property(e => e.DataValue15)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE15");

                entity.Property(e => e.DataValue16)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE16");

                entity.Property(e => e.DataValue17)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE17");

                entity.Property(e => e.DataValue18)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE18");

                entity.Property(e => e.DataValue19)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE19");

                entity.Property(e => e.DataValue20)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE20");

                entity.Property(e => e.DataValue21)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE21");

                entity.Property(e => e.DataValue22)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE22");

                entity.Property(e => e.DataValue23)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE23");

                entity.Property(e => e.DataValue24)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE24");

                entity.Property(e => e.DataValue25)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE25");

                entity.Property(e => e.DataValue26)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE26");

                entity.Property(e => e.DataValue27)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE27");

                entity.Property(e => e.DataValue28)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE28");

                entity.Property(e => e.DataValue29)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE29");

                entity.Property(e => e.DataValue30)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE30");

                entity.Property(e => e.DataValue31)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE31");

                entity.Property(e => e.DataValue32)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE32");

                entity.Property(e => e.DataValue33)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE33");

                entity.Property(e => e.DataValue34)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE34");

                entity.Property(e => e.DataValue35)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE35");

                entity.Property(e => e.DataValue36)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE36");

                entity.Property(e => e.DataValue37)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE37");

                entity.Property(e => e.DataValue38)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE38");

                entity.Property(e => e.DataValue39)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE39");

                entity.Property(e => e.DataValue40)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE40");

                entity.Property(e => e.DataValue41)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE41");

                entity.Property(e => e.DataValue42)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE42");

                entity.Property(e => e.DataValue43)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE43");

                entity.Property(e => e.DataValue44)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE44");

                entity.Property(e => e.DataValue45)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE45");

                entity.Property(e => e.DataValue46)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE46");

                entity.Property(e => e.DataValue47)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE47");

                entity.Property(e => e.DataValue48)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE48");

                entity.Property(e => e.DataValue49)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE49");

                entity.Property(e => e.DataValue50)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE50");

                entity.Property(e => e.DataValue51)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE51");

                entity.Property(e => e.DataValue52)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE52");

                entity.Property(e => e.DataValue53)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE53");

                entity.Property(e => e.DataValue54)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE54");

                entity.Property(e => e.DataValue55)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE55");

                entity.Property(e => e.Email)
                    .HasMaxLength(100)
                    .HasColumnName("EMAIL")
                    .HasComment("Email Address");

                entity.Property(e => e.EmpAdd1)
                    .HasMaxLength(100)
                    .HasColumnName("EMP_ADD1")
                    .HasComment("Address Line 1");

                entity.Property(e => e.EmpAdd2)
                    .HasMaxLength(100)
                    .HasColumnName("EMP_ADD2")
                    .HasComment("Address Line 2");

                entity.Property(e => e.EmpAdd3)
                    .HasMaxLength(100)
                    .HasColumnName("EMP_ADD3")
                    .HasComment("Address Line 3");

                entity.Property(e => e.EmpAdd4)
                    .HasMaxLength(100)
                    .HasColumnName("EMP_ADD4")
                    .HasComment("Address Line 4");

                entity.Property(e => e.EmpCity)
                    .HasMaxLength(15)
                    .HasColumnName("EMP_CITY")
                    .HasComment("City");

                entity.Property(e => e.EmpCountry)
                    .HasMaxLength(25)
                    .HasColumnName("EMP_COUNTRY")
                    .HasComment("Country");

                entity.Property(e => e.EmpName)
                    .HasMaxLength(100)
                    .HasColumnName("EMP_NAME")
                    .HasComment("Employer Name");

                entity.Property(e => e.EmpPcode)
                    .HasMaxLength(10)
                    .HasColumnName("EMP_PCODE")
                    .HasComment("Postcode");

                entity.Property(e => e.EmpState)
                    .HasMaxLength(15)
                    .HasColumnName("EMP_STATE")
                    .HasComment("State");

                entity.Property(e => e.EmpYear)
                    .HasColumnName("EMP_YEAR")
                    .HasComment("Year Employed");

                entity.Property(e => e.FatcaNo)
                    .HasMaxLength(15)
                    .HasColumnName("FATCA_NO")
                    .HasComment("Tin Number");

                entity.Property(e => e.FlagBlist)
                    .HasColumnName("FLAG_BLIST")
                    .HasComment("Blacklist Flag");

                entity.Property(e => e.FlagBumi)
                    .HasColumnName("FLAG_BUMI")
                    .HasComment("Bumi Flag");

                entity.Property(e => e.FlagCrs)
                    .HasColumnName("FLAG_CRS")
                    .HasComment("CRS Flag");

                entity.Property(e => e.FlagEkyc)
                    .HasColumnName("FLAG_EKYC")
                    .HasComment("E-KYC Flag");

                entity.Property(e => e.FlagFatca)
                    .HasColumnName("FLAG_FATCA")
                    .HasComment("Fatca Flag");

                entity.Property(e => e.FlagFi)
                    .HasColumnName("FLAG_FI")
                    .HasComment("FI/Non-FI Flag");

                entity.Property(e => e.FlagFpos)
                    .HasColumnName("FLAG_FPOS")
                    .HasComment("False Positive Flag");

                entity.Property(e => e.FlagLegal)
                    .HasColumnName("FLAG_LEGAL")
                    .HasComment("Legal Flag");

                entity.Property(e => e.FlagOther)
                    .HasColumnName("FLAG_OTHER")
                    .HasComment("Other Flag");

                entity.Property(e => e.FlagPdpa)
                    .HasColumnName("FLAG_PDPA")
                    .HasComment("PDPA Flag");

                entity.Property(e => e.FlagPep)
                    .HasColumnName("FLAG_PEP")
                    .HasComment("PEP Flag");

                entity.Property(e => e.FlagPrime)
                    .HasColumnName("FLAG_PRIME")
                    .HasDefaultValueSql("((1))")
                    .HasComment("Flag to indicate this NO_MASTER is primary");

                entity.Property(e => e.FlagSoc)
                    .HasColumnName("FLAG_SOC")
                    .HasComment("SOC Flag");

                entity.Property(e => e.FlagStaff)
                    .HasColumnName("FLAG_STAFF")
                    .HasComment("Staff Flag");

                entity.Property(e => e.FlagStr)
                    .HasColumnName("FLAG_STR")
                    .HasComment("Investigation Flag (STR)");

                entity.Property(e => e.FlagWlist)
                    .HasColumnName("FLAG_WLIST")
                    .HasComment("Watchlist Hit Flag");

                entity.Property(e => e.FlatHnw)
                    .HasColumnName("FLAT_HNW")
                    .HasComment("HNW Flag");

                entity.Property(e => e.FposDate)
                    .HasColumnName("FPOS_DATE")
                    .HasComment("False Positive Date");

                entity.Property(e => e.Id1Edate)
                    .HasColumnName("ID1_EDATE")
                    .HasComment("ID Expiry Date");

                entity.Property(e => e.Id1Idate)
                    .HasColumnName("ID1_IDATE")
                    .HasComment("ID Issue Date");

                entity.Property(e => e.Id1Iplace)
                    .HasMaxLength(50)
                    .HasColumnName("ID1_IPLACE")
                    .HasComment("ID Issue Place");

                entity.Property(e => e.Id1No)
                    .HasMaxLength(50)
                    .HasColumnName("ID1_NO")
                    .HasComment("ID Number (IC/ Biz Reg No.)");

                entity.Property(e => e.Id1Type)
                    .HasColumnName("ID1_TYPE")
                    .HasComment("ID Type");

                entity.Property(e => e.Id1Vdate)
                    .HasColumnName("ID1_VDATE")
                    .HasComment("ID Verify Date");

                entity.Property(e => e.Id2Edate)
                    .HasColumnName("ID2_EDATE")
                    .HasComment("Secondary ID Expiry Date");

                entity.Property(e => e.Id2Idate)
                    .HasColumnName("ID2_IDATE")
                    .HasComment("Secondary ID Issue Date");

                entity.Property(e => e.Id2Iplace)
                    .HasMaxLength(50)
                    .HasColumnName("ID2_IPLACE")
                    .HasComment("Secondary ID Issue Place");

                entity.Property(e => e.Id2No)
                    .HasMaxLength(50)
                    .HasColumnName("ID2_NO")
                    .HasComment("Secondary ID Number");

                entity.Property(e => e.Id2Type)
                    .HasColumnName("ID2_TYPE")
                    .HasComment("Secondary ID Type");

                entity.Property(e => e.Id2Vdate)
                    .HasColumnName("ID2_VDATE")
                    .HasComment("Secondary ID Verify Date");

                entity.Property(e => e.IndoDob)
                    .HasColumnName("INDO_DOB")
                    .HasComment("Date of Birth");

                entity.Property(e => e.InfoAge)
                    .HasColumnName("INFO_AGE")
                    .HasComment("Age");

                entity.Property(e => e.InfoAgent)
                    .HasMaxLength(50)
                    .HasColumnName("INFO_AGENT")
                    .HasComment("Agent Code");

                entity.Property(e => e.InfoBline)
                    .HasMaxLength(50)
                    .HasColumnName("INFO_BLINE")
                    .HasComment("Business Line");

                entity.Property(e => e.InfoBsect)
                    .HasMaxLength(50)
                    .HasColumnName("INFO_BSECT")
                    .HasComment("Business/industry Sector");

                entity.Property(e => e.InfoDdate)
                    .HasMaxLength(50)
                    .HasColumnName("INFO_DDATE")
                    .HasComment("Death Date");

                entity.Property(e => e.InfoEdu)
                    .HasMaxLength(50)
                    .HasColumnName("INFO_EDU")
                    .HasComment("Education Level");

                entity.Property(e => e.InfoGen)
                    .HasColumnName("INFO_GEN")
                    .HasComment("Gender");

                entity.Property(e => e.InfoIcome)
                    .HasMaxLength(50)
                    .HasColumnName("INFO_ICOME")
                    .HasComment("Annual Income Range");

                entity.Property(e => e.InfoLang)
                    .HasMaxLength(50)
                    .HasColumnName("INFO_LANG")
                    .HasComment("Primary Language");

                entity.Property(e => e.InfoMarry)
                    .HasColumnName("INFO_MARRY")
                    .HasComment("Marital Status");

                entity.Property(e => e.InfoNameFirst)
                    .HasMaxLength(150)
                    .HasColumnName("INFO_NAME_FIRST")
                    .HasComment("First Name");

                entity.Property(e => e.InfoNameFull)
                    .HasMaxLength(150)
                    .HasColumnName("INFO_NAME_FULL")
                    .HasComment("Name");

                entity.Property(e => e.InfoNameLast)
                    .HasMaxLength(150)
                    .HasColumnName("INFO_NAME_LAST")
                    .HasComment("Last Name");

                entity.Property(e => e.InfoNameMid)
                    .HasMaxLength(150)
                    .HasColumnName("INFO_NAME_MID")
                    .HasComment("Middle Name");

                entity.Property(e => e.InfoNameNative)
                    .HasMaxLength(150)
                    .HasColumnName("INFO_NAME_NATIVE")
                    .HasComment("Native Name");

                entity.Property(e => e.InfoNat)
                    .HasMaxLength(50)
                    .HasColumnName("INFO_NAT")
                    .HasComment("Nationality");

                entity.Property(e => e.InfoOcc)
                    .HasMaxLength(50)
                    .HasColumnName("INFO_OCC")
                    .HasComment("Occupation");

                entity.Property(e => e.InfoOsect)
                    .HasMaxLength(50)
                    .HasColumnName("INFO_OSECT")
                    .HasComment("Occupation/Industry Sector");

                entity.Property(e => e.InfoOyear)
                    .HasMaxLength(50)
                    .HasColumnName("INFO_OYEAR")
                    .HasComment("Occupation Year");

                entity.Property(e => e.InfoRace)
                    .HasMaxLength(50)
                    .HasColumnName("INFO_RACE")
                    .HasComment("Race");

                entity.Property(e => e.InfoReli)
                    .HasMaxLength(50)
                    .HasColumnName("INFO_RELI")
                    .HasComment("Religion");

                entity.Property(e => e.InfoRes)
                    .HasMaxLength(50)
                    .HasColumnName("INFO_RES")
                    .HasComment("Residence");

                entity.Property(e => e.InfoSof)
                    .HasMaxLength(50)
                    .HasColumnName("INFO_SOF")
                    .HasComment("Source of Fund");

                entity.Property(e => e.InfoType)
                    .HasColumnName("INFO_TYPE")
                    .HasComment("Entity Type (Individual/Corporate)");

                entity.Property(e => e.RiskHost)
                    .HasColumnName("RISK_HOST")
                    .HasComment("Host Level");

                entity.Property(e => e.RiskManual)
                    .HasColumnName("RISK_MANUAL")
                    .HasComment("Manual Level");

                entity.Property(e => e.RiskNew)
                    .HasColumnName("RISK_NEW")
                    .HasComment("System Current Level");

                entity.Property(e => e.RiskPrev)
                    .HasColumnName("RISK_PREV")
                    .HasComment("System Previous Level");

                entity.Property(e => e.RiskScore)
                    .HasColumnName("RISK_SCORE")
                    .HasComment("Risk score computed by system");
            });

            modelBuilder.Entity<CustomerHist>(entity =>
            {
                entity.HasKey(e => new { e.CodeComp, e.CodeOrg, e.NoMaster, e.NoCif, e.NoSeq })
                    .HasName("PK_CUSTOMER_0");

                entity.ToTable("CUSTOMER_HIST");

                entity.HasIndex(e => new { e.NoMaster, e.NoCif }, "NCI_CUSTOMER_NO_MASTER_0")
                    .IsUnique();

                entity.Property(e => e.CodeComp)
                    .HasColumnName("CODE_COMP")
                    .HasComment("Code Company");

                entity.Property(e => e.CodeOrg)
                    .HasColumnName("CODE_ORG")
                    .HasComment("Code Organization");

                entity.Property(e => e.NoMaster)
                    .HasMaxLength(150)
                    .HasColumnName("NO_MASTER")
                    .HasComment("Master no of client");

                entity.Property(e => e.NoCif)
                    .HasMaxLength(150)
                    .HasColumnName("NO_CIF")
                    .HasComment("CIF Number");

                entity.Property(e => e.NoSeq)
                    .HasColumnName("NO_SEQ")
                    .HasDefaultValueSql("((1))")
                    .HasComment("Sequence of historical activity applied to this customer");

                entity.Property(e => e.AddCity)
                    .HasMaxLength(50)
                    .HasColumnName("ADD_CITY")
                    .HasComment("City");

                entity.Property(e => e.AddCountry)
                    .HasMaxLength(50)
                    .HasColumnName("ADD_COUNTRY")
                    .HasComment("Country");

                entity.Property(e => e.AddL1)
                    .HasMaxLength(100)
                    .HasColumnName("ADD_L1")
                    .HasComment("Address Line 1");

                entity.Property(e => e.AddL2)
                    .HasMaxLength(100)
                    .HasColumnName("ADD_L2")
                    .HasComment("Address Line 2");

                entity.Property(e => e.AddL3)
                    .HasMaxLength(100)
                    .HasColumnName("ADD_L3")
                    .HasComment("Address Line 3");

                entity.Property(e => e.AddL4)
                    .HasMaxLength(100)
                    .HasColumnName("ADD_L4")
                    .HasComment("Address Line 4");

                entity.Property(e => e.AddPcode)
                    .HasMaxLength(50)
                    .HasColumnName("ADD_PCODE")
                    .HasComment("Postcode");

                entity.Property(e => e.AddState)
                    .HasMaxLength(50)
                    .HasColumnName("ADD_STATE")
                    .HasComment("State");

                entity.Property(e => e.AuditCreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("AUDIT_CREATED_DATE")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date creation");

                entity.Property(e => e.AuditCreatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_CREATED_USER")
                    .HasComment("User who create");

                entity.Property(e => e.AuditMergedDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("AUDIT_MERGED_DATE")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date on merging cif");

                entity.Property(e => e.AuditNoCifOld)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_NO_CIF_OLD")
                    .HasComment("Previous CIF");

                entity.Property(e => e.AuditRemarks)
                    .HasMaxLength(250)
                    .HasColumnName("AUDIT_REMARKS")
                    .HasComment("Remark of changes performed");

                entity.Property(e => e.AuditUpdatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("AUDIT_UPDATED_DATE")
                    .HasComment("Date updated");

                entity.Property(e => e.AuditUpdatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_UPDATED_USER")
                    .HasComment("User who updating");

                entity.Property(e => e.BatchDate).HasColumnName("BATCH_DATE");

                entity.Property(e => e.BatchNo)
                    .HasMaxLength(15)
                    .HasColumnName("BATCH_NO");

                entity.Property(e => e.CifDateCreate)
                    .HasColumnName("CIF_DATE_CREATE")
                    .HasComment("CIF Creation Date [HOST]");

                entity.Property(e => e.CifDateUpdate)
                    .HasColumnName("CIF_DATE_UPDATE")
                    .HasComment("CIF Updated Date [HOST]");

                entity.Property(e => e.CifIplace)
                    .HasMaxLength(50)
                    .HasColumnName("CIF_IPLACE")
                    .HasComment("CIF Issue Place");

                entity.Property(e => e.CifJoint)
                    .HasColumnName("CIF_JOINT")
                    .HasComment("Joint Status");

                entity.Property(e => e.CifStatus)
                    .HasColumnName("CIF_STATUS")
                    .HasComment("CIF Status");

                entity.Property(e => e.ConHome)
                    .HasColumnName("CON_HOME")
                    .HasComment("Home  Number");

                entity.Property(e => e.ConMobile)
                    .HasColumnName("CON_MOBILE")
                    .HasComment("Mobile Number");

                entity.Property(e => e.ConOffice)
                    .HasColumnName("CON_OFFICE")
                    .HasComment("Office Number");

                entity.Property(e => e.DataValue01)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE01");

                entity.Property(e => e.DataValue02)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE02");

                entity.Property(e => e.DataValue03)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE03");

                entity.Property(e => e.DataValue04)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE04");

                entity.Property(e => e.DataValue05)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE05");

                entity.Property(e => e.DataValue06)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE06");

                entity.Property(e => e.DataValue07)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE07");

                entity.Property(e => e.DataValue08)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE08");

                entity.Property(e => e.DataValue09)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE09");

                entity.Property(e => e.DataValue10)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE10");

                entity.Property(e => e.DataValue11)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE11");

                entity.Property(e => e.DataValue12)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE12");

                entity.Property(e => e.DataValue13)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE13");

                entity.Property(e => e.DataValue14)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE14");

                entity.Property(e => e.DataValue15)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE15");

                entity.Property(e => e.DataValue16)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE16");

                entity.Property(e => e.DataValue17)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE17");

                entity.Property(e => e.DataValue18)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE18");

                entity.Property(e => e.DataValue19)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE19");

                entity.Property(e => e.DataValue20)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE20");

                entity.Property(e => e.DataValue21)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE21");

                entity.Property(e => e.DataValue22)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE22");

                entity.Property(e => e.DataValue23)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE23");

                entity.Property(e => e.DataValue24)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE24");

                entity.Property(e => e.DataValue25)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE25");

                entity.Property(e => e.DataValue26)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE26");

                entity.Property(e => e.DataValue27)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE27");

                entity.Property(e => e.DataValue28)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE28");

                entity.Property(e => e.DataValue29)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE29");

                entity.Property(e => e.DataValue30)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE30");

                entity.Property(e => e.DataValue31)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE31");

                entity.Property(e => e.DataValue32)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE32");

                entity.Property(e => e.DataValue33)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE33");

                entity.Property(e => e.DataValue34)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE34");

                entity.Property(e => e.DataValue35)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE35");

                entity.Property(e => e.DataValue36)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE36");

                entity.Property(e => e.DataValue37)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE37");

                entity.Property(e => e.DataValue38)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE38");

                entity.Property(e => e.DataValue39)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE39");

                entity.Property(e => e.DataValue40)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE40");

                entity.Property(e => e.DataValue41)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE41");

                entity.Property(e => e.DataValue42)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE42");

                entity.Property(e => e.DataValue43)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE43");

                entity.Property(e => e.DataValue44)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE44");

                entity.Property(e => e.DataValue45)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE45");

                entity.Property(e => e.DataValue46)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE46");

                entity.Property(e => e.DataValue47)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE47");

                entity.Property(e => e.DataValue48)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE48");

                entity.Property(e => e.DataValue49)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE49");

                entity.Property(e => e.DataValue50)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE50");

                entity.Property(e => e.DataValue51)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE51");

                entity.Property(e => e.DataValue52)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE52");

                entity.Property(e => e.DataValue53)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE53");

                entity.Property(e => e.DataValue54)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE54");

                entity.Property(e => e.DataValue55)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE55");

                entity.Property(e => e.Email)
                    .HasMaxLength(100)
                    .HasColumnName("EMAIL")
                    .HasComment("Email Address");

                entity.Property(e => e.EmpAdd1)
                    .HasMaxLength(100)
                    .HasColumnName("EMP_ADD1")
                    .HasComment("Address Line 1");

                entity.Property(e => e.EmpAdd2)
                    .HasMaxLength(100)
                    .HasColumnName("EMP_ADD2")
                    .HasComment("Address Line 2");

                entity.Property(e => e.EmpAdd3)
                    .HasMaxLength(100)
                    .HasColumnName("EMP_ADD3")
                    .HasComment("Address Line 3");

                entity.Property(e => e.EmpAdd4)
                    .HasMaxLength(100)
                    .HasColumnName("EMP_ADD4")
                    .HasComment("Address Line 4");

                entity.Property(e => e.EmpCity)
                    .HasMaxLength(15)
                    .HasColumnName("EMP_CITY")
                    .HasComment("City");

                entity.Property(e => e.EmpCountry)
                    .HasMaxLength(25)
                    .HasColumnName("EMP_COUNTRY")
                    .HasComment("Country");

                entity.Property(e => e.EmpName)
                    .HasMaxLength(100)
                    .HasColumnName("EMP_NAME")
                    .HasComment("Employer Name");

                entity.Property(e => e.EmpPcode)
                    .HasMaxLength(10)
                    .HasColumnName("EMP_PCODE")
                    .HasComment("Postcode");

                entity.Property(e => e.EmpState)
                    .HasMaxLength(15)
                    .HasColumnName("EMP_STATE")
                    .HasComment("State");

                entity.Property(e => e.EmpYear)
                    .HasColumnName("EMP_YEAR")
                    .HasComment("Year Employed");

                entity.Property(e => e.FatcaNo)
                    .HasMaxLength(15)
                    .HasColumnName("FATCA_NO")
                    .HasComment("Tin Number");

                entity.Property(e => e.FlagBlist)
                    .HasColumnName("FLAG_BLIST")
                    .HasComment("Blacklist Flag");

                entity.Property(e => e.FlagBumi)
                    .HasColumnName("FLAG_BUMI")
                    .HasComment("Bumi Flag");

                entity.Property(e => e.FlagCrs)
                    .HasColumnName("FLAG_CRS")
                    .HasComment("CRS Flag");

                entity.Property(e => e.FlagEkyc)
                    .HasColumnName("FLAG_EKYC")
                    .HasComment("E-KYC Flag");

                entity.Property(e => e.FlagFatca)
                    .HasColumnName("FLAG_FATCA")
                    .HasComment("Fatca Flag");

                entity.Property(e => e.FlagFi)
                    .HasColumnName("FLAG_FI")
                    .HasComment("FI/Non-FI Flag");

                entity.Property(e => e.FlagFpos)
                    .HasColumnName("FLAG_FPOS")
                    .HasComment("False Positive Flag");

                entity.Property(e => e.FlagLegal)
                    .HasColumnName("FLAG_LEGAL")
                    .HasComment("Legal Flag");

                entity.Property(e => e.FlagOther)
                    .HasColumnName("FLAG_OTHER")
                    .HasComment("Other Flag");

                entity.Property(e => e.FlagPdpa)
                    .HasColumnName("FLAG_PDPA")
                    .HasComment("PDPA Flag");

                entity.Property(e => e.FlagPep)
                    .HasColumnName("FLAG_PEP")
                    .HasComment("PEP Flag");

                entity.Property(e => e.FlagPrime)
                    .HasColumnName("FLAG_PRIME")
                    .HasDefaultValueSql("((1))")
                    .HasComment("Flag to indicate this NO_MASTER is primary");

                entity.Property(e => e.FlagSoc)
                    .HasColumnName("FLAG_SOC")
                    .HasComment("SOC Flag");

                entity.Property(e => e.FlagStaff)
                    .HasColumnName("FLAG_STAFF")
                    .HasComment("Staff Flag");

                entity.Property(e => e.FlagStr)
                    .HasColumnName("FLAG_STR")
                    .HasComment("Investigation Flag (STR)");

                entity.Property(e => e.FlagWlist)
                    .HasColumnName("FLAG_WLIST")
                    .HasComment("Watchlist Hit Flag");

                entity.Property(e => e.FlatHnw)
                    .HasColumnName("FLAT_HNW")
                    .HasComment("HNW Flag");

                entity.Property(e => e.FposDate)
                    .HasColumnName("FPOS_DATE")
                    .HasComment("False Positive Date");

                entity.Property(e => e.Id1Edate)
                    .HasColumnName("ID1_EDATE")
                    .HasComment("ID Expiry Date");

                entity.Property(e => e.Id1Idate)
                    .HasColumnName("ID1_IDATE")
                    .HasComment("ID Issue Date");

                entity.Property(e => e.Id1Iplace)
                    .HasMaxLength(50)
                    .HasColumnName("ID1_IPLACE")
                    .HasComment("ID Issue Place");

                entity.Property(e => e.Id1No)
                    .HasMaxLength(50)
                    .HasColumnName("ID1_NO")
                    .HasComment("ID Number (IC/ Biz Reg No.)");

                entity.Property(e => e.Id1Type)
                    .HasColumnName("ID1_TYPE")
                    .HasComment("ID Type");

                entity.Property(e => e.Id1Vdate)
                    .HasColumnName("ID1_VDATE")
                    .HasComment("ID Verify Date");

                entity.Property(e => e.Id2Edate)
                    .HasColumnName("ID2_EDATE")
                    .HasComment("Secondary ID Expiry Date");

                entity.Property(e => e.Id2Idate)
                    .HasColumnName("ID2_IDATE")
                    .HasComment("Secondary ID Issue Date");

                entity.Property(e => e.Id2Iplace)
                    .HasMaxLength(50)
                    .HasColumnName("ID2_IPLACE")
                    .HasComment("Secondary ID Issue Place");

                entity.Property(e => e.Id2No)
                    .HasMaxLength(50)
                    .HasColumnName("ID2_NO")
                    .HasComment("Secondary ID Number");

                entity.Property(e => e.Id2Type)
                    .HasColumnName("ID2_TYPE")
                    .HasComment("Secondary ID Type");

                entity.Property(e => e.Id2Vdate)
                    .HasColumnName("ID2_VDATE")
                    .HasComment("Secondary ID Verify Date");

                entity.Property(e => e.IndoDob)
                    .HasColumnName("INDO_DOB")
                    .HasComment("Date of Birth");

                entity.Property(e => e.InfoAge)
                    .HasColumnName("INFO_AGE")
                    .HasComment("Age");

                entity.Property(e => e.InfoAgent)
                    .HasMaxLength(50)
                    .HasColumnName("INFO_AGENT")
                    .HasComment("Agent Code");

                entity.Property(e => e.InfoBline)
                    .HasMaxLength(50)
                    .HasColumnName("INFO_BLINE")
                    .HasComment("Business Line");

                entity.Property(e => e.InfoBsect)
                    .HasMaxLength(50)
                    .HasColumnName("INFO_BSECT")
                    .HasComment("Business/industry Sector");

                entity.Property(e => e.InfoDdate)
                    .HasMaxLength(50)
                    .HasColumnName("INFO_DDATE")
                    .HasComment("Death Date");

                entity.Property(e => e.InfoEdu)
                    .HasMaxLength(50)
                    .HasColumnName("INFO_EDU")
                    .HasComment("Education Level");

                entity.Property(e => e.InfoGen)
                    .HasColumnName("INFO_GEN")
                    .HasComment("Gender");

                entity.Property(e => e.InfoIcome)
                    .HasMaxLength(50)
                    .HasColumnName("INFO_ICOME")
                    .HasComment("Annual Income Range");

                entity.Property(e => e.InfoLang)
                    .HasMaxLength(50)
                    .HasColumnName("INFO_LANG")
                    .HasComment("Primary Language");

                entity.Property(e => e.InfoMarry)
                    .HasColumnName("INFO_MARRY")
                    .HasComment("Marital Status");

                entity.Property(e => e.InfoNameFirst)
                    .HasMaxLength(150)
                    .HasColumnName("INFO_NAME_FIRST")
                    .HasComment("First Name");

                entity.Property(e => e.InfoNameFull)
                    .HasMaxLength(150)
                    .HasColumnName("INFO_NAME_FULL")
                    .HasComment("Name");

                entity.Property(e => e.InfoNameLast)
                    .HasMaxLength(150)
                    .HasColumnName("INFO_NAME_LAST")
                    .HasComment("Last Name");

                entity.Property(e => e.InfoNameMid)
                    .HasMaxLength(150)
                    .HasColumnName("INFO_NAME_MID")
                    .HasComment("Middle Name");

                entity.Property(e => e.InfoNameNative)
                    .HasMaxLength(150)
                    .HasColumnName("INFO_NAME_NATIVE")
                    .HasComment("Native Name");

                entity.Property(e => e.InfoNat)
                    .HasMaxLength(50)
                    .HasColumnName("INFO_NAT")
                    .HasComment("Nationality");

                entity.Property(e => e.InfoOcc)
                    .HasMaxLength(50)
                    .HasColumnName("INFO_OCC")
                    .HasComment("Occupation");

                entity.Property(e => e.InfoOsect)
                    .HasMaxLength(50)
                    .HasColumnName("INFO_OSECT")
                    .HasComment("Occupation/Industry Sector");

                entity.Property(e => e.InfoOyear)
                    .HasMaxLength(50)
                    .HasColumnName("INFO_OYEAR")
                    .HasComment("Occupation Year");

                entity.Property(e => e.InfoRace)
                    .HasMaxLength(50)
                    .HasColumnName("INFO_RACE")
                    .HasComment("Race");

                entity.Property(e => e.InfoReli)
                    .HasMaxLength(50)
                    .HasColumnName("INFO_RELI")
                    .HasComment("Religion");

                entity.Property(e => e.InfoRes)
                    .HasMaxLength(50)
                    .HasColumnName("INFO_RES")
                    .HasComment("Residence");

                entity.Property(e => e.InfoSof)
                    .HasMaxLength(50)
                    .HasColumnName("INFO_SOF")
                    .HasComment("Source of Fund");

                entity.Property(e => e.InfoType)
                    .HasColumnName("INFO_TYPE")
                    .HasComment("Entity Type (Individual/Corporate)");

                entity.Property(e => e.RiskHost)
                    .HasColumnName("RISK_HOST")
                    .HasComment("Host Level");

                entity.Property(e => e.RiskManual)
                    .HasColumnName("RISK_MANUAL")
                    .HasComment("Manual Level");

                entity.Property(e => e.RiskNew)
                    .HasColumnName("RISK_NEW")
                    .HasComment("System Current Level");

                entity.Property(e => e.RiskPrev)
                    .HasColumnName("RISK_PREV")
                    .HasComment("System Previous Level");

                entity.Property(e => e.RiskScore)
                    .HasColumnName("RISK_SCORE")
                    .HasComment("Risk score computed by system");
            });

            modelBuilder.Entity<CustomerWhitelist>(entity =>
            {
                entity.HasKey(e => new { e.NoMaster, e.NoAcc, e.CodeComp, e.CodeOrg, e.NoCif })
                    .HasName("PK_CIFFALSEPOS");

                entity.ToTable("CUSTOMER_WHITELIST");

                entity.Property(e => e.NoMaster)
                    .HasMaxLength(50)
                    .HasColumnName("NO_MASTER");

                entity.Property(e => e.NoAcc)
                    .HasMaxLength(50)
                    .HasColumnName("NO_ACC");

                entity.Property(e => e.CodeComp)
                    .HasColumnName("CODE_COMP")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.CodeOrg).HasColumnName("CODE_ORG");

                entity.Property(e => e.NoCif)
                    .HasMaxLength(50)
                    .HasColumnName("NO_CIF");

                entity.Property(e => e.CifFalsePositiveDt).HasColumnName("CIF_FALSE_POSITIVE_DT");

                entity.Property(e => e.CifFalsePositiveDtWl).HasColumnName("CIF_FALSE_POSITIVE_DT_WL");

                entity.Property(e => e.CifFalsePositiveInd).HasColumnName("CIF_FALSE_POSITIVE_IND");

                entity.Property(e => e.CifFalsePositiveIndWl).HasColumnName("CIF_FALSE_POSITIVE_IND_WL");

                entity.Property(e => e.CifTableName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("CIF_TABLE_NAME")
                    .HasDefaultValueSql("(N'CUSTOMER')");

                entity.Property(e => e.FirstName)
                    .HasMaxLength(100)
                    .HasColumnName("FIRST_NAME");

                entity.Property(e => e.ModeMn)
                    .HasMaxLength(1)
                    .HasColumnName("MODE_MN");

                entity.Property(e => e.Remarks)
                    .HasMaxLength(256)
                    .HasColumnName("REMARKS");

                entity.Property(e => e.StampDttm)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("STAMP_DTTM");

                entity.Property(e => e.UserId)
                    .HasMaxLength(30)
                    .HasColumnName("USER_ID");
            });

            modelBuilder.Entity<Customerstatus>(entity =>
            {
                entity.HasKey(e => e.NoCif);

                entity.ToTable("CUSTOMERSTATUS");

                entity.Property(e => e.NoCif)
                    .HasMaxLength(150)
                    .HasColumnName("NO_CIF")
                    .HasComment("CIF Number");

                entity.Property(e => e.AuditUpdatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("AUDIT_UPDATED_DATE");

                entity.Property(e => e.AuditUpdatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_UPDATED_USER");

                entity.Property(e => e.Indicator)
                    .HasMaxLength(10)
                    .HasColumnName("INDICATOR");
            });

            modelBuilder.Entity<D2fSsIdTempalerttran>(entity =>
            {
                entity.HasKey(e => new { e.CompCode, e.TempAlertId, e.AlertId });

                entity.ToTable("D2F_SS_ID_TEMPALERTTRAN");

                entity.Property(e => e.CompCode)
                    .HasColumnName("COMP_CODE")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.TempAlertId)
                    .HasMaxLength(100)
                    .HasColumnName("TEMP_ALERT_ID")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AlertId).HasColumnName("ALERT_ID");

                entity.Property(e => e.AccountName)
                    .HasMaxLength(100)
                    .HasColumnName("ACCOUNT_NAME");

                entity.Property(e => e.AccountNo)
                    .HasMaxLength(30)
                    .HasColumnName("ACCOUNT_NO");

                entity.Property(e => e.ActionGuideNo).HasColumnName("ACTION_GUIDE_NO");

                entity.Property(e => e.AlertBr)
                    .HasMaxLength(20)
                    .HasColumnName("ALERT_BR");

                entity.Property(e => e.AlertHitStatus)
                    .HasColumnName("ALERT_HIT_STATUS")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.AmlFraudInd)
                    .IsRequired()
                    .HasMaxLength(1)
                    .HasColumnName("AML_FRAUD_IND")
                    .HasDefaultValueSql("(N'A')");

                entity.Property(e => e.AutoSeqNo)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("AUTO_SEQ_NO");

                entity.Property(e => e.BatchDate).HasColumnName("BATCH_DATE");

                entity.Property(e => e.BatchNo)
                    .HasMaxLength(15)
                    .HasColumnName("BATCH_NO");

                entity.Property(e => e.BrCode)
                    .HasMaxLength(20)
                    .HasColumnName("BR_CODE");

                entity.Property(e => e.CifId)
                    .HasMaxLength(30)
                    .HasColumnName("CIF_ID");

                entity.Property(e => e.CreditDebit).HasColumnName("CREDIT_DEBIT");

                entity.Property(e => e.DismissDate).HasColumnName("DISMISS_DATE");

                entity.Property(e => e.DismissInd).HasColumnName("DISMISS_IND");

                entity.Property(e => e.DismissTime).HasColumnName("DISMISS_TIME");

                entity.Property(e => e.DismissViewBy)
                    .HasMaxLength(30)
                    .HasColumnName("DISMISS_VIEW_BY")
                    .HasDefaultValueSql("(N'None')");

                entity.Property(e => e.DismissViewDate).HasColumnName("DISMISS_VIEW_DATE");

                entity.Property(e => e.DismissViewTime).HasColumnName("DISMISS_VIEW_TIME");

                entity.Property(e => e.EstablishDate).HasColumnName("ESTABLISH_DATE");

                entity.Property(e => e.EstablishTime).HasColumnName("ESTABLISH_TIME");

                entity.Property(e => e.ForeignAmount).HasColumnName("FOREIGN_AMOUNT");

                entity.Property(e => e.FxRate).HasColumnName("FX_RATE");

                entity.Property(e => e.GroupAlertInd).HasColumnName("GROUP_ALERT_IND");

                entity.Property(e => e.HitAssessmentInd)
                    .IsRequired()
                    .HasMaxLength(8)
                    .HasColumnName("HIT_ASSESSMENT_IND")
                    .HasDefaultValueSql("(N'00000000')");

                entity.Property(e => e.HitDate).HasColumnName("HIT_DATE");

                entity.Property(e => e.HitEqId)
                    .HasMaxLength(15)
                    .HasColumnName("HIT_EQ_ID");

                entity.Property(e => e.HitEqIdMultiple)
                    .HasMaxLength(512)
                    .HasColumnName("HIT_EQ_ID_MULTIPLE");

                entity.Property(e => e.HitEqNoOfDays).HasColumnName("HIT_EQ_NO_OF_DAYS");

                entity.Property(e => e.HitEqWeight)
                    .HasColumnName("HIT_EQ_WEIGHT")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.HitErId)
                    .HasMaxLength(15)
                    .HasColumnName("HIT_ER_ID");

                entity.Property(e => e.HitErName)
                    .HasMaxLength(100)
                    .HasColumnName("HIT_ER_NAME");

                entity.Property(e => e.HitErThreshold).HasColumnName("HIT_ER_THRESHOLD");

                entity.Property(e => e.HitGrpId)
                    .HasMaxLength(15)
                    .HasColumnName("HIT_GRP_ID");

                entity.Property(e => e.HitRanking).HasColumnName("HIT_RANKING");

                entity.Property(e => e.HitRlRiskLevel)
                    .HasMaxLength(15)
                    .HasColumnName("HIT_RL_RISK_LEVEL");

                entity.Property(e => e.HqTranInd).HasColumnName("HQ_TRAN_IND");

                entity.Property(e => e.LastStatus)
                    .HasColumnName("LAST_STATUS")
                    .HasDefaultValueSql("((100))");

                entity.Property(e => e.LastUptDate).HasColumnName("LAST_UPT_DATE");

                entity.Property(e => e.LastUptTime).HasColumnName("LAST_UPT_TIME");

                entity.Property(e => e.LocalAmount).HasColumnName("LOCAL_AMOUNT");

                entity.Property(e => e.LocalCurrency)
                    .HasMaxLength(8)
                    .HasColumnName("LOCAL_CURRENCY");

                entity.Property(e => e.ModeMn)
                    .HasMaxLength(1)
                    .HasColumnName("MODE_MN")
                    .HasDefaultValueSql("(N'A')");

                entity.Property(e => e.ParentAlertId).HasColumnName("PARENT_ALERT_ID");

                entity.Property(e => e.PostingDate).HasColumnName("POSTING_DATE");

                entity.Property(e => e.PrimaryAlertRec).HasColumnName("PRIMARY_ALERT_REC");

                entity.Property(e => e.ProductCode)
                    .HasMaxLength(8)
                    .HasColumnName("PRODUCT_CODE");

                entity.Property(e => e.RecIdentityNo)
                    .HasMaxLength(20)
                    .HasColumnName("REC_IDENTITY_NO");

                entity.Property(e => e.RecType)
                    .HasMaxLength(8)
                    .HasColumnName("REC_TYPE");

                entity.Property(e => e.ReferanceDt)
                    .HasMaxLength(10)
                    .HasColumnName("REFERANCE_DT");

                entity.Property(e => e.ReferanceNo)
                    .HasMaxLength(30)
                    .HasColumnName("REFERANCE_NO");

                entity.Property(e => e.RuserId)
                    .HasMaxLength(30)
                    .HasColumnName("RUSER_ID");

                entity.Property(e => e.StaffInd).HasColumnName("STAFF_IND");

                entity.Property(e => e.StampDttm)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("STAMP_DTTM");

                entity.Property(e => e.Status)
                    .HasColumnName("STATUS")
                    .HasDefaultValueSql("((100))");

                entity.Property(e => e.StatusUptDt).HasColumnName("STATUS_UPT_DT");

                entity.Property(e => e.TranCode)
                    .HasMaxLength(8)
                    .HasColumnName("TRAN_CODE");

                entity.Property(e => e.TranDate).HasColumnName("TRAN_DATE");

                entity.Property(e => e.TranLocation)
                    .HasMaxLength(20)
                    .HasColumnName("TRAN_LOCATION");

                entity.Property(e => e.TranReversalInd).HasColumnName("TRAN_REVERSAL_IND");

                entity.Property(e => e.TransCount).HasColumnName("TRANS_COUNT");

                entity.Property(e => e.UserId)
                    .HasMaxLength(30)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.UserUptCount).HasColumnName("USER_UPT_COUNT");

                entity.Property(e => e.ValueDate).HasColumnName("VALUE_DATE");
            });

            modelBuilder.Entity<D2fSsIdTempalerttrandtlhit>(entity =>
            {
                entity.HasKey(e => new { e.CompCode, e.TempAlertId, e.AlertId, e.AlertSeqno });

                entity.ToTable("D2F_SS_ID_TEMPALERTTRANDTLHIT");

                entity.Property(e => e.CompCode)
                    .HasColumnName("COMP_CODE")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.TempAlertId)
                    .HasMaxLength(100)
                    .HasColumnName("TEMP_ALERT_ID")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AlertId).HasColumnName("ALERT_ID");

                entity.Property(e => e.AlertSeqno).HasColumnName("ALERT_SEQNO");

                entity.Property(e => e.AccountNo)
                    .HasMaxLength(30)
                    .HasColumnName("ACCOUNT_NO");

                entity.Property(e => e.BatchDate).HasColumnName("BATCH_DATE");

                entity.Property(e => e.BatchNo)
                    .HasMaxLength(15)
                    .HasColumnName("BATCH_NO");

                entity.Property(e => e.CrAmount).HasColumnName("CR_AMOUNT");

                entity.Property(e => e.CreditDebit)
                    .HasColumnName("CREDIT_DEBIT")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.DrAmount).HasColumnName("DR_AMOUNT");

                entity.Property(e => e.FilterTranhistStatus).HasColumnName("FILTER_TRANHIST_STATUS");

                entity.Property(e => e.ForeignAmount).HasColumnName("FOREIGN_AMOUNT");

                entity.Property(e => e.FxRate)
                    .HasColumnName("FX_RATE")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.HistForeignAmount).HasColumnName("HIST_FOREIGN_AMOUNT");

                entity.Property(e => e.HistLocalAmount).HasColumnName("HIST_LOCAL_AMOUNT");

                entity.Property(e => e.HistTransCount).HasColumnName("HIST_TRANS_COUNT");

                entity.Property(e => e.HitDtlEqId)
                    .HasMaxLength(15)
                    .HasColumnName("HIT_DTL_EQ_ID");

                entity.Property(e => e.HitDtlEqName)
                    .HasMaxLength(100)
                    .HasColumnName("HIT_DTL_EQ_NAME");

                entity.Property(e => e.HitDtlEqNoOfDays).HasColumnName("HIT_DTL_EQ_NO_OF_DAYS");

                entity.Property(e => e.HitDtlEqRuleType).HasColumnName("HIT_DTL_EQ_RULE_TYPE");

                entity.Property(e => e.HitDtlEqWeight)
                    .HasColumnName("HIT_DTL_EQ_WEIGHT")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.HitDtlErId)
                    .HasMaxLength(15)
                    .HasColumnName("HIT_DTL_ER_ID");

                entity.Property(e => e.HitDtlErRank).HasColumnName("HIT_DTL_ER_RANK");

                entity.Property(e => e.HitDtlErThreshold).HasColumnName("HIT_DTL_ER_THRESHOLD");

                entity.Property(e => e.HitDtlGrpId)
                    .HasMaxLength(15)
                    .HasColumnName("HIT_DTL_GRP_ID");

                entity.Property(e => e.HitStatus)
                    .HasColumnName("HIT_STATUS")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.LocalAmount).HasColumnName("LOCAL_AMOUNT");

                entity.Property(e => e.LocalCurrency)
                    .HasMaxLength(8)
                    .HasColumnName("LOCAL_CURRENCY");

                entity.Property(e => e.ModeMn)
                    .IsRequired()
                    .HasMaxLength(1)
                    .HasColumnName("MODE_MN")
                    .HasDefaultValueSql("(N'A')");

                entity.Property(e => e.StampDttm)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("STAMP_DTTM");

                entity.Property(e => e.TranCode)
                    .HasMaxLength(8)
                    .HasColumnName("TRAN_CODE");

                entity.Property(e => e.TranDate).HasColumnName("TRAN_DATE");

                entity.Property(e => e.TranhistSqlStmt)
                    .HasMaxLength(2000)
                    .HasColumnName("TRANHIST_SQL_STMT");

                entity.Property(e => e.TransCount).HasColumnName("TRANS_COUNT");

                entity.Property(e => e.UserId)
                    .HasMaxLength(30)
                    .HasColumnName("USER_ID");
            });

            modelBuilder.Entity<D2fSsIdTempalerttranwlist>(entity =>
            {
                entity.HasKey(e => new { e.CompCode, e.TempAlertId, e.AlertId, e.SeqNo });

                entity.ToTable("D2F_SS_ID_TEMPALERTTRANWLIST");

                entity.Property(e => e.CompCode)
                    .HasColumnName("COMP_CODE")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.TempAlertId)
                    .HasMaxLength(100)
                    .HasColumnName("TEMP_ALERT_ID")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AlertId).HasColumnName("ALERT_ID");

                entity.Property(e => e.SeqNo)
                    .HasColumnName("SEQ_NO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.BatchDate).HasColumnName("BATCH_DATE");

                entity.Property(e => e.BatchNo)
                    .HasMaxLength(15)
                    .HasColumnName("BATCH_NO");

                entity.Property(e => e.CifId)
                    .HasMaxLength(30)
                    .HasColumnName("CIF_ID");

                entity.Property(e => e.DetectionMethod)
                    .IsRequired()
                    .HasMaxLength(15)
                    .HasColumnName("DETECTION_METHOD")
                    .HasDefaultValueSql("(N'MC')");

                entity.Property(e => e.EqAndOrString)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("EQ_AND_OR_STRING")
                    .HasDefaultValueSql("(N'00000000000000000000')");

                entity.Property(e => e.EqApplyFullMatch).HasColumnName("EQ_APPLY_FULL_MATCH");

                entity.Property(e => e.EqApplySoundex).HasColumnName("EQ_APPLY_SOUNDEX");

                entity.Property(e => e.IdHit).HasColumnName("ID_HIT");

                entity.Property(e => e.KeyField1)
                    .HasMaxLength(30)
                    .HasColumnName("KEY_FIELD1");

                entity.Property(e => e.KeyField2)
                    .HasMaxLength(30)
                    .HasColumnName("KEY_FIELD2");

                entity.Property(e => e.ModeMn)
                    .HasMaxLength(1)
                    .HasColumnName("MODE_MN")
                    .HasDefaultValueSql("(N'A')");

                entity.Property(e => e.NameHit).HasColumnName("NAME_HIT");

                entity.Property(e => e.NoOfRowsHit).HasColumnName("NO_OF_ROWS_HIT");

                entity.Property(e => e.SearchType)
                    .IsRequired()
                    .HasMaxLength(2)
                    .HasColumnName("SEARCH_TYPE")
                    .HasDefaultValueSql("(N'T')");

                entity.Property(e => e.SqlSearchStmt)
                    .HasMaxLength(2000)
                    .HasColumnName("SQL_SEARCH_STMT");

                entity.Property(e => e.SqlWatchlistFdUsed)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("SQL_WATCHLIST_FD_USED");

                entity.Property(e => e.StampDttm)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("STAMP_DTTM");

                entity.Property(e => e.TableNameUsed)
                    .HasMaxLength(30)
                    .HasColumnName("TABLE_NAME_USED");

                entity.Property(e => e.UserId)
                    .HasMaxLength(30)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.WatchListHit)
                    .IsUnicode(false)
                    .HasColumnName("WATCH_LIST_HIT");

                entity.Property(e => e.WatchListScore1).HasColumnName("WATCH_LIST_SCORE1");

                entity.Property(e => e.WatchListScore10).HasColumnName("WATCH_LIST_SCORE10");

                entity.Property(e => e.WatchListScore11).HasColumnName("WATCH_LIST_SCORE11");

                entity.Property(e => e.WatchListScore12).HasColumnName("WATCH_LIST_SCORE12");

                entity.Property(e => e.WatchListScore13).HasColumnName("WATCH_LIST_SCORE13");

                entity.Property(e => e.WatchListScore14).HasColumnName("WATCH_LIST_SCORE14");

                entity.Property(e => e.WatchListScore15).HasColumnName("WATCH_LIST_SCORE15");

                entity.Property(e => e.WatchListScore16).HasColumnName("WATCH_LIST_SCORE16");

                entity.Property(e => e.WatchListScore2).HasColumnName("WATCH_LIST_SCORE2");

                entity.Property(e => e.WatchListScore3).HasColumnName("WATCH_LIST_SCORE3");

                entity.Property(e => e.WatchListScore4).HasColumnName("WATCH_LIST_SCORE4");

                entity.Property(e => e.WatchListScore5).HasColumnName("WATCH_LIST_SCORE5");

                entity.Property(e => e.WatchListScore6).HasColumnName("WATCH_LIST_SCORE6");

                entity.Property(e => e.WatchListScore7).HasColumnName("WATCH_LIST_SCORE7");

                entity.Property(e => e.WatchListScore8).HasColumnName("WATCH_LIST_SCORE8");

                entity.Property(e => e.WatchListScore9).HasColumnName("WATCH_LIST_SCORE9");
            });

            modelBuilder.Entity<D2fSsIdTempalerttranwlistdtl>(entity =>
            {
                entity.HasKey(e => new { e.CompCode, e.TempAlertId, e.AlertId, e.EntityId, e.SysId, e.AutoSeqNo });

                entity.ToTable("D2F_SS_ID_TEMPALERTTRANWLISTDTL");

                entity.Property(e => e.CompCode)
                    .HasColumnName("COMP_CODE")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.TempAlertId)
                    .HasMaxLength(100)
                    .HasColumnName("TEMP_ALERT_ID")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AlertId).HasColumnName("ALERT_ID");

                entity.Property(e => e.EntityId)
                    .HasMaxLength(30)
                    .HasColumnName("ENTITY_ID");

                entity.Property(e => e.SysId).HasColumnName("SYS_ID");

                entity.Property(e => e.AutoSeqNo)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("AUTO_SEQ_NO");

                entity.Property(e => e.AccountNo)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("ACCOUNT_NO")
                    .HasDefaultValueSql("(N'NA')");

                entity.Property(e => e.BatchDate).HasColumnName("BATCH_DATE");

                entity.Property(e => e.Category)
                    .HasMaxLength(100)
                    .HasColumnName("CATEGORY");

                entity.Property(e => e.Categorynum)
                    .HasMaxLength(500)
                    .HasColumnName("CATEGORYNUM")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CifId)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("CIF_ID")
                    .HasDefaultValueSql("(N'NA')");

                entity.Property(e => e.ConfidenceScore)
                    .HasColumnName("CONFIDENCE_SCORE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Country)
                    .HasMaxLength(4000)
                    .HasColumnName("COUNTRY");

                entity.Property(e => e.Dobs)
                    .HasMaxLength(500)
                    .HasColumnName("DOBS");

                entity.Property(e => e.EntityType)
                    .HasMaxLength(20)
                    .HasColumnName("ENTITY_TYPE")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FalsePositiveInd).HasColumnName("FALSE_POSITIVE_IND");

                entity.Property(e => e.Gender)
                    .HasMaxLength(20)
                    .HasColumnName("GENDER")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.HitIdOrName)
                    .HasColumnName("HIT_ID_OR_NAME")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.IdValue)
                    .HasMaxLength(150)
                    .HasColumnName("ID_VALUE");

                entity.Property(e => e.InfoSource)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("INFO_SOURCE")
                    .HasDefaultValueSql("(N'DJ')");

                entity.Property(e => e.InvestigateStatus).HasColumnName("INVESTIGATE_STATUS");

                entity.Property(e => e.LastUptDate).HasColumnName("LAST_UPT_DATE");

                entity.Property(e => e.LastUptTime).HasColumnName("LAST_UPT_TIME");

                entity.Property(e => e.Match)
                    .HasMaxLength(20)
                    .HasColumnName("MATCH")
                    .HasDefaultValueSql("('NA')");

                entity.Property(e => e.MatchPercent).HasColumnName("MATCH_PERCENT");

                entity.Property(e => e.ModeMn)
                    .HasMaxLength(1)
                    .HasColumnName("MODE_MN")
                    .HasDefaultValueSql("('A')");

                entity.Property(e => e.NameType)
                    .HasMaxLength(255)
                    .HasColumnName("NAME_TYPE");

                entity.Property(e => e.Namesource)
                    .HasMaxLength(20)
                    .HasColumnName("NAMESOURCE");

                entity.Property(e => e.Remarks)
                    .HasMaxLength(2000)
                    .HasColumnName("REMARKS");

                entity.Property(e => e.Sanction)
                    .HasMaxLength(1024)
                    .HasColumnName("SANCTION")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SingleStringName)
                    .HasMaxLength(255)
                    .HasColumnName("SINGLE_STRING_NAME");

                entity.Property(e => e.Subcategory)
                    .HasMaxLength(50)
                    .HasColumnName("SUBCATEGORY")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TypeOfExposition).HasColumnName("TYPE_OF_EXPOSITION");

                entity.Property(e => e.UserId)
                    .HasMaxLength(30)
                    .HasColumnName("USER_ID");
            });

            modelBuilder.Entity<D2fSsTempalerttran>(entity =>
            {
                entity.HasKey(e => new { e.CompCode, e.TempAlertId, e.AlertId });

                entity.ToTable("D2F_SS_TEMPALERTTRAN");

                entity.Property(e => e.CompCode)
                    .HasColumnName("COMP_CODE")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.TempAlertId)
                    .HasMaxLength(100)
                    .HasColumnName("TEMP_ALERT_ID")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AlertId).HasColumnName("ALERT_ID");

                entity.Property(e => e.AccountName)
                    .HasMaxLength(100)
                    .HasColumnName("ACCOUNT_NAME");

                entity.Property(e => e.AccountNo)
                    .HasMaxLength(30)
                    .HasColumnName("ACCOUNT_NO");

                entity.Property(e => e.ActionGuideNo).HasColumnName("ACTION_GUIDE_NO");

                entity.Property(e => e.AlertBr)
                    .HasMaxLength(20)
                    .HasColumnName("ALERT_BR");

                entity.Property(e => e.AlertHitStatus)
                    .HasColumnName("ALERT_HIT_STATUS")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.AmlFraudInd)
                    .IsRequired()
                    .HasMaxLength(1)
                    .HasColumnName("AML_FRAUD_IND")
                    .HasDefaultValueSql("(N'A')");

                entity.Property(e => e.AutoSeqNo)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("AUTO_SEQ_NO");

                entity.Property(e => e.BatchDate).HasColumnName("BATCH_DATE");

                entity.Property(e => e.BatchNo)
                    .HasMaxLength(15)
                    .HasColumnName("BATCH_NO");

                entity.Property(e => e.BrCode)
                    .HasMaxLength(20)
                    .HasColumnName("BR_CODE");

                entity.Property(e => e.CifId)
                    .HasMaxLength(30)
                    .HasColumnName("CIF_ID");

                entity.Property(e => e.CreditDebit).HasColumnName("CREDIT_DEBIT");

                entity.Property(e => e.DismissDate).HasColumnName("DISMISS_DATE");

                entity.Property(e => e.DismissInd).HasColumnName("DISMISS_IND");

                entity.Property(e => e.DismissTime).HasColumnName("DISMISS_TIME");

                entity.Property(e => e.DismissViewBy)
                    .HasMaxLength(30)
                    .HasColumnName("DISMISS_VIEW_BY")
                    .HasDefaultValueSql("(N'None')");

                entity.Property(e => e.DismissViewDate).HasColumnName("DISMISS_VIEW_DATE");

                entity.Property(e => e.DismissViewTime).HasColumnName("DISMISS_VIEW_TIME");

                entity.Property(e => e.EstablishDate).HasColumnName("ESTABLISH_DATE");

                entity.Property(e => e.EstablishTime).HasColumnName("ESTABLISH_TIME");

                entity.Property(e => e.ForeignAmount).HasColumnName("FOREIGN_AMOUNT");

                entity.Property(e => e.FxRate).HasColumnName("FX_RATE");

                entity.Property(e => e.GroupAlertInd).HasColumnName("GROUP_ALERT_IND");

                entity.Property(e => e.HitAssessmentInd)
                    .IsRequired()
                    .HasMaxLength(8)
                    .HasColumnName("HIT_ASSESSMENT_IND")
                    .HasDefaultValueSql("(N'00000000')");

                entity.Property(e => e.HitDate).HasColumnName("HIT_DATE");

                entity.Property(e => e.HitEqId)
                    .HasMaxLength(15)
                    .HasColumnName("HIT_EQ_ID");

                entity.Property(e => e.HitEqIdMultiple)
                    .HasMaxLength(512)
                    .HasColumnName("HIT_EQ_ID_MULTIPLE");

                entity.Property(e => e.HitEqNoOfDays).HasColumnName("HIT_EQ_NO_OF_DAYS");

                entity.Property(e => e.HitEqWeight)
                    .HasColumnName("HIT_EQ_WEIGHT")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.HitErId)
                    .HasMaxLength(15)
                    .HasColumnName("HIT_ER_ID");

                entity.Property(e => e.HitErName)
                    .HasMaxLength(100)
                    .HasColumnName("HIT_ER_NAME");

                entity.Property(e => e.HitErThreshold).HasColumnName("HIT_ER_THRESHOLD");

                entity.Property(e => e.HitGrpId)
                    .HasMaxLength(15)
                    .HasColumnName("HIT_GRP_ID");

                entity.Property(e => e.HitRanking).HasColumnName("HIT_RANKING");

                entity.Property(e => e.HitRlRiskLevel)
                    .HasMaxLength(15)
                    .HasColumnName("HIT_RL_RISK_LEVEL");

                entity.Property(e => e.HqTranInd).HasColumnName("HQ_TRAN_IND");

                entity.Property(e => e.LastStatus)
                    .HasColumnName("LAST_STATUS")
                    .HasDefaultValueSql("((100))");

                entity.Property(e => e.LastUptDate).HasColumnName("LAST_UPT_DATE");

                entity.Property(e => e.LastUptTime).HasColumnName("LAST_UPT_TIME");

                entity.Property(e => e.LocalAmount).HasColumnName("LOCAL_AMOUNT");

                entity.Property(e => e.LocalCurrency)
                    .HasMaxLength(8)
                    .HasColumnName("LOCAL_CURRENCY");

                entity.Property(e => e.ModeMn)
                    .HasMaxLength(1)
                    .HasColumnName("MODE_MN")
                    .HasDefaultValueSql("(N'A')");

                entity.Property(e => e.ParentAlertId).HasColumnName("PARENT_ALERT_ID");

                entity.Property(e => e.PostingDate).HasColumnName("POSTING_DATE");

                entity.Property(e => e.PrimaryAlertRec).HasColumnName("PRIMARY_ALERT_REC");

                entity.Property(e => e.ProductCode)
                    .HasMaxLength(8)
                    .HasColumnName("PRODUCT_CODE");

                entity.Property(e => e.RecIdentityNo)
                    .HasMaxLength(20)
                    .HasColumnName("REC_IDENTITY_NO");

                entity.Property(e => e.RecType)
                    .HasMaxLength(8)
                    .HasColumnName("REC_TYPE");

                entity.Property(e => e.ReferanceDt)
                    .HasMaxLength(10)
                    .HasColumnName("REFERANCE_DT");

                entity.Property(e => e.ReferanceNo)
                    .HasMaxLength(30)
                    .HasColumnName("REFERANCE_NO");

                entity.Property(e => e.RuserId)
                    .HasMaxLength(30)
                    .HasColumnName("RUSER_ID");

                entity.Property(e => e.StaffInd).HasColumnName("STAFF_IND");

                entity.Property(e => e.StampDttm)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("STAMP_DTTM");

                entity.Property(e => e.Status)
                    .HasColumnName("STATUS")
                    .HasDefaultValueSql("((100))");

                entity.Property(e => e.StatusUptDt).HasColumnName("STATUS_UPT_DT");

                entity.Property(e => e.TranCode)
                    .HasMaxLength(8)
                    .HasColumnName("TRAN_CODE");

                entity.Property(e => e.TranDate).HasColumnName("TRAN_DATE");

                entity.Property(e => e.TranLocation)
                    .HasMaxLength(20)
                    .HasColumnName("TRAN_LOCATION");

                entity.Property(e => e.TranReversalInd).HasColumnName("TRAN_REVERSAL_IND");

                entity.Property(e => e.TransCount).HasColumnName("TRANS_COUNT");

                entity.Property(e => e.UserId)
                    .HasMaxLength(30)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.UserUptCount).HasColumnName("USER_UPT_COUNT");

                entity.Property(e => e.ValueDate).HasColumnName("VALUE_DATE");
            });

            modelBuilder.Entity<D2fSsTempalerttrandtlhit>(entity =>
            {
                entity.HasKey(e => new { e.CompCode, e.TempAlertId, e.AlertId, e.AlertSeqno });

                entity.ToTable("D2F_SS_TEMPALERTTRANDTLHIT");

                entity.Property(e => e.CompCode)
                    .HasColumnName("COMP_CODE")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.TempAlertId)
                    .HasMaxLength(100)
                    .HasColumnName("TEMP_ALERT_ID")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AlertId).HasColumnName("ALERT_ID");

                entity.Property(e => e.AlertSeqno).HasColumnName("ALERT_SEQNO");

                entity.Property(e => e.AccountNo)
                    .HasMaxLength(30)
                    .HasColumnName("ACCOUNT_NO");

                entity.Property(e => e.BatchDate).HasColumnName("BATCH_DATE");

                entity.Property(e => e.BatchNo)
                    .HasMaxLength(15)
                    .HasColumnName("BATCH_NO");

                entity.Property(e => e.CrAmount).HasColumnName("CR_AMOUNT");

                entity.Property(e => e.CreditDebit)
                    .HasColumnName("CREDIT_DEBIT")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.DrAmount).HasColumnName("DR_AMOUNT");

                entity.Property(e => e.FilterTranhistStatus).HasColumnName("FILTER_TRANHIST_STATUS");

                entity.Property(e => e.ForeignAmount).HasColumnName("FOREIGN_AMOUNT");

                entity.Property(e => e.FxRate)
                    .HasColumnName("FX_RATE")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.HistForeignAmount).HasColumnName("HIST_FOREIGN_AMOUNT");

                entity.Property(e => e.HistLocalAmount).HasColumnName("HIST_LOCAL_AMOUNT");

                entity.Property(e => e.HistTransCount).HasColumnName("HIST_TRANS_COUNT");

                entity.Property(e => e.HitDtlEqId)
                    .HasMaxLength(15)
                    .HasColumnName("HIT_DTL_EQ_ID");

                entity.Property(e => e.HitDtlEqName)
                    .HasMaxLength(100)
                    .HasColumnName("HIT_DTL_EQ_NAME");

                entity.Property(e => e.HitDtlEqNoOfDays).HasColumnName("HIT_DTL_EQ_NO_OF_DAYS");

                entity.Property(e => e.HitDtlEqRuleType).HasColumnName("HIT_DTL_EQ_RULE_TYPE");

                entity.Property(e => e.HitDtlEqWeight)
                    .HasColumnName("HIT_DTL_EQ_WEIGHT")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.HitDtlErId)
                    .HasMaxLength(15)
                    .HasColumnName("HIT_DTL_ER_ID");

                entity.Property(e => e.HitDtlErRank).HasColumnName("HIT_DTL_ER_RANK");

                entity.Property(e => e.HitDtlErThreshold).HasColumnName("HIT_DTL_ER_THRESHOLD");

                entity.Property(e => e.HitDtlGrpId)
                    .HasMaxLength(15)
                    .HasColumnName("HIT_DTL_GRP_ID");

                entity.Property(e => e.HitStatus)
                    .HasColumnName("HIT_STATUS")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.LocalAmount).HasColumnName("LOCAL_AMOUNT");

                entity.Property(e => e.LocalCurrency)
                    .HasMaxLength(8)
                    .HasColumnName("LOCAL_CURRENCY");

                entity.Property(e => e.ModeMn)
                    .IsRequired()
                    .HasMaxLength(1)
                    .HasColumnName("MODE_MN")
                    .HasDefaultValueSql("(N'A')");

                entity.Property(e => e.StampDttm)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("STAMP_DTTM");

                entity.Property(e => e.TranCode)
                    .HasMaxLength(8)
                    .HasColumnName("TRAN_CODE");

                entity.Property(e => e.TranDate).HasColumnName("TRAN_DATE");

                entity.Property(e => e.TranhistSqlStmt)
                    .HasMaxLength(2000)
                    .HasColumnName("TRANHIST_SQL_STMT");

                entity.Property(e => e.TransCount).HasColumnName("TRANS_COUNT");

                entity.Property(e => e.UserId)
                    .HasMaxLength(30)
                    .HasColumnName("USER_ID");
            });

            modelBuilder.Entity<D2fSsTempalerttranwlist>(entity =>
            {
                entity.HasKey(e => new { e.CompCode, e.TempAlertId, e.AlertId, e.SeqNo });

                entity.ToTable("D2F_SS_TEMPALERTTRANWLIST");

                entity.Property(e => e.CompCode)
                    .HasColumnName("COMP_CODE")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.TempAlertId)
                    .HasMaxLength(100)
                    .HasColumnName("TEMP_ALERT_ID")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AlertId).HasColumnName("ALERT_ID");

                entity.Property(e => e.SeqNo)
                    .HasColumnName("SEQ_NO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.BatchDate).HasColumnName("BATCH_DATE");

                entity.Property(e => e.BatchNo)
                    .HasMaxLength(15)
                    .HasColumnName("BATCH_NO");

                entity.Property(e => e.CifId)
                    .HasMaxLength(30)
                    .HasColumnName("CIF_ID");

                entity.Property(e => e.DetectionMethod)
                    .IsRequired()
                    .HasMaxLength(15)
                    .HasColumnName("DETECTION_METHOD")
                    .HasDefaultValueSql("(N'MC')");

                entity.Property(e => e.EqAndOrString)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("EQ_AND_OR_STRING")
                    .HasDefaultValueSql("(N'00000000000000000000')");

                entity.Property(e => e.EqApplyFullMatch).HasColumnName("EQ_APPLY_FULL_MATCH");

                entity.Property(e => e.EqApplySoundex).HasColumnName("EQ_APPLY_SOUNDEX");

                entity.Property(e => e.IdHit).HasColumnName("ID_HIT");

                entity.Property(e => e.KeyField1)
                    .HasMaxLength(30)
                    .HasColumnName("KEY_FIELD1");

                entity.Property(e => e.KeyField2)
                    .HasMaxLength(30)
                    .HasColumnName("KEY_FIELD2");

                entity.Property(e => e.ModeMn)
                    .HasMaxLength(1)
                    .HasColumnName("MODE_MN")
                    .HasDefaultValueSql("(N'A')");

                entity.Property(e => e.NameHit).HasColumnName("NAME_HIT");

                entity.Property(e => e.NoOfRowsHit).HasColumnName("NO_OF_ROWS_HIT");

                entity.Property(e => e.SearchType)
                    .IsRequired()
                    .HasMaxLength(2)
                    .HasColumnName("SEARCH_TYPE")
                    .HasDefaultValueSql("(N'T')");

                entity.Property(e => e.SqlSearchStmt)
                    .HasMaxLength(2000)
                    .HasColumnName("SQL_SEARCH_STMT");

                entity.Property(e => e.SqlWatchlistFdUsed)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("SQL_WATCHLIST_FD_USED");

                entity.Property(e => e.StampDttm)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("STAMP_DTTM");

                entity.Property(e => e.TableNameUsed)
                    .HasMaxLength(30)
                    .HasColumnName("TABLE_NAME_USED");

                entity.Property(e => e.UserId)
                    .HasMaxLength(30)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.WatchListHit)
                    .IsUnicode(false)
                    .HasColumnName("WATCH_LIST_HIT");

                entity.Property(e => e.WatchListScore1).HasColumnName("WATCH_LIST_SCORE1");

                entity.Property(e => e.WatchListScore10).HasColumnName("WATCH_LIST_SCORE10");

                entity.Property(e => e.WatchListScore11).HasColumnName("WATCH_LIST_SCORE11");

                entity.Property(e => e.WatchListScore12).HasColumnName("WATCH_LIST_SCORE12");

                entity.Property(e => e.WatchListScore13).HasColumnName("WATCH_LIST_SCORE13");

                entity.Property(e => e.WatchListScore14).HasColumnName("WATCH_LIST_SCORE14");

                entity.Property(e => e.WatchListScore15).HasColumnName("WATCH_LIST_SCORE15");

                entity.Property(e => e.WatchListScore16).HasColumnName("WATCH_LIST_SCORE16");

                entity.Property(e => e.WatchListScore2).HasColumnName("WATCH_LIST_SCORE2");

                entity.Property(e => e.WatchListScore3).HasColumnName("WATCH_LIST_SCORE3");

                entity.Property(e => e.WatchListScore4).HasColumnName("WATCH_LIST_SCORE4");

                entity.Property(e => e.WatchListScore5).HasColumnName("WATCH_LIST_SCORE5");

                entity.Property(e => e.WatchListScore6).HasColumnName("WATCH_LIST_SCORE6");

                entity.Property(e => e.WatchListScore7).HasColumnName("WATCH_LIST_SCORE7");

                entity.Property(e => e.WatchListScore8).HasColumnName("WATCH_LIST_SCORE8");

                entity.Property(e => e.WatchListScore9).HasColumnName("WATCH_LIST_SCORE9");
            });

            modelBuilder.Entity<D2fSsTempalerttranwlistdtl>(entity =>
            {
                entity.HasKey(e => new { e.CompCode, e.TempAlertId, e.AlertId, e.EntityId, e.SysId, e.AutoSeqNo });

                entity.ToTable("D2F_SS_TEMPALERTTRANWLISTDTL");

                entity.Property(e => e.CompCode)
                    .HasColumnName("COMP_CODE")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.TempAlertId)
                    .HasMaxLength(100)
                    .HasColumnName("TEMP_ALERT_ID")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AlertId).HasColumnName("ALERT_ID");

                entity.Property(e => e.EntityId)
                    .HasMaxLength(30)
                    .HasColumnName("ENTITY_ID");

                entity.Property(e => e.SysId).HasColumnName("SYS_ID");

                entity.Property(e => e.AutoSeqNo)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("AUTO_SEQ_NO");

                entity.Property(e => e.AccountNo)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("ACCOUNT_NO")
                    .HasDefaultValueSql("(N'NA')");

                entity.Property(e => e.BatchDate).HasColumnName("BATCH_DATE");

                entity.Property(e => e.Category)
                    .HasMaxLength(100)
                    .HasColumnName("CATEGORY");

                entity.Property(e => e.Categorynum)
                    .HasMaxLength(500)
                    .HasColumnName("CATEGORYNUM")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CifId)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("CIF_ID")
                    .HasDefaultValueSql("(N'NA')");

                entity.Property(e => e.ConfidenceScore)
                    .HasColumnName("CONFIDENCE_SCORE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Country)
                    .HasMaxLength(4000)
                    .HasColumnName("COUNTRY");

                entity.Property(e => e.Dobs)
                    .HasMaxLength(500)
                    .HasColumnName("DOBS");

                entity.Property(e => e.EntityType)
                    .HasMaxLength(20)
                    .HasColumnName("ENTITY_TYPE")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FalsePositiveInd).HasColumnName("FALSE_POSITIVE_IND");

                entity.Property(e => e.Gender)
                    .HasMaxLength(20)
                    .HasColumnName("GENDER")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.HitIdOrName)
                    .HasColumnName("HIT_ID_OR_NAME")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.IdValue)
                    .HasMaxLength(150)
                    .HasColumnName("ID_VALUE");

                entity.Property(e => e.InfoSource)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("INFO_SOURCE")
                    .HasDefaultValueSql("(N'DJ')");

                entity.Property(e => e.InvestigateStatus).HasColumnName("INVESTIGATE_STATUS");

                entity.Property(e => e.LastUptDate).HasColumnName("LAST_UPT_DATE");

                entity.Property(e => e.LastUptTime).HasColumnName("LAST_UPT_TIME");

                entity.Property(e => e.Match)
                    .HasMaxLength(20)
                    .HasColumnName("MATCH")
                    .HasDefaultValueSql("('NA')");

                entity.Property(e => e.MatchPercent).HasColumnName("MATCH_PERCENT");

                entity.Property(e => e.ModeMn)
                    .HasMaxLength(1)
                    .HasColumnName("MODE_MN")
                    .HasDefaultValueSql("('A')");

                entity.Property(e => e.NameType)
                    .HasMaxLength(255)
                    .HasColumnName("NAME_TYPE");

                entity.Property(e => e.Namesource)
                    .HasMaxLength(20)
                    .HasColumnName("NAMESOURCE");

                entity.Property(e => e.OriginalScriptName)
                    .HasMaxLength(300)
                    .HasColumnName("ORIGINAL_SCRIPT_NAME")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Remarks)
                    .HasMaxLength(2000)
                    .HasColumnName("REMARKS");

                entity.Property(e => e.Sanction)
                    .HasMaxLength(1024)
                    .HasColumnName("SANCTION")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SingleStringName)
                    .HasMaxLength(255)
                    .HasColumnName("SINGLE_STRING_NAME");

                entity.Property(e => e.Subcategory)
                    .HasMaxLength(50)
                    .HasColumnName("SUBCATEGORY")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TypeOfExposition).HasColumnName("TYPE_OF_EXPOSITION");

                entity.Property(e => e.UserId)
                    .HasMaxLength(30)
                    .HasColumnName("USER_ID");
            });

            modelBuilder.Entity<D2fWlIdTempalerttran>(entity =>
            {
                entity.HasKey(e => new { e.CompCode, e.TempAlertId, e.AlertId });

                entity.ToTable("D2F_WL_ID_TEMPALERTTRAN");

                entity.Property(e => e.CompCode)
                    .HasColumnName("COMP_CODE")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.TempAlertId)
                    .HasMaxLength(100)
                    .HasColumnName("TEMP_ALERT_ID")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AlertId).HasColumnName("ALERT_ID");

                entity.Property(e => e.AccountName)
                    .HasMaxLength(100)
                    .HasColumnName("ACCOUNT_NAME");

                entity.Property(e => e.AccountNo)
                    .HasMaxLength(30)
                    .HasColumnName("ACCOUNT_NO");

                entity.Property(e => e.ActionGuideNo).HasColumnName("ACTION_GUIDE_NO");

                entity.Property(e => e.AlertBr)
                    .HasMaxLength(20)
                    .HasColumnName("ALERT_BR");

                entity.Property(e => e.AlertHitStatus)
                    .HasColumnName("ALERT_HIT_STATUS")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.AmlFraudInd)
                    .IsRequired()
                    .HasMaxLength(1)
                    .HasColumnName("AML_FRAUD_IND")
                    .HasDefaultValueSql("(N'A')");

                entity.Property(e => e.AutoSeqNo)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("AUTO_SEQ_NO");

                entity.Property(e => e.BatchDate).HasColumnName("BATCH_DATE");

                entity.Property(e => e.BatchNo)
                    .HasMaxLength(15)
                    .HasColumnName("BATCH_NO");

                entity.Property(e => e.BrCode)
                    .HasMaxLength(20)
                    .HasColumnName("BR_CODE");

                entity.Property(e => e.CifId)
                    .HasMaxLength(30)
                    .HasColumnName("CIF_ID");

                entity.Property(e => e.CreditDebit).HasColumnName("CREDIT_DEBIT");

                entity.Property(e => e.DismissDate).HasColumnName("DISMISS_DATE");

                entity.Property(e => e.DismissInd).HasColumnName("DISMISS_IND");

                entity.Property(e => e.DismissTime).HasColumnName("DISMISS_TIME");

                entity.Property(e => e.DismissViewBy)
                    .HasMaxLength(30)
                    .HasColumnName("DISMISS_VIEW_BY")
                    .HasDefaultValueSql("(N'None')");

                entity.Property(e => e.DismissViewDate).HasColumnName("DISMISS_VIEW_DATE");

                entity.Property(e => e.DismissViewTime).HasColumnName("DISMISS_VIEW_TIME");

                entity.Property(e => e.EstablishDate).HasColumnName("ESTABLISH_DATE");

                entity.Property(e => e.EstablishTime).HasColumnName("ESTABLISH_TIME");

                entity.Property(e => e.ForeignAmount).HasColumnName("FOREIGN_AMOUNT");

                entity.Property(e => e.FxRate).HasColumnName("FX_RATE");

                entity.Property(e => e.GroupAlertInd).HasColumnName("GROUP_ALERT_IND");

                entity.Property(e => e.HitAssessmentInd)
                    .IsRequired()
                    .HasMaxLength(8)
                    .HasColumnName("HIT_ASSESSMENT_IND")
                    .HasDefaultValueSql("(N'00000000')");

                entity.Property(e => e.HitDate).HasColumnName("HIT_DATE");

                entity.Property(e => e.HitEqId)
                    .HasMaxLength(15)
                    .HasColumnName("HIT_EQ_ID");

                entity.Property(e => e.HitEqIdMultiple)
                    .HasMaxLength(512)
                    .HasColumnName("HIT_EQ_ID_MULTIPLE");

                entity.Property(e => e.HitEqNoOfDays).HasColumnName("HIT_EQ_NO_OF_DAYS");

                entity.Property(e => e.HitEqWeight)
                    .HasColumnName("HIT_EQ_WEIGHT")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.HitErId)
                    .HasMaxLength(15)
                    .HasColumnName("HIT_ER_ID");

                entity.Property(e => e.HitErName)
                    .HasMaxLength(100)
                    .HasColumnName("HIT_ER_NAME");

                entity.Property(e => e.HitErThreshold).HasColumnName("HIT_ER_THRESHOLD");

                entity.Property(e => e.HitGrpId)
                    .HasMaxLength(15)
                    .HasColumnName("HIT_GRP_ID");

                entity.Property(e => e.HitRanking).HasColumnName("HIT_RANKING");

                entity.Property(e => e.HitRlRiskLevel)
                    .HasMaxLength(15)
                    .HasColumnName("HIT_RL_RISK_LEVEL");

                entity.Property(e => e.HqTranInd).HasColumnName("HQ_TRAN_IND");

                entity.Property(e => e.LastStatus)
                    .HasColumnName("LAST_STATUS")
                    .HasDefaultValueSql("((100))");

                entity.Property(e => e.LastUptDate).HasColumnName("LAST_UPT_DATE");

                entity.Property(e => e.LastUptTime).HasColumnName("LAST_UPT_TIME");

                entity.Property(e => e.LocalAmount).HasColumnName("LOCAL_AMOUNT");

                entity.Property(e => e.LocalCurrency)
                    .HasMaxLength(8)
                    .HasColumnName("LOCAL_CURRENCY");

                entity.Property(e => e.ModeMn)
                    .HasMaxLength(1)
                    .HasColumnName("MODE_MN")
                    .HasDefaultValueSql("(N'A')");

                entity.Property(e => e.ParentAlertId).HasColumnName("PARENT_ALERT_ID");

                entity.Property(e => e.PostingDate).HasColumnName("POSTING_DATE");

                entity.Property(e => e.PrimaryAlertRec).HasColumnName("PRIMARY_ALERT_REC");

                entity.Property(e => e.ProductCode)
                    .HasMaxLength(8)
                    .HasColumnName("PRODUCT_CODE");

                entity.Property(e => e.RecIdentityNo)
                    .HasMaxLength(20)
                    .HasColumnName("REC_IDENTITY_NO");

                entity.Property(e => e.RecType)
                    .HasMaxLength(8)
                    .HasColumnName("REC_TYPE");

                entity.Property(e => e.ReferanceDt)
                    .HasMaxLength(10)
                    .HasColumnName("REFERANCE_DT");

                entity.Property(e => e.ReferanceNo)
                    .HasMaxLength(30)
                    .HasColumnName("REFERANCE_NO");

                entity.Property(e => e.RuserId)
                    .HasMaxLength(30)
                    .HasColumnName("RUSER_ID");

                entity.Property(e => e.StaffInd).HasColumnName("STAFF_IND");

                entity.Property(e => e.StampDttm)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("STAMP_DTTM");

                entity.Property(e => e.Status)
                    .HasColumnName("STATUS")
                    .HasDefaultValueSql("((100))");

                entity.Property(e => e.StatusUptDt).HasColumnName("STATUS_UPT_DT");

                entity.Property(e => e.TranCode)
                    .HasMaxLength(8)
                    .HasColumnName("TRAN_CODE");

                entity.Property(e => e.TranDate).HasColumnName("TRAN_DATE");

                entity.Property(e => e.TranLocation)
                    .HasMaxLength(20)
                    .HasColumnName("TRAN_LOCATION");

                entity.Property(e => e.TranReversalInd).HasColumnName("TRAN_REVERSAL_IND");

                entity.Property(e => e.TransCount).HasColumnName("TRANS_COUNT");

                entity.Property(e => e.UserId)
                    .HasMaxLength(30)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.UserUptCount).HasColumnName("USER_UPT_COUNT");

                entity.Property(e => e.ValueDate).HasColumnName("VALUE_DATE");
            });

            modelBuilder.Entity<D2fWlIdTempalerttrandtlhit>(entity =>
            {
                entity.HasKey(e => new { e.CompCode, e.TempAlertId, e.AlertId, e.AlertSeqno });

                entity.ToTable("D2F_WL_ID_TEMPALERTTRANDTLHIT");

                entity.Property(e => e.CompCode)
                    .HasColumnName("COMP_CODE")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.TempAlertId)
                    .HasMaxLength(100)
                    .HasColumnName("TEMP_ALERT_ID")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AlertId).HasColumnName("ALERT_ID");

                entity.Property(e => e.AlertSeqno).HasColumnName("ALERT_SEQNO");

                entity.Property(e => e.AccountNo)
                    .HasMaxLength(30)
                    .HasColumnName("ACCOUNT_NO");

                entity.Property(e => e.BatchDate).HasColumnName("BATCH_DATE");

                entity.Property(e => e.BatchNo)
                    .HasMaxLength(15)
                    .HasColumnName("BATCH_NO");

                entity.Property(e => e.CrAmount).HasColumnName("CR_AMOUNT");

                entity.Property(e => e.CreditDebit)
                    .HasColumnName("CREDIT_DEBIT")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.DrAmount).HasColumnName("DR_AMOUNT");

                entity.Property(e => e.FilterTranhistStatus).HasColumnName("FILTER_TRANHIST_STATUS");

                entity.Property(e => e.ForeignAmount).HasColumnName("FOREIGN_AMOUNT");

                entity.Property(e => e.FxRate)
                    .HasColumnName("FX_RATE")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.HistForeignAmount).HasColumnName("HIST_FOREIGN_AMOUNT");

                entity.Property(e => e.HistLocalAmount).HasColumnName("HIST_LOCAL_AMOUNT");

                entity.Property(e => e.HistTransCount).HasColumnName("HIST_TRANS_COUNT");

                entity.Property(e => e.HitDtlEqId)
                    .HasMaxLength(15)
                    .HasColumnName("HIT_DTL_EQ_ID");

                entity.Property(e => e.HitDtlEqName)
                    .HasMaxLength(100)
                    .HasColumnName("HIT_DTL_EQ_NAME");

                entity.Property(e => e.HitDtlEqNoOfDays).HasColumnName("HIT_DTL_EQ_NO_OF_DAYS");

                entity.Property(e => e.HitDtlEqRuleType).HasColumnName("HIT_DTL_EQ_RULE_TYPE");

                entity.Property(e => e.HitDtlEqWeight)
                    .HasColumnName("HIT_DTL_EQ_WEIGHT")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.HitDtlErId)
                    .HasMaxLength(15)
                    .HasColumnName("HIT_DTL_ER_ID");

                entity.Property(e => e.HitDtlErRank).HasColumnName("HIT_DTL_ER_RANK");

                entity.Property(e => e.HitDtlErThreshold).HasColumnName("HIT_DTL_ER_THRESHOLD");

                entity.Property(e => e.HitDtlGrpId)
                    .HasMaxLength(15)
                    .HasColumnName("HIT_DTL_GRP_ID");

                entity.Property(e => e.HitStatus)
                    .HasColumnName("HIT_STATUS")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.LocalAmount).HasColumnName("LOCAL_AMOUNT");

                entity.Property(e => e.LocalCurrency)
                    .HasMaxLength(8)
                    .HasColumnName("LOCAL_CURRENCY");

                entity.Property(e => e.ModeMn)
                    .IsRequired()
                    .HasMaxLength(1)
                    .HasColumnName("MODE_MN")
                    .HasDefaultValueSql("(N'A')");

                entity.Property(e => e.StampDttm)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("STAMP_DTTM");

                entity.Property(e => e.TranCode)
                    .HasMaxLength(8)
                    .HasColumnName("TRAN_CODE");

                entity.Property(e => e.TranDate).HasColumnName("TRAN_DATE");

                entity.Property(e => e.TranhistSqlStmt)
                    .HasMaxLength(2000)
                    .HasColumnName("TRANHIST_SQL_STMT");

                entity.Property(e => e.TransCount).HasColumnName("TRANS_COUNT");

                entity.Property(e => e.UserId)
                    .HasMaxLength(30)
                    .HasColumnName("USER_ID");
            });

            modelBuilder.Entity<D2fWlIdTempalerttranwlist>(entity =>
            {
                entity.HasKey(e => new { e.CompCode, e.TempAlertId, e.AlertId, e.SeqNo });

                entity.ToTable("D2F_WL_ID_TEMPALERTTRANWLIST");

                entity.Property(e => e.CompCode)
                    .HasColumnName("COMP_CODE")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.TempAlertId)
                    .HasMaxLength(100)
                    .HasColumnName("TEMP_ALERT_ID")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AlertId).HasColumnName("ALERT_ID");

                entity.Property(e => e.SeqNo)
                    .HasColumnName("SEQ_NO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.BatchDate).HasColumnName("BATCH_DATE");

                entity.Property(e => e.BatchNo)
                    .HasMaxLength(15)
                    .HasColumnName("BATCH_NO");

                entity.Property(e => e.CifId)
                    .HasMaxLength(30)
                    .HasColumnName("CIF_ID");

                entity.Property(e => e.DetectionMethod)
                    .IsRequired()
                    .HasMaxLength(15)
                    .HasColumnName("DETECTION_METHOD")
                    .HasDefaultValueSql("(N'MC')");

                entity.Property(e => e.EqAndOrString)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("EQ_AND_OR_STRING")
                    .HasDefaultValueSql("(N'00000000000000000000')");

                entity.Property(e => e.EqApplyFullMatch).HasColumnName("EQ_APPLY_FULL_MATCH");

                entity.Property(e => e.EqApplySoundex).HasColumnName("EQ_APPLY_SOUNDEX");

                entity.Property(e => e.IdHit).HasColumnName("ID_HIT");

                entity.Property(e => e.KeyField1)
                    .HasMaxLength(30)
                    .HasColumnName("KEY_FIELD1");

                entity.Property(e => e.KeyField2)
                    .HasMaxLength(30)
                    .HasColumnName("KEY_FIELD2");

                entity.Property(e => e.ModeMn)
                    .HasMaxLength(1)
                    .HasColumnName("MODE_MN")
                    .HasDefaultValueSql("(N'A')");

                entity.Property(e => e.NameHit).HasColumnName("NAME_HIT");

                entity.Property(e => e.NoOfRowsHit).HasColumnName("NO_OF_ROWS_HIT");

                entity.Property(e => e.SearchType)
                    .IsRequired()
                    .HasMaxLength(2)
                    .HasColumnName("SEARCH_TYPE")
                    .HasDefaultValueSql("(N'T')");

                entity.Property(e => e.SqlSearchStmt)
                    .HasMaxLength(2000)
                    .HasColumnName("SQL_SEARCH_STMT");

                entity.Property(e => e.SqlWatchlistFdUsed)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("SQL_WATCHLIST_FD_USED");

                entity.Property(e => e.StampDttm)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("STAMP_DTTM");

                entity.Property(e => e.TableNameUsed)
                    .HasMaxLength(30)
                    .HasColumnName("TABLE_NAME_USED");

                entity.Property(e => e.UserId)
                    .HasMaxLength(30)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.WatchListHit)
                    .IsUnicode(false)
                    .HasColumnName("WATCH_LIST_HIT");

                entity.Property(e => e.WatchListScore1).HasColumnName("WATCH_LIST_SCORE1");

                entity.Property(e => e.WatchListScore10).HasColumnName("WATCH_LIST_SCORE10");

                entity.Property(e => e.WatchListScore11).HasColumnName("WATCH_LIST_SCORE11");

                entity.Property(e => e.WatchListScore12).HasColumnName("WATCH_LIST_SCORE12");

                entity.Property(e => e.WatchListScore13).HasColumnName("WATCH_LIST_SCORE13");

                entity.Property(e => e.WatchListScore14).HasColumnName("WATCH_LIST_SCORE14");

                entity.Property(e => e.WatchListScore15).HasColumnName("WATCH_LIST_SCORE15");

                entity.Property(e => e.WatchListScore16).HasColumnName("WATCH_LIST_SCORE16");

                entity.Property(e => e.WatchListScore2).HasColumnName("WATCH_LIST_SCORE2");

                entity.Property(e => e.WatchListScore3).HasColumnName("WATCH_LIST_SCORE3");

                entity.Property(e => e.WatchListScore4).HasColumnName("WATCH_LIST_SCORE4");

                entity.Property(e => e.WatchListScore5).HasColumnName("WATCH_LIST_SCORE5");

                entity.Property(e => e.WatchListScore6).HasColumnName("WATCH_LIST_SCORE6");

                entity.Property(e => e.WatchListScore7).HasColumnName("WATCH_LIST_SCORE7");

                entity.Property(e => e.WatchListScore8).HasColumnName("WATCH_LIST_SCORE8");

                entity.Property(e => e.WatchListScore9).HasColumnName("WATCH_LIST_SCORE9");
            });

            modelBuilder.Entity<D2fWlIdTempalerttranwlistdtl>(entity =>
            {
                entity.HasKey(e => new { e.CompCode, e.TempAlertId, e.AlertId, e.EntityId, e.SysId, e.AutoSeqNo });

                entity.ToTable("D2F_WL_ID_TEMPALERTTRANWLISTDTL");

                entity.Property(e => e.CompCode)
                    .HasColumnName("COMP_CODE")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.TempAlertId)
                    .HasMaxLength(100)
                    .HasColumnName("TEMP_ALERT_ID")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AlertId).HasColumnName("ALERT_ID");

                entity.Property(e => e.EntityId)
                    .HasMaxLength(30)
                    .HasColumnName("ENTITY_ID");

                entity.Property(e => e.SysId).HasColumnName("SYS_ID");

                entity.Property(e => e.AutoSeqNo)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("AUTO_SEQ_NO");

                entity.Property(e => e.AccountNo)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("ACCOUNT_NO")
                    .HasDefaultValueSql("(N'NA')");

                entity.Property(e => e.BatchDate).HasColumnName("BATCH_DATE");

                entity.Property(e => e.Category)
                    .HasMaxLength(100)
                    .HasColumnName("CATEGORY");

                entity.Property(e => e.Categorynum)
                    .HasMaxLength(500)
                    .HasColumnName("CATEGORYNUM")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CifId)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("CIF_ID")
                    .HasDefaultValueSql("(N'NA')");

                entity.Property(e => e.ConfidenceScore)
                    .HasColumnName("CONFIDENCE_SCORE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Country)
                    .HasMaxLength(4000)
                    .HasColumnName("COUNTRY");

                entity.Property(e => e.Dobs)
                    .HasMaxLength(500)
                    .HasColumnName("DOBS");

                entity.Property(e => e.EntityType)
                    .HasMaxLength(20)
                    .HasColumnName("ENTITY_TYPE")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FalsePositiveInd).HasColumnName("FALSE_POSITIVE_IND");

                entity.Property(e => e.Gender)
                    .HasMaxLength(20)
                    .HasColumnName("GENDER")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.HitIdOrName)
                    .HasColumnName("HIT_ID_OR_NAME")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.IdValue)
                    .HasMaxLength(150)
                    .HasColumnName("ID_VALUE");

                entity.Property(e => e.InfoSource)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("INFO_SOURCE")
                    .HasDefaultValueSql("(N'DJ')");

                entity.Property(e => e.InvestigateStatus).HasColumnName("INVESTIGATE_STATUS");

                entity.Property(e => e.LastUptDate).HasColumnName("LAST_UPT_DATE");

                entity.Property(e => e.LastUptTime).HasColumnName("LAST_UPT_TIME");

                entity.Property(e => e.Match)
                    .HasMaxLength(20)
                    .HasColumnName("MATCH")
                    .HasDefaultValueSql("('NA')");

                entity.Property(e => e.MatchPercent).HasColumnName("MATCH_PERCENT");

                entity.Property(e => e.ModeMn)
                    .HasMaxLength(1)
                    .HasColumnName("MODE_MN")
                    .HasDefaultValueSql("('A')");

                entity.Property(e => e.NameType)
                    .HasMaxLength(255)
                    .HasColumnName("NAME_TYPE");

                entity.Property(e => e.Namesource)
                    .HasMaxLength(20)
                    .HasColumnName("NAMESOURCE");

                entity.Property(e => e.Remarks)
                    .HasMaxLength(2000)
                    .HasColumnName("REMARKS");

                entity.Property(e => e.Sanction)
                    .HasMaxLength(1024)
                    .HasColumnName("SANCTION")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SingleStringName)
                    .HasMaxLength(255)
                    .HasColumnName("SINGLE_STRING_NAME");

                entity.Property(e => e.Subcategory)
                    .HasMaxLength(50)
                    .HasColumnName("SUBCATEGORY")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TypeOfExposition).HasColumnName("TYPE_OF_EXPOSITION");

                entity.Property(e => e.UserId)
                    .HasMaxLength(30)
                    .HasColumnName("USER_ID");
            });

            modelBuilder.Entity<D2fWlTempalerttran>(entity =>
            {
                entity.HasKey(e => new { e.CompCode, e.TempAlertId, e.AlertId });

                entity.ToTable("D2F_WL_TEMPALERTTRAN");

                entity.Property(e => e.CompCode)
                    .HasColumnName("COMP_CODE")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.TempAlertId)
                    .HasMaxLength(100)
                    .HasColumnName("TEMP_ALERT_ID")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AlertId).HasColumnName("ALERT_ID");

                entity.Property(e => e.AccountName)
                    .HasMaxLength(100)
                    .HasColumnName("ACCOUNT_NAME");

                entity.Property(e => e.AccountNo)
                    .HasMaxLength(30)
                    .HasColumnName("ACCOUNT_NO");

                entity.Property(e => e.ActionGuideNo).HasColumnName("ACTION_GUIDE_NO");

                entity.Property(e => e.AlertBr)
                    .HasMaxLength(20)
                    .HasColumnName("ALERT_BR");

                entity.Property(e => e.AlertHitStatus)
                    .HasColumnName("ALERT_HIT_STATUS")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.AmlFraudInd)
                    .IsRequired()
                    .HasMaxLength(1)
                    .HasColumnName("AML_FRAUD_IND")
                    .HasDefaultValueSql("(N'A')");

                entity.Property(e => e.AutoSeqNo)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("AUTO_SEQ_NO");

                entity.Property(e => e.BatchDate).HasColumnName("BATCH_DATE");

                entity.Property(e => e.BatchNo)
                    .HasMaxLength(15)
                    .HasColumnName("BATCH_NO");

                entity.Property(e => e.BrCode)
                    .HasMaxLength(20)
                    .HasColumnName("BR_CODE");

                entity.Property(e => e.CifId)
                    .HasMaxLength(30)
                    .HasColumnName("CIF_ID");

                entity.Property(e => e.CreditDebit).HasColumnName("CREDIT_DEBIT");

                entity.Property(e => e.DismissDate).HasColumnName("DISMISS_DATE");

                entity.Property(e => e.DismissInd).HasColumnName("DISMISS_IND");

                entity.Property(e => e.DismissTime).HasColumnName("DISMISS_TIME");

                entity.Property(e => e.DismissViewBy)
                    .HasMaxLength(30)
                    .HasColumnName("DISMISS_VIEW_BY")
                    .HasDefaultValueSql("(N'None')");

                entity.Property(e => e.DismissViewDate).HasColumnName("DISMISS_VIEW_DATE");

                entity.Property(e => e.DismissViewTime).HasColumnName("DISMISS_VIEW_TIME");

                entity.Property(e => e.EstablishDate).HasColumnName("ESTABLISH_DATE");

                entity.Property(e => e.EstablishTime).HasColumnName("ESTABLISH_TIME");

                entity.Property(e => e.ForeignAmount).HasColumnName("FOREIGN_AMOUNT");

                entity.Property(e => e.FxRate).HasColumnName("FX_RATE");

                entity.Property(e => e.GroupAlertInd).HasColumnName("GROUP_ALERT_IND");

                entity.Property(e => e.HitAssessmentInd)
                    .IsRequired()
                    .HasMaxLength(8)
                    .HasColumnName("HIT_ASSESSMENT_IND")
                    .HasDefaultValueSql("(N'00000000')");

                entity.Property(e => e.HitDate).HasColumnName("HIT_DATE");

                entity.Property(e => e.HitEqId)
                    .HasMaxLength(15)
                    .HasColumnName("HIT_EQ_ID");

                entity.Property(e => e.HitEqIdMultiple)
                    .HasMaxLength(512)
                    .HasColumnName("HIT_EQ_ID_MULTIPLE");

                entity.Property(e => e.HitEqNoOfDays).HasColumnName("HIT_EQ_NO_OF_DAYS");

                entity.Property(e => e.HitEqWeight)
                    .HasColumnName("HIT_EQ_WEIGHT")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.HitErId)
                    .HasMaxLength(15)
                    .HasColumnName("HIT_ER_ID");

                entity.Property(e => e.HitErName)
                    .HasMaxLength(100)
                    .HasColumnName("HIT_ER_NAME");

                entity.Property(e => e.HitErThreshold).HasColumnName("HIT_ER_THRESHOLD");

                entity.Property(e => e.HitGrpId)
                    .HasMaxLength(15)
                    .HasColumnName("HIT_GRP_ID");

                entity.Property(e => e.HitRanking).HasColumnName("HIT_RANKING");

                entity.Property(e => e.HitRlRiskLevel)
                    .HasMaxLength(15)
                    .HasColumnName("HIT_RL_RISK_LEVEL");

                entity.Property(e => e.HqTranInd).HasColumnName("HQ_TRAN_IND");

                entity.Property(e => e.LastStatus)
                    .HasColumnName("LAST_STATUS")
                    .HasDefaultValueSql("((100))");

                entity.Property(e => e.LastUptDate).HasColumnName("LAST_UPT_DATE");

                entity.Property(e => e.LastUptTime).HasColumnName("LAST_UPT_TIME");

                entity.Property(e => e.LocalAmount).HasColumnName("LOCAL_AMOUNT");

                entity.Property(e => e.LocalCurrency)
                    .HasMaxLength(8)
                    .HasColumnName("LOCAL_CURRENCY");

                entity.Property(e => e.ModeMn)
                    .HasMaxLength(1)
                    .HasColumnName("MODE_MN")
                    .HasDefaultValueSql("(N'A')");

                entity.Property(e => e.ParentAlertId).HasColumnName("PARENT_ALERT_ID");

                entity.Property(e => e.PostingDate).HasColumnName("POSTING_DATE");

                entity.Property(e => e.PrimaryAlertRec).HasColumnName("PRIMARY_ALERT_REC");

                entity.Property(e => e.ProductCode)
                    .HasMaxLength(8)
                    .HasColumnName("PRODUCT_CODE");

                entity.Property(e => e.RecIdentityNo)
                    .HasMaxLength(20)
                    .HasColumnName("REC_IDENTITY_NO");

                entity.Property(e => e.RecType)
                    .HasMaxLength(8)
                    .HasColumnName("REC_TYPE");

                entity.Property(e => e.ReferanceDt)
                    .HasMaxLength(10)
                    .HasColumnName("REFERANCE_DT");

                entity.Property(e => e.ReferanceNo)
                    .HasMaxLength(30)
                    .HasColumnName("REFERANCE_NO");

                entity.Property(e => e.RuserId)
                    .HasMaxLength(30)
                    .HasColumnName("RUSER_ID");

                entity.Property(e => e.StaffInd).HasColumnName("STAFF_IND");

                entity.Property(e => e.StampDttm)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("STAMP_DTTM");

                entity.Property(e => e.Status)
                    .HasColumnName("STATUS")
                    .HasDefaultValueSql("((100))");

                entity.Property(e => e.StatusUptDt).HasColumnName("STATUS_UPT_DT");

                entity.Property(e => e.TranCode)
                    .HasMaxLength(8)
                    .HasColumnName("TRAN_CODE");

                entity.Property(e => e.TranDate).HasColumnName("TRAN_DATE");

                entity.Property(e => e.TranLocation)
                    .HasMaxLength(20)
                    .HasColumnName("TRAN_LOCATION");

                entity.Property(e => e.TranReversalInd).HasColumnName("TRAN_REVERSAL_IND");

                entity.Property(e => e.TransCount).HasColumnName("TRANS_COUNT");

                entity.Property(e => e.UserId)
                    .HasMaxLength(30)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.UserUptCount).HasColumnName("USER_UPT_COUNT");

                entity.Property(e => e.ValueDate).HasColumnName("VALUE_DATE");
            });

            modelBuilder.Entity<D2fWlTempalerttrandtlhit>(entity =>
            {
                entity.HasKey(e => new { e.CompCode, e.TempAlertId, e.AlertId, e.AlertSeqno });

                entity.ToTable("D2F_WL_TEMPALERTTRANDTLHIT");

                entity.Property(e => e.CompCode)
                    .HasColumnName("COMP_CODE")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.TempAlertId)
                    .HasMaxLength(100)
                    .HasColumnName("TEMP_ALERT_ID")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AlertId).HasColumnName("ALERT_ID");

                entity.Property(e => e.AlertSeqno).HasColumnName("ALERT_SEQNO");

                entity.Property(e => e.AccountNo)
                    .HasMaxLength(30)
                    .HasColumnName("ACCOUNT_NO");

                entity.Property(e => e.BatchDate).HasColumnName("BATCH_DATE");

                entity.Property(e => e.BatchNo)
                    .HasMaxLength(15)
                    .HasColumnName("BATCH_NO");

                entity.Property(e => e.CrAmount).HasColumnName("CR_AMOUNT");

                entity.Property(e => e.CreditDebit)
                    .HasColumnName("CREDIT_DEBIT")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.DrAmount).HasColumnName("DR_AMOUNT");

                entity.Property(e => e.FilterTranhistStatus).HasColumnName("FILTER_TRANHIST_STATUS");

                entity.Property(e => e.ForeignAmount).HasColumnName("FOREIGN_AMOUNT");

                entity.Property(e => e.FxRate)
                    .HasColumnName("FX_RATE")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.HistForeignAmount).HasColumnName("HIST_FOREIGN_AMOUNT");

                entity.Property(e => e.HistLocalAmount).HasColumnName("HIST_LOCAL_AMOUNT");

                entity.Property(e => e.HistTransCount).HasColumnName("HIST_TRANS_COUNT");

                entity.Property(e => e.HitDtlEqId)
                    .HasMaxLength(15)
                    .HasColumnName("HIT_DTL_EQ_ID");

                entity.Property(e => e.HitDtlEqName)
                    .HasMaxLength(100)
                    .HasColumnName("HIT_DTL_EQ_NAME");

                entity.Property(e => e.HitDtlEqNoOfDays).HasColumnName("HIT_DTL_EQ_NO_OF_DAYS");

                entity.Property(e => e.HitDtlEqRuleType).HasColumnName("HIT_DTL_EQ_RULE_TYPE");

                entity.Property(e => e.HitDtlEqWeight)
                    .HasColumnName("HIT_DTL_EQ_WEIGHT")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.HitDtlErId)
                    .HasMaxLength(15)
                    .HasColumnName("HIT_DTL_ER_ID");

                entity.Property(e => e.HitDtlErRank).HasColumnName("HIT_DTL_ER_RANK");

                entity.Property(e => e.HitDtlErThreshold).HasColumnName("HIT_DTL_ER_THRESHOLD");

                entity.Property(e => e.HitDtlGrpId)
                    .HasMaxLength(15)
                    .HasColumnName("HIT_DTL_GRP_ID");

                entity.Property(e => e.HitStatus)
                    .HasColumnName("HIT_STATUS")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.LocalAmount).HasColumnName("LOCAL_AMOUNT");

                entity.Property(e => e.LocalCurrency)
                    .HasMaxLength(8)
                    .HasColumnName("LOCAL_CURRENCY");

                entity.Property(e => e.ModeMn)
                    .IsRequired()
                    .HasMaxLength(1)
                    .HasColumnName("MODE_MN")
                    .HasDefaultValueSql("(N'A')");

                entity.Property(e => e.StampDttm)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("STAMP_DTTM");

                entity.Property(e => e.TranCode)
                    .HasMaxLength(8)
                    .HasColumnName("TRAN_CODE");

                entity.Property(e => e.TranDate).HasColumnName("TRAN_DATE");

                entity.Property(e => e.TranhistSqlStmt)
                    .HasMaxLength(2000)
                    .HasColumnName("TRANHIST_SQL_STMT");

                entity.Property(e => e.TransCount).HasColumnName("TRANS_COUNT");

                entity.Property(e => e.UserId)
                    .HasMaxLength(30)
                    .HasColumnName("USER_ID");
            });

            modelBuilder.Entity<D2fWlTempalerttranwlist>(entity =>
            {
                entity.HasKey(e => new { e.CompCode, e.TempAlertId, e.AlertId, e.SeqNo });

                entity.ToTable("D2F_WL_TEMPALERTTRANWLIST");

                entity.Property(e => e.CompCode)
                    .HasColumnName("COMP_CODE")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.TempAlertId)
                    .HasMaxLength(100)
                    .HasColumnName("TEMP_ALERT_ID")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AlertId).HasColumnName("ALERT_ID");

                entity.Property(e => e.SeqNo)
                    .HasColumnName("SEQ_NO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.BatchDate).HasColumnName("BATCH_DATE");

                entity.Property(e => e.BatchNo)
                    .HasMaxLength(15)
                    .HasColumnName("BATCH_NO");

                entity.Property(e => e.CifId)
                    .HasMaxLength(30)
                    .HasColumnName("CIF_ID");

                entity.Property(e => e.DetectionMethod)
                    .IsRequired()
                    .HasMaxLength(15)
                    .HasColumnName("DETECTION_METHOD")
                    .HasDefaultValueSql("(N'MC')");

                entity.Property(e => e.EqAndOrString)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("EQ_AND_OR_STRING")
                    .HasDefaultValueSql("(N'00000000000000000000')");

                entity.Property(e => e.EqApplyFullMatch).HasColumnName("EQ_APPLY_FULL_MATCH");

                entity.Property(e => e.EqApplySoundex).HasColumnName("EQ_APPLY_SOUNDEX");

                entity.Property(e => e.IdHit).HasColumnName("ID_HIT");

                entity.Property(e => e.KeyField1)
                    .HasMaxLength(30)
                    .HasColumnName("KEY_FIELD1");

                entity.Property(e => e.KeyField2)
                    .HasMaxLength(30)
                    .HasColumnName("KEY_FIELD2");

                entity.Property(e => e.ModeMn)
                    .HasMaxLength(1)
                    .HasColumnName("MODE_MN")
                    .HasDefaultValueSql("(N'A')");

                entity.Property(e => e.NameHit).HasColumnName("NAME_HIT");

                entity.Property(e => e.NoOfRowsHit).HasColumnName("NO_OF_ROWS_HIT");

                entity.Property(e => e.SearchType)
                    .IsRequired()
                    .HasMaxLength(2)
                    .HasColumnName("SEARCH_TYPE")
                    .HasDefaultValueSql("(N'T')");

                entity.Property(e => e.SqlSearchStmt)
                    .HasMaxLength(2000)
                    .HasColumnName("SQL_SEARCH_STMT");

                entity.Property(e => e.SqlWatchlistFdUsed)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("SQL_WATCHLIST_FD_USED");

                entity.Property(e => e.StampDttm)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("STAMP_DTTM");

                entity.Property(e => e.TableNameUsed)
                    .HasMaxLength(30)
                    .HasColumnName("TABLE_NAME_USED");

                entity.Property(e => e.UserId)
                    .HasMaxLength(30)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.WatchListHit)
                    .IsUnicode(false)
                    .HasColumnName("WATCH_LIST_HIT");

                entity.Property(e => e.WatchListScore1).HasColumnName("WATCH_LIST_SCORE1");

                entity.Property(e => e.WatchListScore10).HasColumnName("WATCH_LIST_SCORE10");

                entity.Property(e => e.WatchListScore11).HasColumnName("WATCH_LIST_SCORE11");

                entity.Property(e => e.WatchListScore12).HasColumnName("WATCH_LIST_SCORE12");

                entity.Property(e => e.WatchListScore13).HasColumnName("WATCH_LIST_SCORE13");

                entity.Property(e => e.WatchListScore14).HasColumnName("WATCH_LIST_SCORE14");

                entity.Property(e => e.WatchListScore15).HasColumnName("WATCH_LIST_SCORE15");

                entity.Property(e => e.WatchListScore16).HasColumnName("WATCH_LIST_SCORE16");

                entity.Property(e => e.WatchListScore2).HasColumnName("WATCH_LIST_SCORE2");

                entity.Property(e => e.WatchListScore3).HasColumnName("WATCH_LIST_SCORE3");

                entity.Property(e => e.WatchListScore4).HasColumnName("WATCH_LIST_SCORE4");

                entity.Property(e => e.WatchListScore5).HasColumnName("WATCH_LIST_SCORE5");

                entity.Property(e => e.WatchListScore6).HasColumnName("WATCH_LIST_SCORE6");

                entity.Property(e => e.WatchListScore7).HasColumnName("WATCH_LIST_SCORE7");

                entity.Property(e => e.WatchListScore8).HasColumnName("WATCH_LIST_SCORE8");

                entity.Property(e => e.WatchListScore9).HasColumnName("WATCH_LIST_SCORE9");
            });

            modelBuilder.Entity<D2fWlTempalerttranwlistdtl>(entity =>
            {
                entity.HasKey(e => new { e.CompCode, e.TempAlertId, e.AlertId, e.EntityId, e.SysId, e.AutoSeqNo });

                entity.ToTable("D2F_WL_TEMPALERTTRANWLISTDTL");

                entity.Property(e => e.CompCode)
                    .HasColumnName("COMP_CODE")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.TempAlertId)
                    .HasMaxLength(100)
                    .HasColumnName("TEMP_ALERT_ID")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AlertId).HasColumnName("ALERT_ID");

                entity.Property(e => e.EntityId)
                    .HasMaxLength(30)
                    .HasColumnName("ENTITY_ID");

                entity.Property(e => e.SysId).HasColumnName("SYS_ID");

                entity.Property(e => e.AutoSeqNo)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("AUTO_SEQ_NO");

                entity.Property(e => e.AccountNo)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("ACCOUNT_NO")
                    .HasDefaultValueSql("(N'NA')");

                entity.Property(e => e.BatchDate).HasColumnName("BATCH_DATE");

                entity.Property(e => e.Category)
                    .HasMaxLength(100)
                    .HasColumnName("CATEGORY");

                entity.Property(e => e.Categorynum)
                    .HasMaxLength(500)
                    .HasColumnName("CATEGORYNUM")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CifId)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("CIF_ID")
                    .HasDefaultValueSql("(N'NA')");

                entity.Property(e => e.ConfidenceScore)
                    .HasColumnName("CONFIDENCE_SCORE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Country)
                    .HasMaxLength(4000)
                    .HasColumnName("COUNTRY");

                entity.Property(e => e.Dobs)
                    .HasMaxLength(500)
                    .HasColumnName("DOBS");

                entity.Property(e => e.EntityType)
                    .HasMaxLength(20)
                    .HasColumnName("ENTITY_TYPE")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FalsePositiveInd).HasColumnName("FALSE_POSITIVE_IND");

                entity.Property(e => e.Gender)
                    .HasMaxLength(20)
                    .HasColumnName("GENDER")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.HitIdOrName)
                    .HasColumnName("HIT_ID_OR_NAME")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.IdValue)
                    .HasMaxLength(150)
                    .HasColumnName("ID_VALUE");

                entity.Property(e => e.InfoSource)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("INFO_SOURCE")
                    .HasDefaultValueSql("(N'DJ')");

                entity.Property(e => e.InvestigateStatus).HasColumnName("INVESTIGATE_STATUS");

                entity.Property(e => e.LastUptDate).HasColumnName("LAST_UPT_DATE");

                entity.Property(e => e.LastUptTime).HasColumnName("LAST_UPT_TIME");

                entity.Property(e => e.Match)
                    .HasMaxLength(20)
                    .HasColumnName("MATCH")
                    .HasDefaultValueSql("('NA')");

                entity.Property(e => e.MatchPercent).HasColumnName("MATCH_PERCENT");

                entity.Property(e => e.ModeMn)
                    .HasMaxLength(1)
                    .HasColumnName("MODE_MN")
                    .HasDefaultValueSql("('A')");

                entity.Property(e => e.NameType)
                    .HasMaxLength(255)
                    .HasColumnName("NAME_TYPE");

                entity.Property(e => e.Namesource)
                    .HasMaxLength(20)
                    .HasColumnName("NAMESOURCE");

                entity.Property(e => e.OriginalScriptName)
                    .HasMaxLength(300)
                    .HasColumnName("ORIGINAL_SCRIPT_NAME")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Remarks)
                    .HasMaxLength(2000)
                    .HasColumnName("REMARKS");

                entity.Property(e => e.Sanction)
                    .HasMaxLength(1024)
                    .HasColumnName("SANCTION")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SingleStringName)
                    .HasMaxLength(255)
                    .HasColumnName("SINGLE_STRING_NAME");

                entity.Property(e => e.Subcategory)
                    .HasMaxLength(50)
                    .HasColumnName("SUBCATEGORY")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TypeOfExposition).HasColumnName("TYPE_OF_EXPOSITION");

                entity.Property(e => e.UserId)
                    .HasMaxLength(30)
                    .HasColumnName("USER_ID");
            });

            modelBuilder.Entity<EsAccessToken>(entity =>
            {
                entity.HasKey(e => new { e.CompCode, e.AutoSeqNo });

                entity.ToTable("ES_ACCESS_TOKEN");

                entity.Property(e => e.CompCode)
                    .HasColumnName("COMP_CODE")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.AutoSeqNo)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("AUTO_SEQ_NO");

                entity.Property(e => e.AccessToken)
                    .IsRequired()
                    .HasColumnName("ACCESS_TOKEN")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ClientId)
                    .HasMaxLength(32)
                    .HasColumnName("CLIENT_ID")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Expires)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("EXPIRES");

                entity.Property(e => e.ExpiresIn)
                    .HasMaxLength(100)
                    .HasColumnName("EXPIRES_IN")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Issued)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("ISSUED");

                entity.Property(e => e.StampDttm)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("STAMP_DTTM");

                entity.Property(e => e.Username)
                    .HasColumnName("USERNAME")
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<EsSsArchweakResult>(entity =>
            {
                entity.HasKey(e => new { e.AutoSeqNo, e.AccountNo, e.CifNo });

                entity.ToTable("ES_SS_ARCHWEAK_RESULTS");

                entity.Property(e => e.AutoSeqNo)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("AUTO_SEQ_NO");

                entity.Property(e => e.AccountNo)
                    .HasMaxLength(30)
                    .HasColumnName("ACCOUNT_NO")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CifNo)
                    .HasMaxLength(30)
                    .HasColumnName("CIF_NO")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Batch)
                    .HasMaxLength(20)
                    .HasColumnName("BATCH")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Category)
                    .HasMaxLength(500)
                    .HasColumnName("CATEGORY")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Category1)
                    .HasMaxLength(500)
                    .HasColumnName("CATEGORY1")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Category2)
                    .HasMaxLength(150)
                    .HasColumnName("CATEGORY2")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CategoryFilter)
                    .HasMaxLength(500)
                    .HasColumnName("CATEGORY_FILTER")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ClientCountry)
                    .HasMaxLength(200)
                    .HasColumnName("CLIENT_COUNTRY")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ClientDob)
                    .HasMaxLength(50)
                    .HasColumnName("CLIENT_DOB")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ClientGender)
                    .HasMaxLength(50)
                    .HasColumnName("CLIENT_GENDER")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ClientName)
                    .HasMaxLength(1000)
                    .HasColumnName("CLIENT_NAME")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ClientType)
                    .HasMaxLength(50)
                    .HasColumnName("CLIENT_TYPE")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ConfidenceScore).HasColumnName("CONFIDENCE_SCORE");

                entity.Property(e => e.Country)
                    .HasMaxLength(4000)
                    .HasColumnName("COUNTRY")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Date).HasColumnName("DATE");

                entity.Property(e => e.Dob)
                    .HasMaxLength(500)
                    .HasColumnName("DOB")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.EntityId)
                    .HasMaxLength(30)
                    .HasColumnName("ENTITY_ID")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.EntityType)
                    .HasMaxLength(50)
                    .HasColumnName("ENTITY_TYPE")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Gender)
                    .HasMaxLength(50)
                    .HasColumnName("GENDER")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.InfoSource)
                    .HasMaxLength(50)
                    .HasColumnName("INFO_SOURCE")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Match)
                    .HasMaxLength(50)
                    .HasColumnName("MATCH")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NameType)
                    .HasMaxLength(255)
                    .HasColumnName("NAME_TYPE")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Namesource)
                    .HasMaxLength(50)
                    .HasColumnName("NAMESOURCE")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OriginalScriptName)
                    .HasMaxLength(500)
                    .HasColumnName("ORIGINAL_SCRIPT_NAME")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Sanction)
                    .HasMaxLength(1024)
                    .HasColumnName("SANCTION")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SanctionFilter)
                    .HasMaxLength(1024)
                    .HasColumnName("SANCTION_FILTER")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SingleStringName2)
                    .HasMaxLength(500)
                    .HasColumnName("SINGLE_STRING_NAME2")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SingleStringName3)
                    .HasMaxLength(2000)
                    .HasColumnName("SINGLE_STRING_NAME3")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SysId)
                    .HasMaxLength(100)
                    .HasColumnName("SYS_ID")
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<EsSsResult>(entity =>
            {
                entity.HasKey(e => new { e.AutoSeqNo, e.AccountNo, e.CifNo });

                entity.ToTable("ES_SS_RESULTS");

                entity.Property(e => e.AutoSeqNo)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("AUTO_SEQ_NO");

                entity.Property(e => e.AccountNo)
                    .HasMaxLength(30)
                    .HasColumnName("ACCOUNT_NO")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CifNo)
                    .HasMaxLength(30)
                    .HasColumnName("CIF_NO")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Category)
                    .HasMaxLength(500)
                    .HasColumnName("CATEGORY")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Category1)
                    .HasMaxLength(500)
                    .HasColumnName("CATEGORY1")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Category2)
                    .HasMaxLength(150)
                    .HasColumnName("CATEGORY2")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CategoryFilter)
                    .HasMaxLength(500)
                    .HasColumnName("CATEGORY_FILTER")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ClientCountry)
                    .HasMaxLength(200)
                    .HasColumnName("CLIENT_COUNTRY")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ClientDob)
                    .HasMaxLength(50)
                    .HasColumnName("CLIENT_DOB")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ClientGender)
                    .HasMaxLength(50)
                    .HasColumnName("CLIENT_GENDER")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ClientName)
                    .HasMaxLength(1000)
                    .HasColumnName("CLIENT_NAME")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ClientType)
                    .HasMaxLength(50)
                    .HasColumnName("CLIENT_TYPE")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ConfidenceScore).HasColumnName("CONFIDENCE_SCORE");

                entity.Property(e => e.Country)
                    .HasMaxLength(4000)
                    .HasColumnName("COUNTRY")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Dob)
                    .HasMaxLength(500)
                    .HasColumnName("DOB")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.EntityId)
                    .HasMaxLength(30)
                    .HasColumnName("ENTITY_ID")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.EntityType)
                    .HasMaxLength(50)
                    .HasColumnName("ENTITY_TYPE")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Gender)
                    .HasMaxLength(50)
                    .HasColumnName("GENDER")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.InfoSource)
                    .HasMaxLength(50)
                    .HasColumnName("INFO_SOURCE")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Match)
                    .HasMaxLength(50)
                    .HasColumnName("MATCH")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NameType)
                    .HasMaxLength(255)
                    .HasColumnName("NAME_TYPE")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Namesource)
                    .HasMaxLength(50)
                    .HasColumnName("NAMESOURCE")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OriginalScriptName)
                    .HasMaxLength(500)
                    .HasColumnName("ORIGINAL_SCRIPT_NAME")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Sanction)
                    .HasMaxLength(1024)
                    .HasColumnName("SANCTION")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SanctionFilter)
                    .HasMaxLength(1024)
                    .HasColumnName("SANCTION_FILTER")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SingleStringName2)
                    .HasMaxLength(500)
                    .HasColumnName("SINGLE_STRING_NAME2")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SingleStringName3)
                    .HasMaxLength(2000)
                    .HasColumnName("SINGLE_STRING_NAME3")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SysId)
                    .HasMaxLength(100)
                    .HasColumnName("SYS_ID")
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<EsWlArchweakResult>(entity =>
            {
                entity.HasKey(e => new { e.AutoSeqNo, e.AccountNo, e.CifNo });

                entity.ToTable("ES_WL_ARCHWEAK_RESULTS");

                entity.Property(e => e.AutoSeqNo)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("AUTO_SEQ_NO");

                entity.Property(e => e.AccountNo)
                    .HasMaxLength(30)
                    .HasColumnName("ACCOUNT_NO")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CifNo)
                    .HasMaxLength(30)
                    .HasColumnName("CIF_NO")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Batch)
                    .HasMaxLength(20)
                    .HasColumnName("BATCH")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.BrCode)
                    .HasMaxLength(50)
                    .HasColumnName("BR_CODE")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Category)
                    .HasMaxLength(500)
                    .HasColumnName("CATEGORY")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Category1)
                    .HasMaxLength(500)
                    .HasColumnName("CATEGORY1")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Category2)
                    .HasMaxLength(150)
                    .HasColumnName("CATEGORY2")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ClientCountry)
                    .HasMaxLength(200)
                    .HasColumnName("CLIENT_COUNTRY")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ClientDob)
                    .HasMaxLength(50)
                    .HasColumnName("CLIENT_DOB")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ClientGender)
                    .HasMaxLength(50)
                    .HasColumnName("CLIENT_GENDER")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ClientName)
                    .HasMaxLength(50)
                    .HasColumnName("CLIENT_NAME")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ClientType)
                    .HasMaxLength(50)
                    .HasColumnName("CLIENT_TYPE")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ConfidenceScore).HasColumnName("CONFIDENCE_SCORE");

                entity.Property(e => e.Date).HasColumnName("DATE");

                entity.Property(e => e.DocRef)
                    .HasMaxLength(30)
                    .HasColumnName("DOC_REF")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.EntityId)
                    .HasMaxLength(30)
                    .HasColumnName("ENTITY_ID")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.EntityType)
                    .HasMaxLength(50)
                    .HasColumnName("ENTITY_TYPE")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.InfoSource)
                    .HasMaxLength(50)
                    .HasColumnName("INFO_SOURCE")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Match)
                    .HasMaxLength(50)
                    .HasColumnName("MATCH")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NameType)
                    .HasMaxLength(255)
                    .HasColumnName("NAME_TYPE")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Namesource)
                    .HasMaxLength(50)
                    .HasColumnName("NAMESOURCE")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OriginalScriptName)
                    .HasMaxLength(500)
                    .HasColumnName("ORIGINAL_SCRIPT_NAME")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ProductCode)
                    .HasMaxLength(10)
                    .HasColumnName("PRODUCT_CODE")
                    .HasDefaultValueSql("('0')");

                entity.Property(e => e.Sanction)
                    .HasMaxLength(1024)
                    .HasColumnName("SANCTION")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SingleStringName2)
                    .HasMaxLength(500)
                    .HasColumnName("SINGLE_STRING_NAME2")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SingleStringName3)
                    .HasMaxLength(2000)
                    .HasColumnName("SINGLE_STRING_NAME3")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Status)
                    .HasMaxLength(50)
                    .HasColumnName("STATUS")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SysId)
                    .HasMaxLength(100)
                    .HasColumnName("SYS_ID")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TableNameUsed)
                    .HasMaxLength(50)
                    .HasColumnName("TABLE_NAME_USED")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.WlCountry)
                    .HasMaxLength(4000)
                    .HasColumnName("WL_COUNTRY")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.WlDob)
                    .HasMaxLength(500)
                    .HasColumnName("WL_DOB")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.WlGender)
                    .HasMaxLength(50)
                    .HasColumnName("WL_GENDER")
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<EsWlResult>(entity =>
            {
                entity.HasKey(e => new { e.AutoSeqNo, e.AccountNo, e.CifNo });

                entity.ToTable("ES_WL_RESULTS");

                entity.Property(e => e.AutoSeqNo)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("AUTO_SEQ_NO");

                entity.Property(e => e.AccountNo)
                    .HasMaxLength(30)
                    .HasColumnName("ACCOUNT_NO")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CifNo)
                    .HasMaxLength(30)
                    .HasColumnName("CIF_NO")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.BrCode)
                    .HasMaxLength(50)
                    .HasColumnName("BR_CODE")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Category)
                    .HasMaxLength(500)
                    .HasColumnName("CATEGORY")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Category1)
                    .HasMaxLength(500)
                    .HasColumnName("CATEGORY1")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Category2)
                    .HasMaxLength(150)
                    .HasColumnName("CATEGORY2")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ClientCountry)
                    .HasMaxLength(200)
                    .HasColumnName("CLIENT_COUNTRY")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ClientDob)
                    .HasMaxLength(50)
                    .HasColumnName("CLIENT_DOB")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ClientGender)
                    .HasMaxLength(50)
                    .HasColumnName("CLIENT_GENDER")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ClientName)
                    .HasMaxLength(50)
                    .HasColumnName("CLIENT_NAME")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ClientType)
                    .HasMaxLength(50)
                    .HasColumnName("CLIENT_TYPE")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ConfidenceScore).HasColumnName("CONFIDENCE_SCORE");

                entity.Property(e => e.DocRef)
                    .HasMaxLength(30)
                    .HasColumnName("DOC_REF")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.EntityId)
                    .HasMaxLength(30)
                    .HasColumnName("ENTITY_ID")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.EntityType)
                    .HasMaxLength(50)
                    .HasColumnName("ENTITY_TYPE")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.InfoSource)
                    .HasMaxLength(50)
                    .HasColumnName("INFO_SOURCE")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Match)
                    .HasMaxLength(50)
                    .HasColumnName("MATCH")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NameType)
                    .HasMaxLength(255)
                    .HasColumnName("NAME_TYPE")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Namesource)
                    .HasMaxLength(50)
                    .HasColumnName("NAMESOURCE")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OriginalScriptName)
                    .HasMaxLength(500)
                    .HasColumnName("ORIGINAL_SCRIPT_NAME")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ProductCode)
                    .HasMaxLength(10)
                    .HasColumnName("PRODUCT_CODE")
                    .HasDefaultValueSql("('0')");

                entity.Property(e => e.Sanction)
                    .HasMaxLength(1024)
                    .HasColumnName("SANCTION")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SingleStringName2)
                    .HasMaxLength(500)
                    .HasColumnName("SINGLE_STRING_NAME2")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SingleStringName3)
                    .HasMaxLength(2000)
                    .HasColumnName("SINGLE_STRING_NAME3")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Status)
                    .HasMaxLength(50)
                    .HasColumnName("STATUS")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SysId)
                    .HasMaxLength(100)
                    .HasColumnName("SYS_ID")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TableNameUsed)
                    .HasMaxLength(50)
                    .HasColumnName("TABLE_NAME_USED")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.WlCountry)
                    .HasMaxLength(4000)
                    .HasColumnName("WL_COUNTRY")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.WlDob)
                    .HasMaxLength(500)
                    .HasColumnName("WL_DOB")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.WlGender)
                    .HasMaxLength(50)
                    .HasColumnName("WL_GENDER")
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<EventViewerW>(entity =>
            {
                entity.ToTable("EVENT_VIEWER_WS");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AccessDate)
                    .HasColumnType("datetime")
                    .HasColumnName("access_date")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Action)
                    .HasMaxLength(512)
                    .HasColumnName("action");

                entity.Property(e => e.BrCode)
                    .HasMaxLength(30)
                    .HasColumnName("br_code");

                entity.Property(e => e.CompCode)
                    .HasColumnName("comp_code")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.EndTime)
                    .HasColumnType("datetime")
                    .HasColumnName("end_time");

                entity.Property(e => e.MenuName)
                    .HasMaxLength(30)
                    .HasColumnName("menu_name");

                entity.Property(e => e.PageName)
                    .HasMaxLength(100)
                    .HasColumnName("page_name");

                entity.Property(e => e.RefField)
                    .HasMaxLength(150)
                    .HasColumnName("REF_FIELD");

                entity.Property(e => e.RefField2)
                    .HasMaxLength(150)
                    .HasColumnName("REF_FIELD2");

                entity.Property(e => e.RequestChannel)
                    .HasMaxLength(100)
                    .HasColumnName("REQUEST_CHANNEL");

                entity.Property(e => e.ResultVal)
                    .HasMaxLength(100)
                    .HasColumnName("RESULT_VAL");

                entity.Property(e => e.RoomName)
                    .HasMaxLength(30)
                    .HasColumnName("room_name");

                entity.Property(e => e.SearchCountry)
                    .HasMaxLength(30)
                    .HasColumnName("SEARCH_COUNTRY");

                entity.Property(e => e.SearchId)
                    .HasMaxLength(100)
                    .HasColumnName("SEARCH_ID");

                entity.Property(e => e.SearchId2)
                    .HasMaxLength(100)
                    .HasColumnName("SEARCH_ID2");

                entity.Property(e => e.SearchName)
                    .HasMaxLength(150)
                    .HasColumnName("SEARCH_NAME");

                entity.Property(e => e.SearchName2)
                    .HasMaxLength(150)
                    .HasColumnName("SEARCH_NAME2");

                entity.Property(e => e.StartTime)
                    .HasColumnType("datetime")
                    .HasColumnName("start_time");

                entity.Property(e => e.SysName)
                    .HasMaxLength(30)
                    .HasColumnName("sys_name");

                entity.Property(e => e.TranDate).HasColumnName("tran_date");

                entity.Property(e => e.Userid)
                    .HasMaxLength(30)
                    .HasColumnName("userid");
            });

            modelBuilder.Entity<Jobbatchlog>(entity =>
            {
                entity.HasKey(e => new { e.CodeComp, e.CodeOrg, e.RunDate, e.JobId, e.StepId, e.UniqueKey });

                entity.ToTable("JOBBATCHLOG");

                entity.Property(e => e.CodeComp)
                    .HasColumnName("CODE_COMP")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.CodeOrg)
                    .HasColumnName("CODE_ORG")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.RunDate).HasColumnName("RUN_DATE");

                entity.Property(e => e.JobId)
                    .HasMaxLength(15)
                    .HasColumnName("JOB_ID")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StepId)
                    .HasMaxLength(20)
                    .HasColumnName("STEP_ID")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.UniqueKey)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("UNIQUE_KEY");

                entity.Property(e => e.AuditCreatedDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("AUDIT_CREATED_DATE")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.AuditCreatedUser)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_CREATED_USER")
                    .HasDefaultValueSql("('SYSADMIN')");

                entity.Property(e => e.AuditUpdatedDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("AUDIT_UPDATED_DATE")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.AuditUpdatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_UPDATED_USER")
                    .HasDefaultValueSql("('SYSADMIN')");

                entity.Property(e => e.ErrorMsg).HasColumnName("ERROR_MSG");

                entity.Property(e => e.RefNo1)
                    .HasMaxLength(30)
                    .HasColumnName("REF_NO1");

                entity.Property(e => e.RefNo2)
                    .HasMaxLength(40)
                    .HasColumnName("REF_NO2");

                entity.Property(e => e.RunTime)
                    .HasColumnName("RUN_TIME")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<Menu>(entity =>
            {
                entity.HasKey(e => new { e.IdModule, e.IdMenu });

                entity.ToTable("MENU");

                entity.Property(e => e.IdModule).HasColumnName("ID_MODULE");

                entity.Property(e => e.IdMenu).HasColumnName("ID_MENU");

                entity.Property(e => e.AuditCreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("AUDIT_CREATED_DATE");

                entity.Property(e => e.AuditCreatedUser)
                    .HasMaxLength(30)
                    .HasColumnName("AUDIT_CREATED_USER");

                entity.Property(e => e.AuditModifiedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("AUDIT_MODIFIED_DATE");

                entity.Property(e => e.AuditModifiedUser)
                    .HasMaxLength(30)
                    .HasColumnName("AUDIT_MODIFIED_USER");

                entity.Property(e => e.FlagEnable).HasColumnName("FLAG_ENABLE");

                entity.Property(e => e.InfoLink)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("INFO_LINK");

                entity.Property(e => e.InfoName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("INFO_NAME");

                entity.Property(e => e.InfoVersion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("INFO_VERSION");
            });

            modelBuilder.Entity<NoMasterHist>(entity =>
            {
                entity.HasKey(e => new { e.CodeComp, e.CodeOrg, e.NoMaster, e.NoCif });

                entity.ToTable("NO_MASTER_HIST");

                entity.Property(e => e.CodeComp).HasColumnName("CODE_COMP");

                entity.Property(e => e.CodeOrg).HasColumnName("CODE_ORG");

                entity.Property(e => e.NoMaster)
                    .HasMaxLength(150)
                    .HasColumnName("NO_MASTER");

                entity.Property(e => e.NoCif)
                    .HasMaxLength(150)
                    .HasColumnName("NO_CIF");

                entity.Property(e => e.AuditCreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("AUDIT_CREATED_DATE");

                entity.Property(e => e.AuditCreatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_CREATED_USER");

                entity.Property(e => e.AuditMergedDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("AUDIT_MERGED_DATE");

                entity.Property(e => e.AuditNoCifOld)
                    .HasMaxLength(150)
                    .HasColumnName("AUDIT_NO_CIF_OLD");

                entity.Property(e => e.AuditNoMasterOld)
                    .HasMaxLength(150)
                    .HasColumnName("AUDIT_NO_MASTER_OLD");

                entity.Property(e => e.AuditUnmergedDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("AUDIT_UNMERGED_DATE");

                entity.Property(e => e.AuditUpdatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("AUDIT_UPDATED_DATE");

                entity.Property(e => e.AuditUpdatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_UPDATED_USER");

                entity.Property(e => e.InfoNameFull)
                    .HasMaxLength(150)
                    .HasColumnName("INFO_NAME_FULL");
            });

            modelBuilder.Entity<ParamCtrDtl>(entity =>
            {
                entity.HasKey(e => new { e.CodeComp, e.CodeOrg, e.ReportId, e.QuestCategory, e.QuestNo })
                    .HasName("Idx_PARAM_CTR_DTL");

                entity.ToTable("PARAM_CTR_DTL");

                entity.Property(e => e.CodeComp)
                    .HasColumnName("CODE_COMP")
                    .HasDefaultValueSql("((1))")
                    .HasComment("Code Company");

                entity.Property(e => e.CodeOrg)
                    .HasColumnName("CODE_ORG")
                    .HasDefaultValueSql("((1))")
                    .HasComment("Code Organization");

                entity.Property(e => e.ReportId)
                    .HasMaxLength(50)
                    .HasColumnName("REPORT_ID")
                    .HasComment("STR template ID");

                entity.Property(e => e.QuestCategory)
                    .HasColumnName("QUEST_CATEGORY")
                    .HasDefaultValueSql("((1))")
                    .HasComment("Category if the questionnaire\\n1-Client Info\\n2-Account Info\\n3-Transaction Info\\n4-Finding info");

                entity.Property(e => e.QuestNo)
                    .HasColumnName("QUEST_NO")
                    .HasComment("Question No");

                entity.Property(e => e.AnsCode)
                    .HasColumnName("ANS_CODE")
                    .HasDefaultValueSql("((0))")
                    .HasComment("Code_Sub to link to CONFIG_CODES_DTL");

                entity.Property(e => e.AnsCompulsory)
                    .HasColumnName("ANS_COMPULSORY")
                    .HasComment("To reject the submission if this field is empty\\nTo enable the compulsory tag (*) on the question");

                entity.Property(e => e.AnsDefault)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("ANS_DEFAULT")
                    .HasComment("Default answer to be fill if no input");

                entity.Property(e => e.AnsField)
                    .HasMaxLength(50)
                    .HasColumnName("ANS_FIELD")
                    .HasComment("Field Name from dropdownlist");

                entity.Property(e => e.AnsType)
                    .HasColumnName("ANS_TYPE")
                    .HasDefaultValueSql("((1))")
                    .HasComment("0-Display Quest Text as header\\n1-Open Text (Text Box)\\n2-Dropdown\\n3-Radio Button\\n4-1 day Calendar\\n5-Text Area (expandable)\\n");

                entity.Property(e => e.AuditCreatedDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("AUDIT_CREATED_DATE")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date created");

                entity.Property(e => e.AuditCreatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_CREATED_USER")
                    .HasComment("User creating this record");

                entity.Property(e => e.AuditUpdatedDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("AUDIT_UPDATED_DATE")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date record updated");

                entity.Property(e => e.AuditUpdatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_UPDATED_USER")
                    .HasComment("User updating this record");

                entity.Property(e => e.CtrHist)
                    .HasColumnName("CTR_HIST")
                    .HasComment("The latest sequence generated due to changes of data");

                entity.Property(e => e.CtrStatus)
                    .HasColumnName("CTR_STATUS")
                    .HasDefaultValueSql("((1))")
                    .HasComment("0-Disable question (skip all field checking)\\n1-Enable question");

                entity.Property(e => e.DisableInput).HasColumnName("DISABLE_INPUT");

                entity.Property(e => e.DispAns)
                    .HasColumnName("DISP_ANS")
                    .HasDefaultValueSql("((1))")
                    .HasComment("0 - Display answer field\\n1 - Display answer field\\n2 - Display aswer field with disable state (uneditable)");

                entity.Property(e => e.DispHdr)
                    .HasColumnName("DISP_HDR")
                    .HasComment("To change the theme text as an header\\n0-default (normal)\\n1-header");

                entity.Property(e => e.DispRemarks)
                    .HasColumnName("DISP_REMARKS")
                    .HasDefaultValueSql("((1))")
                    .HasComment("0 - Display QUEST_REMARKS\\n1 - Display QUEST_REMARKS");

                entity.Property(e => e.DispText)
                    .HasColumnName("DISP_TEXT")
                    .HasDefaultValueSql("((1))")
                    .HasComment("0 - Display QUEST_TEXT\\n1 - Display QUEST_TEXT");

                entity.Property(e => e.GovUpt).HasColumnName("GOV_UPT");

                entity.Property(e => e.IndivUpt).HasColumnName("INDIV_UPT");

                entity.Property(e => e.LegalUpt).HasColumnName("LEGAL_UPT");

                entity.Property(e => e.NgoUpt).HasColumnName("NGO_UPT");

                entity.Property(e => e.OutputInd)
                    .HasColumnName("OUTPUT_IND")
                    .HasComment("Output indicator 0 (BOTH) 1 (EXCEL) 2 (XML)");

                entity.Property(e => e.QuestField)
                    .HasMaxLength(50)
                    .HasColumnName("QUEST_FIELD")
                    .HasComment("Field in REPORT_STR to be displayed");

                entity.Property(e => e.QuestRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("QUEST_REMARKS")
                    .HasComment("Additional remark to be displayed above the answer field, this usually represent the sample answer for user to understand the actual question");

                entity.Property(e => e.QuestText)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("QUEST_TEXT")
                    .HasComment("Question to be displayed on left hand side");

                entity.Property(e => e.QuestTypeInd)
                    .HasColumnName("QUEST_TYPE_IND")
                    .HasComment("Question indicator whether it is for Individual (1) or Organization/LegalEntity/Corporate (2) or both/common (0)");

                entity.Property(e => e.XmlAction1).HasColumnName("XML_ACTION1");

                entity.Property(e => e.XmlAction2).HasColumnName("XML_ACTION2");

                entity.Property(e => e.XmlAction3).HasColumnName("XML_ACTION3");

                entity.Property(e => e.XmlLevel1)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("XML_LEVEL1")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.XmlLevel2)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("XML_LEVEL2")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.XmlLevel3)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("XML_LEVEL3")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.XmlLevel4)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("XML_LEVEL4")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.XmlLevel5)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("XML_LEVEL5")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.XmlLevel6)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("XML_LEVEL6")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.XmlSectionNo).HasColumnName("XML_SECTION_NO");

                entity.Property(e => e.XmlSeqNo).HasColumnName("XML_SEQ_NO");

                entity.Property(e => e.XmlSubSeq).HasColumnName("XML_SUB_SEQ");
            });

            modelBuilder.Entity<ParamError>(entity =>
            {
                entity.HasKey(e => new { e.CodeComp, e.CodeOrg, e.ModuleId, e.InfoCode })
                    .HasName("Idx_PARAM_ERROR");

                entity.ToTable("PARAM_ERROR");

                entity.HasComment("Storing parameter error coming from system");

                entity.Property(e => e.CodeComp)
                    .HasColumnName("CODE_COMP")
                    .HasComment("Company code");

                entity.Property(e => e.CodeOrg)
                    .HasColumnName("CODE_ORG")
                    .HasComment("Organization code");

                entity.Property(e => e.ModuleId)
                    .HasColumnName("MODULE_ID")
                    .HasComment("Module ID");

                entity.Property(e => e.InfoCode)
                    .HasColumnName("INFO_CODE")
                    .HasComment("Error code to be used by system");

                entity.Property(e => e.AuditCreatedDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("AUDIT_CREATED_DATE")
                    .HasComment("Date of this user being created");

                entity.Property(e => e.AuditCreatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_CREATED_USER")
                    .HasComment("User who created record for this ID");

                entity.Property(e => e.AuditUpdatedDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("AUDIT_UPDATED_DATE")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date of this record being updated");

                entity.Property(e => e.AuditUpdatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_UPDATED_USER")
                    .HasComment("User who update record for this ID");

                entity.Property(e => e.ConfigLanguage)
                    .HasColumnName("CONFIG_LANGUAGE")
                    .HasComment("To differentiate the language used on displaying description of error");

                entity.Property(e => e.ConfigSeq)
                    .HasColumnName("CONFIG_SEQ")
                    .HasComment("(TBC) Order of sequence to be used during setting up at front end");

                entity.Property(e => e.ConfigStatus)
                    .HasColumnName("CONFIG_STATUS")
                    .HasComment("To indicate the status of the error (warning, error, etc)");

                entity.Property(e => e.InfoDescription)
                    .HasColumnName("INFO_DESCRIPTION")
                    .HasComment("Description of error to be displayed at the front end");
            });

            modelBuilder.Entity<ParamLicense>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PARAM_LICENSE");

                entity.Property(e => e.AuditUpdatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("AUDIT_UPDATED_DATE");

                entity.Property(e => e.AuditUpdatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_UPDATED_USER");

                entity.Property(e => e.GracePeriod).HasColumnName("GRACE_PERIOD");

                entity.Property(e => e.KeyValidator)
                    .HasMaxLength(50)
                    .HasColumnName("KEY_VALIDATOR");

                entity.Property(e => e.LicenseCategory)
                    .HasMaxLength(50)
                    .HasColumnName("LICENSE_CATEGORY");

                entity.Property(e => e.LicenseEstablish)
                    .HasColumnType("datetime")
                    .HasColumnName("LICENSE_ESTABLISH");

                entity.Property(e => e.LicenseExpire)
                    .HasColumnType("datetime")
                    .HasColumnName("LICENSE_EXPIRE");

                entity.Property(e => e.LicenseId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("LICENSE_ID");

                entity.Property(e => e.LicenseKey)
                    .HasMaxLength(50)
                    .HasColumnName("LICENSE_KEY");

                entity.Property(e => e.OdMonitoring).HasColumnName("OD_MONITORING");

                entity.Property(e => e.OrgName)
                    .HasMaxLength(50)
                    .HasColumnName("ORG_NAME");

                entity.Property(e => e.OrgNumber)
                    .HasMaxLength(50)
                    .HasColumnName("ORG_NUMBER");

                entity.Property(e => e.Portfolio).HasColumnName("PORTFOLIO");

                entity.Property(e => e.RiskProfile).HasColumnName("RISK_PROFILE");

                entity.Property(e => e.StatusLicense).HasColumnName("STATUS_LICENSE");

                entity.Property(e => e.TxnMonitoring).HasColumnName("TXN_MONITORING");

                entity.Property(e => e.TxnScreening).HasColumnName("TXN_SCREENING");

                entity.Property(e => e.WlMonitoring).HasColumnName("WL_MONITORING");
            });

            modelBuilder.Entity<ParamLocation>(entity =>
            {
                entity.HasKey(e => new { e.CodeComp, e.CodeOrg, e.LocCode })
                    .HasName("Pk_CONFIG_STAFF_LOCATION_CODE_LOCATION");

                entity.ToTable("PARAM_LOCATION");

                entity.HasComment("Location of staff being assigned to");

                entity.Property(e => e.CodeComp)
                    .HasColumnName("CODE_COMP")
                    .HasDefaultValueSql("((1))")
                    .HasComment("Company Code");

                entity.Property(e => e.CodeOrg)
                    .HasColumnName("CODE_ORG")
                    .HasDefaultValueSql("((1))")
                    .HasComment("Code Organization");

                entity.Property(e => e.LocCode)
                    .HasMaxLength(15)
                    .HasColumnName("LOC_CODE")
                    .HasComment("Location Code");

                entity.Property(e => e.AuditCreatedDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("AUDIT_CREATED_DATE")
                    .HasComment("Date of this location being created");

                entity.Property(e => e.AuditCreatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_CREATED_USER")
                    .HasComment("User who created this record");

                entity.Property(e => e.AuditUpdatedDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("AUDIT_UPDATED_DATE")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date this record being updated");

                entity.Property(e => e.AuditUpdatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_UPDATED_USER")
                    .HasComment("User who updated this record");

                entity.Property(e => e.LocDesc)
                    .HasMaxLength(250)
                    .HasColumnName("LOC_DESC")
                    .HasComment("Location Description");

                entity.Property(e => e.LocName)
                    .HasMaxLength(100)
                    .HasColumnName("LOC_NAME")
                    .HasComment("Name of the location");

                entity.Property(e => e.LocShort)
                    .HasMaxLength(20)
                    .HasColumnName("LOC_SHORT")
                    .HasComment("Abbreviation of Location");

                entity.Property(e => e.MailGroup)
                    .HasMaxLength(1000)
                    .HasColumnName("MAIL_GROUP")
                    .HasComment("emailgroup / staff for selected location");
            });

            modelBuilder.Entity<ParamMappingDtl>(entity =>
            {
                entity.HasKey(e => new { e.CodeComp, e.CodeOrg, e.MapType, e.MapProduct, e.MapCategory });

                entity.ToTable("PARAM_MAPPING_DTL");

                entity.HasComment("Store the details of fields being mapped");

                entity.Property(e => e.CodeComp).HasColumnName("CODE_COMP");

                entity.Property(e => e.CodeOrg).HasColumnName("CODE_ORG");

                entity.Property(e => e.MapType)
                    .HasColumnName("MAP_TYPE")
                    .HasComment("To map between HDR table and DTL, ID for mapping type (CLIENT/ACCOUNT/TXN)");

                entity.Property(e => e.MapProduct).HasColumnName("MAP_PRODUCT");

                entity.Property(e => e.MapCategory)
                    .HasColumnName("MAP_CATEGORY")
                    .HasComment("ID for column");

                entity.Property(e => e.AuditCreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("AUDIT_CREATED_DATE");

                entity.Property(e => e.AuditCreatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_CREATED_USER");

                entity.Property(e => e.AuditUpdatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("AUDIT_UPDATED_DATE");

                entity.Property(e => e.AuditUpdatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_UPDATED_USER");

                entity.Property(e => e.ConfigCode)
                    .HasColumnName("CONFIG_CODE")
                    .HasComment("To link the description on PARAM_CODES : Parameter Code");

                entity.Property(e => e.ConfigKyc)
                    .HasColumnName("CONFIG_KYC")
                    .HasComment("To be display on KYC Module (0D1E)");

                entity.Property(e => e.ConfigStatus).HasColumnName("CONFIG_STATUS");

                entity.Property(e => e.ConfigWatchlist)
                    .HasColumnName("CONFIG_WATCHLIST")
                    .HasComment("To be display on watchlist module (0D1E)");

                entity.Property(e => e.DataLength).HasColumnName("DATA_LENGTH");

                entity.Property(e => e.DataType).HasColumnName("DATA_TYPE");

                entity.Property(e => e.MapDisplayName)
                    .HasMaxLength(100)
                    .HasColumnName("MAP_DISPLAY_NAME")
                    .HasComment("Additional Desription on the field name");

                entity.Property(e => e.MapFieldName)
                    .HasMaxLength(100)
                    .HasColumnName("MAP_FIELD_NAME")
                    .HasComment("Name of the field");

                entity.Property(e => e.MapTableName)
                    .HasMaxLength(50)
                    .HasColumnName("MAP_TABLE_NAME")
                    .HasComment("Name of the table affected");
            });

            modelBuilder.Entity<ParamMappingHdr>(entity =>
            {
                entity.HasKey(e => new { e.CodeComp, e.CodeOrg, e.MapType, e.MapProduct });

                entity.ToTable("PARAM_MAPPING_HDR");

                entity.HasComment("Record created date");

                entity.Property(e => e.CodeComp).HasColumnName("CODE_COMP");

                entity.Property(e => e.CodeOrg).HasColumnName("CODE_ORG");

                entity.Property(e => e.MapType)
                    .HasColumnName("MAP_TYPE")
                    .HasComment("1-CLIENT\\n2-ACCOUNT\\n3-TRANSACTION");

                entity.Property(e => e.MapProduct)
                    .HasColumnName("MAP_PRODUCT")
                    .HasComment("Store the product no for respective mapping\\n1-CASA\\n2-Loan\\n3-Treasury\\n4-Others");

                entity.Property(e => e.AuditCreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("AUDIT_CREATED_DATE")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date record created");

                entity.Property(e => e.AuditCreatedUser)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_CREATED_USER")
                    .HasDefaultValueSql("('SYSADMIN')")
                    .HasComment("User who created the record");

                entity.Property(e => e.AuditUpdatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("AUDIT_UPDATED_DATE")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the record updated");

                entity.Property(e => e.AuditUpdatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_UPDATED_USER")
                    .HasDefaultValueSql("('SYSADMIN')")
                    .HasComment("User who update the record");

                entity.Property(e => e.ConfigStatus)
                    .HasColumnName("CONFIG_STATUS")
                    .HasComment("0-inactive\\n1-active");

                entity.Property(e => e.MapDefaultQuery).HasColumnName("MAP_DEFAULT_QUERY");

                entity.Property(e => e.MapLatestQuery).HasColumnName("MAP_LATEST_QUERY");

                entity.Property(e => e.MapName)
                    .HasMaxLength(250)
                    .HasColumnName("MAP_NAME")
                    .HasComment("Mapping Name");

                entity.Property(e => e.MapTable)
                    .HasMaxLength(100)
                    .HasColumnName("MAP_TABLE")
                    .HasComment("Store the table name of selected map");
            });

            modelBuilder.Entity<ParamMappingTab>(entity =>
            {
                entity.HasKey(e => new { e.CodeComp, e.CodeOrg, e.TabNo, e.ColumnNo, e.MapType })
                    .HasName("PK_CONFIG_WF_TAB");

                entity.ToTable("PARAM_MAPPING_TAB");

                entity.Property(e => e.CodeComp)
                    .HasColumnName("CODE_COMP")
                    .HasComment("Company code");

                entity.Property(e => e.CodeOrg)
                    .HasColumnName("CODE_ORG")
                    .HasComment("Organization code");

                entity.Property(e => e.TabNo).HasColumnName("TAB_NO");

                entity.Property(e => e.ColumnNo).HasColumnName("COLUMN_NO");

                entity.Property(e => e.MapType)
                    .HasColumnName("MAP_TYPE")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ColumnCreatedDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("COLUMN_CREATED_DATE");

                entity.Property(e => e.ColumnCreatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("COLUMN_CREATED_USER");

                entity.Property(e => e.ColumnDisplayName)
                    .HasMaxLength(50)
                    .HasColumnName("COLUMN_DISPLAY_NAME");

                entity.Property(e => e.ColumnField).HasColumnName("COLUMN_FIELD");

                entity.Property(e => e.ColumnParameter).HasColumnName("COLUMN_PARAMETER");

                entity.Property(e => e.ColumnStatus).HasColumnName("COLUMN_STATUS");

                entity.Property(e => e.ColumnTable).HasColumnName("COLUMN_TABLE");

                entity.Property(e => e.ColumnUpdatedDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("COLUMN_UPDATED_DATE");

                entity.Property(e => e.ColumnUpdatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("COLUMN_UPDATED_USER");

                entity.Property(e => e.TabCreatedDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("TAB_CREATED_DATE")
                    .HasComment("Date of this user being created");

                entity.Property(e => e.TabCreatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("TAB_CREATED_USER")
                    .HasComment("User who created record for this ID");

                entity.Property(e => e.TabDisplayName)
                    .HasMaxLength(50)
                    .HasColumnName("TAB_DISPLAY_NAME");

                entity.Property(e => e.TabStatus).HasColumnName("TAB_STATUS");

                entity.Property(e => e.TabUpdatedDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("TAB_UPDATED_DATE")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date of this record being updated");

                entity.Property(e => e.TabUpdatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("TAB_UPDATED_USER")
                    .HasComment("User who update record for this ID");
            });

            modelBuilder.Entity<ParamMappingTabDtl>(entity =>
            {
                entity.HasKey(e => new { e.CodeComp, e.CodeOrg, e.ColumnNo, e.TabNo })
                    .HasName("PK_PARAM_MAPPING_TABDTL");

                entity.ToTable("PARAM_MAPPING_TAB_DTL");

                entity.Property(e => e.CodeComp)
                    .HasColumnName("CODE_COMP")
                    .HasComment("Company code");

                entity.Property(e => e.CodeOrg)
                    .HasColumnName("CODE_ORG")
                    .HasComment("Organization code");

                entity.Property(e => e.ColumnNo).HasColumnName("COLUMN_NO");

                entity.Property(e => e.TabNo).HasColumnName("TAB_NO");

                entity.Property(e => e.AuditCreatedDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("AUDIT_CREATED_DATE")
                    .HasComment("Date of this user being created");

                entity.Property(e => e.AuditCreatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_CREATED_USER")
                    .HasComment("User who created record for this ID");

                entity.Property(e => e.AuditUpdatedDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("AUDIT_UPDATED_DATE")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date of this record being updated");

                entity.Property(e => e.AuditUpdatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_UPDATED_USER")
                    .HasComment("User who update record for this ID");

                entity.Property(e => e.ColumnDisplayName)
                    .HasMaxLength(50)
                    .HasColumnName("COLUMN_DISPLAY_NAME");

                entity.Property(e => e.ColumnField)
                    .HasMaxLength(50)
                    .HasColumnName("COLUMN_FIELD");

                entity.Property(e => e.ColumnParameter).HasColumnName("COLUMN_PARAMETER");

                entity.Property(e => e.ColumnStatus).HasColumnName("COLUMN_STATUS");

                entity.Property(e => e.ColumnTable).HasColumnName("COLUMN_TABLE");

                entity.Property(e => e.Status).HasColumnName("STATUS");
            });

            modelBuilder.Entity<ParamMappingTabHdr>(entity =>
            {
                entity.HasKey(e => new { e.CodeComp, e.CodeOrg, e.TabNo, e.MapType });

                entity.ToTable("PARAM_MAPPING_TAB_HDR");

                entity.Property(e => e.CodeComp)
                    .HasColumnName("CODE_COMP")
                    .HasComment("Company code");

                entity.Property(e => e.CodeOrg)
                    .HasColumnName("CODE_ORG")
                    .HasComment("Organization code");

                entity.Property(e => e.TabNo).HasColumnName("TAB_NO");

                entity.Property(e => e.MapType)
                    .HasColumnName("MAP_TYPE")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.AuditCreatedDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("AUDIT_CREATED_DATE")
                    .HasComment("Date of this user being created");

                entity.Property(e => e.AuditCreatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_CREATED_USER")
                    .HasComment("User who created record for this ID");

                entity.Property(e => e.AuditUpdatedDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("AUDIT_UPDATED_DATE")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date of this record being updated");

                entity.Property(e => e.AuditUpdatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_UPDATED_USER")
                    .HasComment("User who update record for this ID");

                entity.Property(e => e.Status).HasColumnName("STATUS");

                entity.Property(e => e.TabDisplayName)
                    .HasMaxLength(50)
                    .HasColumnName("TAB_DISPLAY_NAME");
            });

            modelBuilder.Entity<ParamRoute>(entity =>
            {
                entity.HasKey(e => new { e.CodeComp, e.CodeOrg, e.RouteCode })
                    .HasName("Pk_PARAM_ROUTE_ROUTE_CODE");

                entity.ToTable("PARAM_ROUTE");

                entity.HasComment("Grouping of location codes to be assign as redflag routing");

                entity.Property(e => e.CodeComp)
                    .HasColumnName("CODE_COMP")
                    .HasDefaultValueSql("((1))")
                    .HasComment("Company Code");

                entity.Property(e => e.CodeOrg)
                    .HasColumnName("CODE_ORG")
                    .HasDefaultValueSql("((1))")
                    .HasComment("Code Organization");

                entity.Property(e => e.RouteCode)
                    .HasMaxLength(20)
                    .HasColumnName("ROUTE_CODE")
                    .HasComment("A group of location to be taken as a place (cor_branch_group)");

                entity.Property(e => e.AuditCreatedDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("AUDIT_CREATED_DATE")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date of record being created");

                entity.Property(e => e.AuditCreatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_CREATED_USER")
                    .HasComment("User ID who created the record");

                entity.Property(e => e.AuditUpdateDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("AUDIT_UPDATE_DATE")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the record being updated");

                entity.Property(e => e.AuditUpdatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_UPDATED_USER")
                    .HasComment("User ID who update the record");

                entity.Property(e => e.ConfigStatus)
                    .HasColumnName("CONFIG_STATUS")
                    .HasComment("Status of the routing (0D1E)");

                entity.Property(e => e.RouteDesc)
                    .HasMaxLength(250)
                    .HasColumnName("ROUTE_DESC")
                    .HasComment("Description of the grouping location");

                entity.Property(e => e.RouteList)
                    .HasMaxLength(500)
                    .HasColumnName("ROUTE_LIST")
                    .HasComment("List of location codes to be added into group");

                entity.Property(e => e.RouteName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ROUTE_NAME")
                    .HasComment("Name of the grouping location");
            });

            modelBuilder.Entity<ParamRptHdr>(entity =>
            {
                entity.HasKey(e => new { e.CodeComp, e.CodeOrg, e.ReportId })
                    .HasName("Idx_PARAM_RPT_HDR");

                entity.ToTable("PARAM_RPT_HDR");

                entity.Property(e => e.CodeComp)
                    .HasColumnName("CODE_COMP")
                    .HasDefaultValueSql("((1))")
                    .HasComment("Company Code");

                entity.Property(e => e.CodeOrg)
                    .HasColumnName("CODE_ORG")
                    .HasDefaultValueSql("((1))")
                    .HasComment("Organization Code");

                entity.Property(e => e.ReportId)
                    .HasMaxLength(50)
                    .HasColumnName("REPORT_ID")
                    .HasComment("Template ID for created template");

                entity.Property(e => e.AuditCreatedDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("AUDIT_CREATED_DATE")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("date created");

                entity.Property(e => e.AuditCreatedUser)
                    .HasMaxLength(100)
                    .HasColumnName("AUDIT_CREATED_USER");

                entity.Property(e => e.AuditUpdatedDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("AUDIT_UPDATED_DATE")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date updated");

                entity.Property(e => e.AuditUpdatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_UPDATED_USER");

                entity.Property(e => e.ReportCountry)
                    .HasColumnName("REPORT_COUNTRY")
                    .HasComment("To load coutry available for STR in config_codes_dtl");

                entity.Property(e => e.ReportName)
                    .HasMaxLength(100)
                    .HasColumnName("REPORT_NAME")
                    .HasComment("Name for template created");

                entity.Property(e => e.ReportStatus)
                    .HasColumnName("REPORT_STATUS")
                    .HasDefaultValueSql("((1))")
                    .HasComment("0-inactive\\n1-active");

                entity.Property(e => e.ReportType)
                    .IsRequired()
                    .HasMaxLength(15)
                    .HasColumnName("REPORT_TYPE")
                    .HasDefaultValueSql("((1))")
                    .HasComment("1-CTR\\n2-STR");
            });

            modelBuilder.Entity<ParamSmsemail>(entity =>
            {
                entity.HasKey(e => new { e.CompCode, e.CodeOrg, e.GrpKey });

                entity.ToTable("PARAM_SMSEMAIL");

                entity.HasComment("To configure template group for email / sms");

                entity.Property(e => e.CompCode)
                    .HasColumnName("COMP_CODE")
                    .HasComment("Company Code");

                entity.Property(e => e.CodeOrg)
                    .HasColumnName("CODE_ORG")
                    .HasComment("Organization Code");

                entity.Property(e => e.GrpKey)
                    .HasColumnName("GRP_KEY")
                    .HasComment("Key ID for email group");

                entity.Property(e => e.AuditCreatedDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("AUDIT_CREATED_DATE")
                    .HasComment("Date of this template created");

                entity.Property(e => e.AuditCreatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_CREATED_USER")
                    .HasComment("User who created this template");

                entity.Property(e => e.AuditUpdatedDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("AUDIT_UPDATED_DATE")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date of this template updated");

                entity.Property(e => e.AuditUpdatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_UPDATED_USER")
                    .HasComment("User who updated this template");

                entity.Property(e => e.EmailAttachment)
                    .HasMaxLength(100)
                    .HasColumnName("EMAIL_ATTACHMENT")
                    .HasComment("Email attachment");

                entity.Property(e => e.EmailCc)
                    .HasMaxLength(256)
                    .HasColumnName("EMAIL_CC")
                    .HasComment("CC email");

                entity.Property(e => e.EmailMsg)
                    .HasColumnName("EMAIL_MSG")
                    .HasComment("Email message");

                entity.Property(e => e.EmailSendfrom)
                    .HasMaxLength(256)
                    .HasColumnName("EMAIL_SENDFROM")
                    .HasComment("Sender email");

                entity.Property(e => e.EmailSendto)
                    .HasMaxLength(256)
                    .HasColumnName("EMAIL_SENDTO")
                    .HasComment("Receiver email");

                entity.Property(e => e.EmailSubject)
                    .HasMaxLength(256)
                    .HasColumnName("EMAIL_SUBJECT")
                    .HasComment("Title of email (subject)");

                entity.Property(e => e.FlagType)
                    .HasColumnName("FLAG_TYPE")
                    .HasComment("0-both / 1-SMS / 2 Email");

                entity.Property(e => e.GrpDesc)
                    .HasMaxLength(50)
                    .HasColumnName("GRP_DESC")
                    .HasComment("Description of email group");

                entity.Property(e => e.GrpModule)
                    .HasColumnName("GRP_MODULE")
                    .HasComment("Module applicable for this sms/email");

                entity.Property(e => e.GrpTemplateNo)
                    .HasMaxLength(50)
                    .HasColumnName("GRP_TEMPLATE_NO")
                    .HasComment("To send email/sms within these template no");

                entity.Property(e => e.InfoRemarks)
                    .HasMaxLength(150)
                    .HasColumnName("INFO_REMARKS")
                    .HasComment("remarks for template");

                entity.Property(e => e.InfoStatus)
                    .HasColumnName("INFO_STATUS")
                    .HasComment("active / inactive");

                entity.Property(e => e.SmsCc)
                    .HasMaxLength(20)
                    .HasColumnName("SMS_CC")
                    .HasComment("CC to for sent message");

                entity.Property(e => e.SmsMsg)
                    .HasMaxLength(160)
                    .HasColumnName("SMS_MSG")
                    .HasComment("Message of email");

                entity.Property(e => e.SmsSendTo)
                    .HasMaxLength(20)
                    .HasColumnName("SMS_SEND_TO")
                    .HasComment("receiver of message");
            });

            modelBuilder.Entity<ParamStaff>(entity =>
            {
                entity.HasKey(e => new { e.CodeComp, e.CodeOrg });

                entity.ToTable("PARAM_STAFF");

                entity.HasComment("Default setup of user");

                entity.Property(e => e.CodeComp)
                    .HasColumnName("CODE_COMP")
                    .HasComment("Company Code");

                entity.Property(e => e.CodeOrg)
                    .HasColumnName("CODE_ORG")
                    .HasComment("Organization Code");

                entity.Property(e => e.AuditCreatedDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("AUDIT_CREATED_DATE")
                    .HasComment("Date of this record created");

                entity.Property(e => e.AuditCreatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_CREATED_USER")
                    .HasComment("User who created this record");

                entity.Property(e => e.AuditUpdatedDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("AUDIT_UPDATED_DATE")
                    .HasComment("Date of this record updated");

                entity.Property(e => e.AuditUpdatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_UPDATED_USER")
                    .HasComment("User who updated this record");

                entity.Property(e => e.EmailLinkExpiry).HasColumnName("EMAIL_LINK_EXPIRY");

                entity.Property(e => e.FlagAml)
                    .HasColumnName("FLAG_AML")
                    .HasComment("1-AML Accessible / 0-AML Maintenance Mode (inaccessible)");

                entity.Property(e => e.FlagBi)
                    .HasColumnName("FLAG_BI")
                    .HasComment("1-BI Accessible / 0-BI Maintenance Mode (inaccessible)");

                entity.Property(e => e.LicCompName)
                    .HasMaxLength(100)
                    .HasColumnName("LIC_COMP_NAME")
                    .HasComment("Company Name");

                entity.Property(e => e.LicExpiryDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("LIC_EXPIRY_DATE")
                    .HasComment("License expiry date");

                entity.Property(e => e.LicGracePeriod)
                    .HasColumnName("LIC_GRACE_PERIOD")
                    .HasComment("License grace period");

                entity.Property(e => e.LicVerifiedLicensedt)
                    .HasColumnName("LIC_VERIFIED_LICENSEDT")
                    .HasComment("Last license verified");

                entity.Property(e => e.LoginEndDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("LOGIN_END_DATE")
                    .HasComment("End date allow for whole system user");

                entity.Property(e => e.LoginEndTime)
                    .HasColumnName("LOGIN_END_TIME")
                    .HasComment("End time allow for whole system user");

                entity.Property(e => e.LoginLanguage)
                    .HasMaxLength(8)
                    .HasColumnName("LOGIN_LANGUAGE")
                    .HasComment("Primary system language");

                entity.Property(e => e.LoginLanguageRec)
                    .HasMaxLength(8)
                    .HasColumnName("LOGIN_LANGUAGE_REC")
                    .HasComment("Secondary system language");

                entity.Property(e => e.LoginSso)
                    .HasColumnName("LOGIN_SSO")
                    .HasDefaultValueSql("((0))")
                    .HasComment("Single SignOn\\n0-NoSSO\\n1-AD\\n2-MultiAD");

                entity.Property(e => e.LoginStartDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("LOGIN_START_DATE")
                    .HasComment("Start date allow for whole system user");

                entity.Property(e => e.LoginStartTime)
                    .HasColumnName("LOGIN_START_TIME")
                    .HasComment("Start time allow for whole system user");

                entity.Property(e => e.LoginTheme)
                    .HasColumnName("LOGIN_THEME")
                    .HasComment("Primary theme");

                entity.Property(e => e.LoginTryAllow)
                    .HasColumnName("LOGIN_TRY_ALLOW")
                    .HasComment("No of login attempt allowed");

                entity.Property(e => e.PwBlankchar)
                    .HasColumnName("PW_BLANKCHAR")
                    .HasComment("Allow blank char password");

                entity.Property(e => e.PwChangeForce)
                    .HasColumnName("PW_CHANGE_FORCE")
                    .HasComment("1-Required password change on next login (after reset) / 0- using password set on field PW_DEFAULT_TYPE");

                entity.Property(e => e.PwChangeForceReset)
                    .HasColumnName("PW_CHANGE_FORCE_RESET")
                    .HasComment("For existing user to change password after reset. 1-Required password change on next login (after reset) / 0- using password set on field PW_DEFAULT_TYPE");

                entity.Property(e => e.PwChangeFreq)
                    .HasColumnName("PW_CHANGE_FREQ")
                    .HasComment("No of day require for next password changes");

                entity.Property(e => e.PwConsecutive)
                    .HasColumnName("PW_CONSECUTIVE")
                    .HasComment("No of character allowed consecutive identical");

                entity.Property(e => e.PwDefaultType)
                    .HasColumnName("PW_DEFAULT_TYPE")
                    .HasComment("1-same as default value / 2-same as userid / 3-same as last 4 digit IC");

                entity.Property(e => e.PwDefaultVal)
                    .HasColumnName("PW_DEFAULT_VAL")
                    .HasComment("Default password value");

                entity.Property(e => e.PwMaxlength)
                    .HasColumnName("PW_MAXLENGTH")
                    .HasComment("Maximum length of password");

                entity.Property(e => e.PwMinlength)
                    .HasColumnName("PW_MINLENGTH")
                    .HasComment("Minimum length of password");

                entity.Property(e => e.PwRestricted)
                    .HasColumnName("PW_RESTRICTED")
                    .HasComment("List of restricted password in the system");

                entity.Property(e => e.PwSpecialchar)
                    .HasColumnName("PW_SPECIALCHAR")
                    .HasComment("Required special character in password");

                entity.Property(e => e.PwStrongAllow)
                    .HasColumnName("PW_STRONG_ALLOW")
                    .HasComment("Allow Strong Password Policy 1 - true / 0 - false");

                entity.Property(e => e.UserAuth)
                    .HasColumnName("USER_AUTH")
                    .HasComment("0-Disable authorization\\n1-Require 1 level to approve user\\n2-Require 2 level to approve user");

                entity.Property(e => e.UserAuthSameLevel)
                    .HasColumnName("USER_AUTH_SAME_LEVEL")
                    .HasComment("0-Disable same admin authorization\\n1-Enable same admin authorization");

                entity.Property(e => e.UserAutoid)
                    .HasColumnName("USER_AUTOID")
                    .HasComment("To auto generate user id base on system running number");

                entity.Property(e => e.UserMaxlength)
                    .HasColumnName("USER_MAXLENGTH")
                    .HasComment("Maximum length of user id");

                entity.Property(e => e.UserMinlength)
                    .HasColumnName("USER_MINLENGTH")
                    .HasComment("Minimum length of user id");
            });

            modelBuilder.Entity<ParamStrDtl>(entity =>
            {
                entity.HasKey(e => new { e.CodeComp, e.CodeOrg, e.ReportId, e.QuestCategory, e.QuestNo })
                    .HasName("Idx_PARAM_STR_DTL");

                entity.ToTable("PARAM_STR_DTL");

                entity.Property(e => e.CodeComp)
                    .HasColumnName("CODE_COMP")
                    .HasDefaultValueSql("((1))")
                    .HasComment("Code Company");

                entity.Property(e => e.CodeOrg)
                    .HasColumnName("CODE_ORG")
                    .HasDefaultValueSql("((1))")
                    .HasComment("Code Organization");

                entity.Property(e => e.ReportId)
                    .HasMaxLength(50)
                    .HasColumnName("REPORT_ID")
                    .HasComment("STR template ID");

                entity.Property(e => e.QuestCategory)
                    .HasColumnName("QUEST_CATEGORY")
                    .HasDefaultValueSql("((1))")
                    .HasComment("Category if the questionnaire\\n1-Client Info\\n2-Account Info\\n3-Transaction Info\\n4-Finding info");

                entity.Property(e => e.QuestNo)
                    .HasColumnName("QUEST_NO")
                    .HasComment("Question No");

                entity.Property(e => e.AnsCode)
                    .HasColumnName("ANS_CODE")
                    .HasDefaultValueSql("((0))")
                    .HasComment("Code_Sub to link to CONFIG_CODES_DTL");

                entity.Property(e => e.AnsCompulsory)
                    .HasColumnName("ANS_COMPULSORY")
                    .HasComment("To reject the submission if this field is empty\\nTo enable the compulsory tag (*) on the question");

                entity.Property(e => e.AnsDefault)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("ANS_DEFAULT")
                    .HasComment("Default answer to be fill if no input");

                entity.Property(e => e.AnsField)
                    .HasMaxLength(50)
                    .HasColumnName("ANS_FIELD")
                    .HasComment("Field Name from dropdownlist");

                entity.Property(e => e.AnsType)
                    .HasColumnName("ANS_TYPE")
                    .HasDefaultValueSql("((1))")
                    .HasComment("0-Display Quest Text as header\\n1-Open Text (Text Box)\\n2-Dropdown\\n3-Radio Button\\n4-1 day Calendar\\n5-Text Area (expandable)\\n");

                entity.Property(e => e.AuditCreatedDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("AUDIT_CREATED_DATE")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date created");

                entity.Property(e => e.AuditCreatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_CREATED_USER")
                    .HasComment("User creating this record");

                entity.Property(e => e.AuditUpdatedDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("AUDIT_UPDATED_DATE")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date record updated");

                entity.Property(e => e.AuditUpdatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_UPDATED_USER")
                    .HasComment("User updating this record");

                entity.Property(e => e.DisableInput).HasColumnName("DISABLE_INPUT");

                entity.Property(e => e.DispAns)
                    .HasColumnName("DISP_ANS")
                    .HasDefaultValueSql("((1))")
                    .HasComment("0 - Display answer field\\n1 - Display answer field\\n2 - Display aswer field with disable state (uneditable)");

                entity.Property(e => e.DispHdr)
                    .HasColumnName("DISP_HDR")
                    .HasComment("To change the theme text as an header\\n0-default (normal)\\n1-header");

                entity.Property(e => e.DispRemarks)
                    .HasColumnName("DISP_REMARKS")
                    .HasDefaultValueSql("((1))")
                    .HasComment("0 - Display QUEST_REMARKS\\n1 - Display QUEST_REMARKS");

                entity.Property(e => e.DispText)
                    .HasColumnName("DISP_TEXT")
                    .HasDefaultValueSql("((1))")
                    .HasComment("0 - Display QUEST_TEXT\\n1 - Display QUEST_TEXT");

                entity.Property(e => e.GovUpt).HasColumnName("GOV_UPT");

                entity.Property(e => e.IndivUpt).HasColumnName("INDIV_UPT");

                entity.Property(e => e.LegalUpt).HasColumnName("LEGAL_UPT");

                entity.Property(e => e.NgoUpt).HasColumnName("NGO_UPT");

                entity.Property(e => e.OutputInd)
                    .HasColumnName("OUTPUT_IND")
                    .HasComment("Output indicator 0 (BOTH) 1 (EXCEL) 2 (XML)");

                entity.Property(e => e.QuestField)
                    .HasMaxLength(50)
                    .HasColumnName("QUEST_FIELD")
                    .HasComment("Field in REPORT_STR to be displayed");

                entity.Property(e => e.QuestRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("QUEST_REMARKS")
                    .HasComment("Additional remark to be displayed above the answer field, this usually represent the sample answer for user to understand the actual question");

                entity.Property(e => e.QuestText)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("QUEST_TEXT")
                    .HasComment("Question to be displayed on left hand side");

                entity.Property(e => e.QuestTypeInd)
                    .HasColumnName("QUEST_TYPE_IND")
                    .HasComment("Question indicator whether it is for Individual (1) or Organization/LegalEntity/Corporate (2) or both/common (0)");

                entity.Property(e => e.StrHist)
                    .HasColumnName("STR_HIST")
                    .HasComment("The latest sequence generated due to changes of data");

                entity.Property(e => e.StrStatus)
                    .HasColumnName("STR_STATUS")
                    .HasDefaultValueSql("((1))")
                    .HasComment("0-Disable question (skip all field checking)\\n1-Enable question");

                entity.Property(e => e.XmlAction1).HasColumnName("XML_ACTION1");

                entity.Property(e => e.XmlAction2).HasColumnName("XML_ACTION2");

                entity.Property(e => e.XmlAction3).HasColumnName("XML_ACTION3");

                entity.Property(e => e.XmlLevel1)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("XML_LEVEL1")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.XmlLevel2)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("XML_LEVEL2")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.XmlLevel3)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("XML_LEVEL3")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.XmlLevel4)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("XML_LEVEL4")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.XmlLevel5)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("XML_LEVEL5")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.XmlLevel6)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("XML_LEVEL6")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.XmlSectionNo).HasColumnName("XML_SECTION_NO");

                entity.Property(e => e.XmlSeqNo).HasColumnName("XML_SEQ_NO");

                entity.Property(e => e.XmlSubSeq).HasColumnName("XML_SUB_SEQ");
            });

            modelBuilder.Entity<ParamStrHdr>(entity =>
            {
                entity.HasKey(e => new { e.CodeComp, e.CodeOrg, e.StrId })
                    .HasName("Idx_PARAM_STR_HDR");

                entity.ToTable("PARAM_STR_HDR");

                entity.Property(e => e.CodeComp)
                    .HasColumnName("CODE_COMP")
                    .HasComment("Company Code");

                entity.Property(e => e.CodeOrg)
                    .HasColumnName("CODE_ORG")
                    .HasComment("Organization Code");

                entity.Property(e => e.StrId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("STR_ID")
                    .HasComment("Template ID for created template");

                entity.Property(e => e.AuditCreatedDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("AUDIT_CREATED_DATE")
                    .HasComment("date created");

                entity.Property(e => e.AuditCreatedUser)
                    .HasMaxLength(100)
                    .HasColumnName("AUDIT_CREATED_USER");

                entity.Property(e => e.AuditUpdatedDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("AUDIT_UPDATED_DATE")
                    .HasComment("Date updated");

                entity.Property(e => e.AuditUpdatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_UPDATED_USER");

                entity.Property(e => e.StrCountry)
                    .HasColumnName("STR_COUNTRY")
                    .HasComment("To load coutry available for STR in config_codes_dtl");

                entity.Property(e => e.StrName)
                    .HasMaxLength(100)
                    .HasColumnName("STR_NAME")
                    .HasComment("Name for template created");

                entity.Property(e => e.StrStatus)
                    .HasColumnName("STR_STATUS")
                    .HasComment("0-inactive\\n1-active");

                entity.Property(e => e.StrType)
                    .HasColumnName("STR_TYPE")
                    .HasComment("1-CTR\\n2-STR");
            });

            modelBuilder.Entity<ParamUser>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PARAM_USER");

                entity.HasComment("Default setup of user");

                entity.Property(e => e.AuditCreatedDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("AUDIT_CREATED_DATE")
                    .HasComment("Date of this record created");

                entity.Property(e => e.AuditCreatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_CREATED_USER")
                    .HasComment("User who created this record");

                entity.Property(e => e.AuditUpdatedDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("AUDIT_UPDATED_DATE")
                    .HasComment("Date of this record updated");

                entity.Property(e => e.AuditUpdatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_UPDATED_USER")
                    .HasComment("User who updated this record");

                entity.Property(e => e.CodeComp)
                    .HasColumnName("CODE_COMP")
                    .HasComment("Company Code");

                entity.Property(e => e.CodeOrg)
                    .HasColumnName("CODE_ORG")
                    .HasComment("Organization Code");

                entity.Property(e => e.FlagAml)
                    .HasColumnName("FLAG_AML")
                    .HasComment("1-AML Accessible / 0-AML Maintenance Mode (inaccessible)");

                entity.Property(e => e.FlagBi)
                    .HasColumnName("FLAG_BI")
                    .HasComment("1-BI Accessible / 0-BI Maintenance Mode (inaccessible)");

                entity.Property(e => e.LicCompName)
                    .HasMaxLength(100)
                    .HasColumnName("LIC_COMP_NAME")
                    .HasComment("Company Name");

                entity.Property(e => e.LicExpiryDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("LIC_EXPIRY_DATE")
                    .HasComment("License expiry date");

                entity.Property(e => e.LicGracePeriod)
                    .HasColumnName("LIC_GRACE_PERIOD")
                    .HasComment("License grace period");

                entity.Property(e => e.LicVerifiedLicensedt)
                    .HasColumnName("LIC_VERIFIED_LICENSEDT")
                    .HasComment("Last license verified");

                entity.Property(e => e.LoginEndDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("LOGIN_END_DATE")
                    .HasComment("End date allow for whole system user");

                entity.Property(e => e.LoginEndTime)
                    .HasColumnName("LOGIN_END_TIME")
                    .HasComment("End time allow for whole system user");

                entity.Property(e => e.LoginLanguage)
                    .HasMaxLength(8)
                    .HasColumnName("LOGIN_LANGUAGE")
                    .HasComment("Primary system language");

                entity.Property(e => e.LoginLanguageRec)
                    .HasMaxLength(8)
                    .HasColumnName("LOGIN_LANGUAGE_REC")
                    .HasComment("Secondary system language");

                entity.Property(e => e.LoginSso)
                    .HasColumnName("LOGIN_SSO")
                    .HasComment("Single SignOn\\n0-NoSSO\\n1-AD\\n2-MultiAD");

                entity.Property(e => e.LoginStartDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("LOGIN_START_DATE")
                    .HasComment("Start date allow for whole system user");

                entity.Property(e => e.LoginStartTime)
                    .HasColumnType("datetime")
                    .HasColumnName("LOGIN_START_TIME")
                    .HasComment("Start time allow for whole system user");

                entity.Property(e => e.LoginTheme)
                    .HasColumnName("LOGIN_THEME")
                    .HasComment("Primary theme");

                entity.Property(e => e.LoginTryAllow)
                    .HasColumnName("LOGIN_TRY_ALLOW")
                    .HasComment("No of login attempt allowed");

                entity.Property(e => e.PwAge)
                    .HasColumnName("PW_AGE")
                    .HasComment("No of day require for next password changes");

                entity.Property(e => e.PwAgeHist).HasColumnName("PW_AGE_HIST");

                entity.Property(e => e.PwAgeLock)
                    .HasColumnName("PW_AGE_LOCK")
                    .HasComment("0-Disable / 1-Enable");

                entity.Property(e => e.PwBlankchar)
                    .HasColumnName("PW_BLANKCHAR")
                    .HasComment("Allow blank char password");

                entity.Property(e => e.PwChangeForce)
                    .HasColumnName("PW_CHANGE_FORCE")
                    .HasComment("1-Required password change on next login (after reset) / 0- using password set on field PW_DEFAULT_TYPE");

                entity.Property(e => e.PwChangeForceReset)
                    .HasColumnName("PW_CHANGE_FORCE_RESET")
                    .HasComment("For existing user to change password after reset. 1-Required password change on next login (after reset) / 0- using password set on field PW_DEFAULT_TYPE");

                entity.Property(e => e.PwConsecutive)
                    .HasColumnName("PW_CONSECUTIVE")
                    .HasComment("No of character allowed consecutive identical");

                entity.Property(e => e.PwDefaultType)
                    .HasColumnName("PW_DEFAULT_TYPE")
                    .HasComment("1-same as default value / 2-same as userid / 3-same as last 4 digit IC");

                entity.Property(e => e.PwDefaultVal)
                    .HasColumnName("PW_DEFAULT_VAL")
                    .HasComment("Default password value");

                entity.Property(e => e.PwExpiryMail)
                    .HasColumnName("PW_EXPIRY_MAIL")
                    .HasComment("0-Disable / 1-Enable");

                entity.Property(e => e.PwMaxlength)
                    .HasColumnName("PW_MAXLENGTH")
                    .HasComment("Maximum length of password");

                entity.Property(e => e.PwMinlength)
                    .HasColumnName("PW_MINLENGTH")
                    .HasComment("Minimum length of password");

                entity.Property(e => e.PwPolicy)
                    .HasColumnName("PW_POLICY")
                    .HasComment("0-Disable / 1-Enable");

                entity.Property(e => e.PwResetForce)
                    .HasColumnName("PW_RESET_FORCE")
                    .HasComment("Force change PW after reset");

                entity.Property(e => e.PwRestricted)
                    .HasColumnName("PW_RESTRICTED")
                    .HasComment("List of restricted password in the system");

                entity.Property(e => e.PwSpecialchar)
                    .HasColumnName("PW_SPECIALCHAR")
                    .HasComment("Required special character in password");

                entity.Property(e => e.PwStrongAllow)
                    .HasColumnName("PW_STRONG_ALLOW")
                    .HasComment("Allow Strong Password Policy 1 - true / 0 - false");

                entity.Property(e => e.UserAuth)
                    .HasColumnName("USER_AUTH")
                    .HasComment("0-Disable authorization\\n1-Require 1 level to approve user\\n2-Require 2 level to approve user");

                entity.Property(e => e.UserAuthSameLevel)
                    .HasColumnName("USER_AUTH_SAME_LEVEL")
                    .HasComment("0-Disable same admin authorization\\n1-Enable same admin authorization");

                entity.Property(e => e.UserAutoid)
                    .HasColumnName("USER_AUTOID")
                    .HasComment("To auto generate user id base on system running number");

                entity.Property(e => e.UserMaxlength)
                    .HasColumnName("USER_MAXLENGTH")
                    .HasComment("Maximum length of user id");

                entity.Property(e => e.UserMinlength)
                    .HasColumnName("USER_MINLENGTH")
                    .HasComment("Minimum length of user id");
            });

            modelBuilder.Entity<RelUbo>(entity =>
            {
                entity.HasKey(e => new { e.SeqNo, e.NoMaster, e.NoCif, e.CodeComp, e.NoUbo, e.CodeOrg });

                entity.ToTable("REL_UBOs");

                entity.Property(e => e.SeqNo)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("SEQ_NO");

                entity.Property(e => e.NoMaster)
                    .HasMaxLength(50)
                    .HasColumnName("NO_MASTER");

                entity.Property(e => e.NoCif)
                    .HasMaxLength(50)
                    .HasColumnName("NO_CIF");

                entity.Property(e => e.CodeComp).HasColumnName("CODE_COMP");

                entity.Property(e => e.NoUbo).HasColumnName("NO_UBO");

                entity.Property(e => e.CodeOrg).HasColumnName("CODE_ORG");

                entity.Property(e => e.AuditCreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("AUDIT_CREATED_DATE");

                entity.Property(e => e.AuditCreatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_CREATED_USER");

                entity.Property(e => e.BatchDate).HasColumnName("BATCH_DATE");

                entity.Property(e => e.BatchNo)
                    .HasMaxLength(15)
                    .HasColumnName("BATCH_NO");

                entity.Property(e => e.Buss)
                    .HasMaxLength(50)
                    .HasColumnName("BUSS");

                entity.Property(e => e.BussSect)
                    .HasMaxLength(50)
                    .HasColumnName("BUSS_SECT");

                entity.Property(e => e.CtcHome).HasColumnName("CTC_HOME");

                entity.Property(e => e.CtcMobile).HasColumnName("CTC_MOBILE");

                entity.Property(e => e.CtcOffice).HasColumnName("CTC_OFFICE");

                entity.Property(e => e.DataValue01)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE01");

                entity.Property(e => e.DataValue02)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE02");

                entity.Property(e => e.DataValue03)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE03");

                entity.Property(e => e.DataValue04)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE04");

                entity.Property(e => e.DataValue05)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE05");

                entity.Property(e => e.DataValue06)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE06");

                entity.Property(e => e.DataValue07)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE07");

                entity.Property(e => e.DataValue08)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE08");

                entity.Property(e => e.DataValue09)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE09");

                entity.Property(e => e.DataValue10)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE10");

                entity.Property(e => e.DataValue11)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE11");

                entity.Property(e => e.DataValue12)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE12");

                entity.Property(e => e.DataValue13)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE13");

                entity.Property(e => e.DataValue14)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE14");

                entity.Property(e => e.DataValue15)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE15");

                entity.Property(e => e.DataValue16)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE16");

                entity.Property(e => e.DataValue17)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE17");

                entity.Property(e => e.DataValue18)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE18");

                entity.Property(e => e.DataValue19)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE19");

                entity.Property(e => e.DataValue20)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE20");

                entity.Property(e => e.DataValue21)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE21");

                entity.Property(e => e.DataValue22)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE22");

                entity.Property(e => e.DataValue23)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE23");

                entity.Property(e => e.DataValue24)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE24");

                entity.Property(e => e.DataValue25)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE25");

                entity.Property(e => e.DataValue26)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE26");

                entity.Property(e => e.DataValue27)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE27");

                entity.Property(e => e.DataValue28)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE28");

                entity.Property(e => e.DataValue29)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE29");

                entity.Property(e => e.DataValue30)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE30");

                entity.Property(e => e.DataValue31)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE31");

                entity.Property(e => e.DataValue32)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE32");

                entity.Property(e => e.DataValue33)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE33");

                entity.Property(e => e.DataValue34)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE34");

                entity.Property(e => e.DataValue35)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE35");

                entity.Property(e => e.DataValue36)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE36");

                entity.Property(e => e.DataValue37)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE37");

                entity.Property(e => e.DataValue38)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE38");

                entity.Property(e => e.DataValue39)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE39");

                entity.Property(e => e.DataValue40)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE40");

                entity.Property(e => e.DataValue41)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE41");

                entity.Property(e => e.DataValue42)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE42");

                entity.Property(e => e.DataValue43)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE43");

                entity.Property(e => e.DataValue44)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE44");

                entity.Property(e => e.DataValue45)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE45");

                entity.Property(e => e.DataValue46)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE46");

                entity.Property(e => e.DataValue47)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE47");

                entity.Property(e => e.DataValue48)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE48");

                entity.Property(e => e.DataValue49)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE49");

                entity.Property(e => e.DataValue50)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE50");

                entity.Property(e => e.DataValue51)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE51");

                entity.Property(e => e.DataValue52)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE52");

                entity.Property(e => e.DataValue53)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE53");

                entity.Property(e => e.DataValue54)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE54");

                entity.Property(e => e.DataValue55)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE55");

                entity.Property(e => e.Email)
                    .HasMaxLength(50)
                    .HasColumnName("EMAIL");

                entity.Property(e => e.Id2No)
                    .HasMaxLength(50)
                    .HasColumnName("ID2_NO");

                entity.Property(e => e.Id2Type).HasColumnName("ID2_TYPE");

                entity.Property(e => e.IdNo)
                    .HasMaxLength(50)
                    .HasColumnName("ID_NO");

                entity.Property(e => e.IdType).HasColumnName("ID_TYPE");

                entity.Property(e => e.InfoAdd1)
                    .HasMaxLength(100)
                    .HasColumnName("INFO_ADD1");

                entity.Property(e => e.InfoAdd2)
                    .HasMaxLength(100)
                    .HasColumnName("INFO_ADD2");

                entity.Property(e => e.InfoAdd3)
                    .HasMaxLength(100)
                    .HasColumnName("INFO_ADD3");

                entity.Property(e => e.InfoAdd4)
                    .HasMaxLength(100)
                    .HasColumnName("INFO_ADD4");

                entity.Property(e => e.InfoAge).HasColumnName("INFO_AGE");

                entity.Property(e => e.InfoCity)
                    .HasMaxLength(50)
                    .HasColumnName("INFO_CITY");

                entity.Property(e => e.InfoCountry)
                    .HasMaxLength(50)
                    .HasColumnName("INFO_COUNTRY");

                entity.Property(e => e.InfoDob).HasColumnName("INFO_DOB");

                entity.Property(e => e.InfoGen).HasColumnName("INFO_GEN");

                entity.Property(e => e.InfoName)
                    .HasMaxLength(50)
                    .HasColumnName("INFO_NAME");

                entity.Property(e => e.InfoNat).HasColumnName("INFO_NAT");

                entity.Property(e => e.InfoPcode)
                    .HasMaxLength(50)
                    .HasColumnName("INFO_PCODE");

                entity.Property(e => e.InfoRes).HasColumnName("INFO_RES");

                entity.Property(e => e.InfoState)
                    .HasMaxLength(50)
                    .HasColumnName("INFO_STATE");

                entity.Property(e => e.InfoType)
                    .HasMaxLength(50)
                    .HasColumnName("INFO_TYPE");

                entity.Property(e => e.NoRef)
                    .HasMaxLength(50)
                    .HasColumnName("NO_REF");

                entity.Property(e => e.Occ)
                    .HasMaxLength(50)
                    .HasColumnName("OCC");

                entity.Property(e => e.OccPos)
                    .HasMaxLength(50)
                    .HasColumnName("OCC_POS");

                entity.Property(e => e.OccSect)
                    .HasMaxLength(50)
                    .HasColumnName("OCC_SECT");

                entity.Property(e => e.RelayStat)
                    .HasMaxLength(50)
                    .HasColumnName("RELAY_STAT");
            });

            modelBuilder.Entity<RfAlertAssigned>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("RF_ALERT_ASSIGNED");

                entity.HasIndex(e => e.RfId, "fkIdx_414");

                entity.HasIndex(e => e.CaseId, "fkIdx_418");

                entity.Property(e => e.AuditDateCreated)
                    .HasColumnType("datetime")
                    .HasColumnName("AUDIT_DATE_CREATED");

                entity.Property(e => e.AuditDateUpdated)
                    .HasColumnType("datetime")
                    .HasColumnName("AUDIT_DATE_UPDATED");

                entity.Property(e => e.CaseId)
                    .HasColumnName("CASE_ID")
                    .HasComment("ID of case being made");

                entity.Property(e => e.CodeComp)
                    .HasColumnName("CODE_COMP")
                    .HasComment("Company code");

                entity.Property(e => e.CodeOrg)
                    .HasColumnName("CODE_ORG")
                    .HasComment("Organization code");

                entity.Property(e => e.ModuleId)
                    .HasColumnName("MODULE_ID")
                    .HasComment("Module ID of the redflag");

                entity.Property(e => e.RfDate).HasColumnName("RF_DATE");

                entity.Property(e => e.RfId)
                    .HasColumnName("RF_ID")
                    .HasComment("ID of redflag");

                entity.Property(e => e.RfStatus).HasColumnName("RF_STATUS");
            });

            modelBuilder.Entity<RfCase>(entity =>
            {
                entity.HasKey(e => e.CaseId);

                entity.ToTable("RF_CASE");

                entity.Property(e => e.CaseId).HasColumnName("CASE_ID");

                entity.Property(e => e.AuditDateCreated)
                    .HasColumnType("datetime")
                    .HasColumnName("AUDIT_DATE_CREATED");

                entity.Property(e => e.AuditDateUpdated)
                    .HasColumnType("datetime")
                    .HasColumnName("AUDIT_DATE_UPDATED");

                entity.Property(e => e.AuditUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_USER")
                    .HasComment("User attending alert");

                entity.Property(e => e.AuditUserLevel)
                    .HasColumnName("AUDIT_USER_LEVEL")
                    .HasComment("Level of Role User");

                entity.Property(e => e.CaseLevel)
                    .HasColumnName("CASE_LEVEL")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.CaseStatus).HasColumnName("CASE_STATUS");

                entity.Property(e => e.CaseSubStatus).HasColumnName("CASE_SUB_STATUS");

                entity.Property(e => e.CodeComp)
                    .HasColumnName("CODE_COMP")
                    .HasComment("Company Code");

                entity.Property(e => e.CodeOrg)
                    .HasColumnName("CODE_ORG")
                    .HasComment("Organization Code");

                entity.Property(e => e.ModuleId)
                    .HasColumnName("MODULE_ID")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.NoCif)
                    .HasMaxLength(50)
                    .HasColumnName("NO_CIF")
                    .HasComment("CIF No of customer");

                entity.Property(e => e.NoMaster)
                    .HasMaxLength(50)
                    .HasColumnName("NO_MASTER")
                    .HasComment("Master Number of client");

                entity.Property(e => e.ReviewCase)
                    .HasColumnName("REVIEW_CASE")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<RfOdd>(entity =>
            {
                entity.HasKey(e => new { e.CodeComp, e.CodeOrg, e.ModuleId, e.RfId });

                entity.ToTable("RF_ODD");

                entity.HasIndex(e => new { e.CodeComp, e.CodeOrg, e.CaseId, e.RfId }, "Unq_RF_ODD_CODE_COMP")
                    .IsUnique();

                entity.Property(e => e.CodeComp)
                    .HasColumnName("CODE_COMP")
                    .HasComment("company code");

                entity.Property(e => e.CodeOrg)
                    .HasColumnName("CODE_ORG")
                    .HasComment("organization code");

                entity.Property(e => e.ModuleId)
                    .HasColumnName("MODULE_ID")
                    .HasComment("module of redflag");

                entity.Property(e => e.RfId)
                    .HasColumnName("RF_ID")
                    .HasComment("red flag id");

                entity.Property(e => e.AuditCreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("AUDIT_CREATED_DATE")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the record being created");

                entity.Property(e => e.AuditCreatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_CREATED_USER")
                    .HasComment("User created the record");

                entity.Property(e => e.AuditStatus)
                    .HasColumnName("AUDIT_STATUS")
                    .HasComment("current redflag status");

                entity.Property(e => e.AuditUpdatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("AUDIT_UPDATED_DATE")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the record being updated");

                entity.Property(e => e.AuditUpdatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_UPDATED_USER")
                    .HasComment("user who modify the record");

                entity.Property(e => e.CaseId)
                    .HasColumnName("CASE_ID")
                    .HasComment("assign case id");

                entity.Property(e => e.CommDate)
                    .HasColumnType("datetime")
                    .HasColumnName("COMM_DATE")
                    .HasComment("Display the date that ODD is generated");

                entity.Property(e => e.FollowupStatus)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FOLLOWUP_STATUS")
                    .HasComment("Display the follow up status of the ODD. Allow user to update.");

                entity.Property(e => e.NextReviewDate)
                    .HasColumnType("datetime")
                    .HasColumnName("NEXT_REVIEW_DATE")
                    .HasComment("Display the date that ODD needs to complete be review before next renewal date");

                entity.Property(e => e.NoCif)
                    .HasMaxLength(30)
                    .HasColumnName("NO_CIF")
                    .HasComment("Customer's identification no");

                entity.Property(e => e.Reason)
                    .HasMaxLength(20)
                    .HasColumnName("REASON")
                    .HasComment("Display the reason review of the ODD. Allow user to update.");

                entity.Property(e => e.TagCaseAssign)
                    .HasColumnName("TAG_CASE_ASSIGN")
                    .HasComment("case ID where this redflag being assigned");

                entity.Property(e => e.TagFraud)
                    .HasMaxLength(1)
                    .HasColumnName("TAG_FRAUD")
                    .HasComment("tagging of fraud");

                entity.Property(e => e.TagStaff)
                    .HasColumnName("TAG_STAFF")
                    .HasComment("tagging of staff");
            });

            modelBuilder.Entity<RfOddAct>(entity =>
            {
                entity.HasKey(e => e.CodeSeq)
                    .HasName("Pk_RF_ODD_ACT_CODE_SEQ_1");

                entity.ToTable("RF_ODD_ACT");

                entity.HasComment("Remarks performed on watchlist module");

                entity.Property(e => e.CodeSeq).HasColumnName("CODE_SEQ");

                entity.Property(e => e.AuditAction)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_ACTION");

                entity.Property(e => e.AuditCreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("AUDIT_CREATED_DATE")
                    .HasComment("Date time activity being executed");

                entity.Property(e => e.AuditCreatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_CREATED_USER")
                    .HasComment("User ID of staff performed activity");

                entity.Property(e => e.AuditRemarks)
                    .HasColumnName("AUDIT_REMARKS")
                    .HasComment("Remarks fill in by users");

                entity.Property(e => e.AuditStatus)
                    .HasColumnName("AUDIT_STATUS")
                    .HasComment("Status changed upon activity performed");

                entity.Property(e => e.AuditSubStatus)
                    .HasColumnName("AUDIT_SUB_STATUS")
                    .HasComment("Status changed upon activity performed");

                entity.Property(e => e.CaseId)
                    .HasColumnName("CASE_ID")
                    .HasComment("Case ID for watchlist Module");

                entity.Property(e => e.CodeComp)
                    .HasColumnName("CODE_COMP")
                    .HasComment("Company Code");

                entity.Property(e => e.CodeOrg)
                    .HasColumnName("CODE_ORG")
                    .HasComment("Organization Code");

                entity.Property(e => e.RfId)
                    .HasColumnName("RF_ID")
                    .HasComment("RedFlag ID for watchlist module");
            });

            modelBuilder.Entity<RfOddAttach>(entity =>
            {
                entity.HasKey(e => e.CodeSeq)
                    .HasName("Pk_RF_ODD_ATTACH_CODE_SEQ");

                entity.ToTable("RF_ODD_ATTACH");

                entity.HasComment("Attachment on watchlist module");

                entity.Property(e => e.CodeSeq).HasColumnName("CODE_SEQ");

                entity.Property(e => e.AuditCreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("AUDIT_CREATED_DATE")
                    .HasComment("Date time attachment being executed");

                entity.Property(e => e.AuditCreatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_CREATED_USER")
                    .HasComment("User ID of staff performed activity");

                entity.Property(e => e.CaseId)
                    .HasColumnName("CASE_ID")
                    .HasComment("Case ID for watchlist Module");

                entity.Property(e => e.CodeComp)
                    .HasColumnName("CODE_COMP")
                    .HasComment("Company Code");

                entity.Property(e => e.CodeOrg)
                    .HasColumnName("CODE_ORG")
                    .HasComment("Organization Code");

                entity.Property(e => e.FileEncode)
                    .HasColumnName("FILE_ENCODE")
                    .HasComment("Encoded data of each files");

                entity.Property(e => e.FileName)
                    .HasMaxLength(200)
                    .HasColumnName("FILE_NAME")
                    .HasComment("Attachment File Name");

                entity.Property(e => e.FilePath)
                    .HasMaxLength(200)
                    .HasColumnName("FILE_PATH")
                    .HasComment("Attachment File Path");

                entity.Property(e => e.RfId)
                    .HasColumnName("RF_ID")
                    .HasComment("RedFlag ID for watchlist module");
            });

            modelBuilder.Entity<RfOdddtl>(entity =>
            {
                entity.HasKey(e => new { e.CodeComp, e.CodeOrg, e.RfId, e.SysSeq });

                entity.ToTable("RF_ODDDTL");

                entity.Property(e => e.CodeComp)
                    .HasColumnName("CODE_COMP")
                    .HasComment("company code");

                entity.Property(e => e.CodeOrg)
                    .HasColumnName("CODE_ORG")
                    .HasComment("organization code");

                entity.Property(e => e.RfId)
                    .HasColumnName("RF_ID")
                    .HasComment("red flag id");

                entity.Property(e => e.SysSeq)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("SYS_SEQ")
                    .HasComment("system running number (index purpose)");

                entity.Property(e => e.AuditCreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("AUDIT_CREATED_DATE")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.AuditCreatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_CREATED_USER");

                entity.Property(e => e.AuditUpdatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("AUDIT_UPDATED_DATE")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.AuditUpdatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_UPDATED_USER");

                entity.Property(e => e.FlagFalsepos)
                    .HasColumnName("FLAG_FALSEPOS")
                    .HasComment("flag of false positive");

                entity.Property(e => e.HitCategory)
                    .HasMaxLength(100)
                    .HasColumnName("HIT_CATEGORY")
                    .HasComment("watchlist category");

                entity.Property(e => e.HitCountry)
                    .HasMaxLength(150)
                    .HasColumnName("HIT_COUNTRY")
                    .HasComment("watchlist country");

                entity.Property(e => e.HitDobs)
                    .HasMaxLength(512)
                    .HasColumnName("HIT_DOBS")
                    .HasComment("watchlist YOB");

                entity.Property(e => e.HitGender)
                    .HasMaxLength(20)
                    .HasColumnName("HIT_GENDER")
                    .HasComment("gender field in watchlist");

                entity.Property(e => e.HitId)
                    .HasMaxLength(150)
                    .HasColumnName("HIT_ID")
                    .HasComment("watchlist id");

                entity.Property(e => e.HitNamesource)
                    .HasMaxLength(20)
                    .HasColumnName("HIT_NAMESOURCE");

                entity.Property(e => e.HitSource)
                    .HasMaxLength(20)
                    .HasColumnName("HIT_SOURCE")
                    .HasComment("watchlist provider");

                entity.Property(e => e.HitStrong)
                    .HasColumnName("HIT_STRONG")
                    .HasComment("match percentage group");

                entity.Property(e => e.HitWlId)
                    .HasMaxLength(30)
                    .HasColumnName("HIT_WL_ID")
                    .HasComment("entity id for watchlist");

                entity.Property(e => e.NoAccount)
                    .HasMaxLength(30)
                    .HasColumnName("NO_ACCOUNT")
                    .HasComment("account no of customer");

                entity.Property(e => e.NoCif)
                    .HasMaxLength(30)
                    .HasColumnName("NO_CIF")
                    .HasComment("cif no of customer");

                entity.Property(e => e.Remarks)
                    .HasMaxLength(2000)
                    .HasColumnName("REMARKS")
                    .HasComment("remarks");

                entity.Property(e => e.SingleStringName)
                    .HasMaxLength(255)
                    .HasColumnName("SINGLE_STRING_NAME")
                    .HasComment("watchlist name");

                entity.Property(e => e.StatusInv)
                    .HasColumnName("STATUS_INV")
                    .HasComment("investigation status assigned by user");

                entity.Property(e => e.TypeEnt)
                    .HasMaxLength(50)
                    .HasColumnName("TYPE_ENT");

                entity.Property(e => e.TypeExpo)
                    .HasColumnName("TYPE_EXPO")
                    .HasComment("exposition assigned by user");

                entity.Property(e => e.TypeHit)
                    .HasColumnName("TYPE_HIT")
                    .HasComment("indicator hit (name/id/country etc)");

                entity.Property(e => e.TypeName)
                    .HasMaxLength(255)
                    .HasColumnName("TYPE_NAME")
                    .HasComment("name type (primary/aka/secondary etc)");
            });

            modelBuilder.Entity<RfOm>(entity =>
            {
                entity.HasKey(e => new { e.CodeComp, e.CodeOrg, e.ModuleId, e.RfId });

                entity.ToTable("RF_OM");

                entity.HasIndex(e => new { e.CodeComp, e.CodeOrg, e.CaseId, e.RfId }, "Unq_RF_OM_CODE_COMP")
                    .IsUnique();

                entity.Property(e => e.CodeComp)
                    .HasColumnName("CODE_COMP")
                    .HasComment("company code");

                entity.Property(e => e.CodeOrg)
                    .HasColumnName("CODE_ORG")
                    .HasComment("organization code");

                entity.Property(e => e.ModuleId)
                    .HasColumnName("MODULE_ID")
                    .HasComment("module of redflag");

                entity.Property(e => e.RfId)
                    .HasColumnName("RF_ID")
                    .HasComment("red flag id");

                entity.Property(e => e.ApprovalStatus)
                    .IsRequired()
                    .HasMaxLength(1)
                    .HasColumnName("APPROVAL_STATUS")
                    .HasDefaultValueSql("(N'P')")
                    .IsFixedLength();

                entity.Property(e => e.AuditCreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("AUDIT_CREATED_DATE")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the record being created");

                entity.Property(e => e.AuditCreatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_CREATED_USER")
                    .HasComment("User created the record");

                entity.Property(e => e.AuditStatus)
                    .HasColumnName("AUDIT_STATUS")
                    .HasComment("current redflag status");

                entity.Property(e => e.AuditUpdatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("AUDIT_UPDATED_DATE")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the record being updated");

                entity.Property(e => e.AuditUpdatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_UPDATED_USER")
                    .HasComment("user who modify the record");

                entity.Property(e => e.CaseId)
                    .HasColumnName("CASE_ID")
                    .HasComment("assign case id");

                entity.Property(e => e.ConfigDetect)
                    .HasMaxLength(15)
                    .HasColumnName("CONFIG_DETECT")
                    .HasComment("to differentiate the method of detection");

                entity.Property(e => e.ConfigSqlfd)
                    .HasMaxLength(2000)
                    .HasColumnName("CONFIG_SQLFD")
                    .HasComment("table use for screening");

                entity.Property(e => e.ConfigTable)
                    .HasMaxLength(30)
                    .HasColumnName("CONFIG_TABLE")
                    .HasComment("table use for name screening");

                entity.Property(e => e.HitDate)
                    .HasColumnName("HIT_DATE")
                    .HasComment("date of redflag being generated");

                entity.Property(e => e.HitRuleid)
                    .HasMaxLength(15)
                    .HasColumnName("HIT_RULEID")
                    .HasComment("rule id for hit redflag");

                entity.Property(e => e.HitRulename)
                    .HasMaxLength(100)
                    .HasColumnName("HIT_RULENAME")
                    .HasComment("rule name for hit redflag");

                entity.Property(e => e.HitSearch)
                    .HasMaxLength(2000)
                    .HasColumnName("HIT_SEARCH")
                    .HasComment("search name resulting to hit");

                entity.Property(e => e.HitVol)
                    .HasColumnName("HIT_VOL")
                    .HasComment("total volume watchlist hit");

                entity.Property(e => e.HitVolId)
                    .HasColumnName("HIT_VOL_ID")
                    .HasComment("total volume watchlist hit base on ID");

                entity.Property(e => e.HitVolName)
                    .HasColumnName("HIT_VOL_NAME")
                    .HasComment("total volume watchlist hit base on name");

                entity.Property(e => e.InfoBranch)
                    .HasMaxLength(20)
                    .HasColumnName("INFO_BRANCH")
                    .HasComment("customer's account opening branch");

                entity.Property(e => e.InfoName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("INFO_NAME");

                entity.Property(e => e.NoCif)
                    .HasMaxLength(30)
                    .HasColumnName("NO_CIF")
                    .HasComment("Customer's identification no");

                entity.Property(e => e.ReferenceNo)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("REFERENCE_NO")
                    .HasDefaultValueSql("('')")
                    .HasComment("REF NO / ACC NO");

                entity.Property(e => e.ScenarioDesc)
                    .HasMaxLength(50)
                    .HasColumnName("SCENARIO_DESC")
                    .HasDefaultValueSql("('')")
                    .HasComment("get from config_code");

                entity.Property(e => e.ScenarioType)
                    .HasColumnName("SCENARIO_TYPE")
                    .HasComment("get from config_code");

                entity.Property(e => e.ServiceType)
                    .HasColumnName("SERVICE_TYPE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.TagCaseAssign)
                    .HasColumnName("TAG_CASE_ASSIGN")
                    .HasComment("case ID where this redflag being assigned");

                entity.Property(e => e.TagFraud)
                    .HasMaxLength(1)
                    .HasColumnName("TAG_FRAUD")
                    .HasComment("tagging of fraud");

                entity.Property(e => e.TagStaff)
                    .HasColumnName("TAG_STAFF")
                    .HasComment("tagging of staff");

                entity.Property(e => e.TypeProduct)
                    .HasMaxLength(8)
                    .HasColumnName("TYPE_PRODUCT")
                    .HasComment("product code of account take place");

                entity.Property(e => e.TypeSearch)
                    .HasMaxLength(2)
                    .HasColumnName("TYPE_SEARCH")
                    .HasComment("to differentiate type of search performed (partial, full, etc etc)");
            });

            modelBuilder.Entity<RfOmAct>(entity =>
            {
                entity.HasKey(e => e.CodeSeq)
                    .HasName("Pk_AUDIT_MASTER_CODE_SEQ_1_1");

                entity.ToTable("RF_OM_ACT");

                entity.HasComment("Remarks performed on watchlist module");

                entity.Property(e => e.CodeSeq).HasColumnName("CODE_SEQ");

                entity.Property(e => e.AuditAction)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_ACTION");

                entity.Property(e => e.AuditCreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("AUDIT_CREATED_DATE")
                    .HasComment("Date time activity being executed");

                entity.Property(e => e.AuditCreatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_CREATED_USER")
                    .HasComment("User ID of staff performed activity");

                entity.Property(e => e.AuditRemarks)
                    .HasColumnName("AUDIT_REMARKS")
                    .HasComment("Remarks fill in by users");

                entity.Property(e => e.AuditStatus)
                    .HasColumnName("AUDIT_STATUS")
                    .HasComment("Status changed upon activity performed");

                entity.Property(e => e.AuditSubStatus)
                    .HasColumnName("AUDIT_SUB_STATUS")
                    .HasComment("Status changed upon activity performed");

                entity.Property(e => e.CaseId)
                    .HasColumnName("CASE_ID")
                    .HasComment("Case ID for watchlist Module");

                entity.Property(e => e.CodeComp)
                    .HasColumnName("CODE_COMP")
                    .HasComment("Company Code");

                entity.Property(e => e.CodeOrg)
                    .HasColumnName("CODE_ORG")
                    .HasComment("Organization Code");

                entity.Property(e => e.RfId)
                    .HasColumnName("RF_ID")
                    .HasComment("RedFlag ID for watchlist module");
            });

            modelBuilder.Entity<RfOmAttach>(entity =>
            {
                entity.HasKey(e => e.CodeSeq)
                    .HasName("Pk_AUDIT_MASTER_CODE_SEQ_3");

                entity.ToTable("RF_OM_ATTACH");

                entity.HasComment("Attachment on watchlist module");

                entity.Property(e => e.CodeSeq).HasColumnName("CODE_SEQ");

                entity.Property(e => e.AuditCreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("AUDIT_CREATED_DATE")
                    .HasComment("Date time attachment being executed");

                entity.Property(e => e.AuditCreatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_CREATED_USER")
                    .HasComment("User ID of staff performed activity");

                entity.Property(e => e.CaseId)
                    .HasColumnName("CASE_ID")
                    .HasComment("Case ID for watchlist Module");

                entity.Property(e => e.CodeComp)
                    .HasColumnName("CODE_COMP")
                    .HasComment("Company Code");

                entity.Property(e => e.CodeOrg)
                    .HasColumnName("CODE_ORG")
                    .HasComment("Organization Code");

                entity.Property(e => e.FileEncode)
                    .HasColumnName("FILE_ENCODE")
                    .HasComment("Encoded data of each files");

                entity.Property(e => e.FileName)
                    .HasMaxLength(200)
                    .HasColumnName("FILE_NAME")
                    .HasComment("Attachment File Name");

                entity.Property(e => e.FilePath)
                    .HasMaxLength(200)
                    .HasColumnName("FILE_PATH")
                    .HasComment("Attachment File Path");

                entity.Property(e => e.RfId)
                    .HasColumnName("RF_ID")
                    .HasComment("RedFlag ID for watchlist module");
            });

            modelBuilder.Entity<RfOmcomparison>(entity =>
            {
                entity.HasKey(e => new { e.CodeOrg, e.CodeComp, e.RfId });

                entity.ToTable("RF_OMCOMPARISON");

                entity.Property(e => e.CodeOrg)
                    .HasColumnName("CODE_ORG")
                    .HasComment("organization code");

                entity.Property(e => e.CodeComp).HasColumnName("CODE_COMP");

                entity.Property(e => e.RfId)
                    .HasColumnName("RF_ID")
                    .HasComment("red flag id");

                entity.Property(e => e.AuditCreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("AUDIT_CREATED_DATE");

                entity.Property(e => e.AuditCreatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_CREATED_USER");

                entity.Property(e => e.ComparisonData).HasColumnName("COMPARISON_DATA");

                entity.Property(e => e.EntityId)
                    .HasMaxLength(50)
                    .HasColumnName("ENTITY_ID");

                entity.Property(e => e.FilteringCriteria)
                    .HasMaxLength(50)
                    .HasColumnName("FILTERING_CRITERIA");

                entity.Property(e => e.InputData)
                    .HasMaxLength(50)
                    .HasColumnName("INPUT_DATA");

                entity.Property(e => e.Match)
                    .HasMaxLength(200)
                    .HasColumnName("MATCH");

                entity.Property(e => e.WatchlistData)
                    .HasMaxLength(200)
                    .HasColumnName("WATCHLIST_DATA");
            });

            modelBuilder.Entity<RfOmcountryresult>(entity =>
            {
                entity.HasKey(e => new { e.CodeComp, e.CodeOrg, e.RfId, e.SeqNo });

                entity.ToTable("RF_OMCOUNTRYRESULT");

                entity.Property(e => e.CodeComp).HasColumnName("CODE_COMP");

                entity.Property(e => e.CodeOrg)
                    .HasColumnName("CODE_ORG")
                    .HasComment("organization code");

                entity.Property(e => e.RfId)
                    .HasColumnName("RF_ID")
                    .HasComment("red flag id");

                entity.Property(e => e.SeqNo)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("SEQ_NO");

                entity.Property(e => e.AuditCreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("AUDIT_CREATED_DATE");

                entity.Property(e => e.AuditCreatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_CREATED_USER");

                entity.Property(e => e.InputData)
                    .HasMaxLength(50)
                    .HasColumnName("INPUT_DATA");

                entity.Property(e => e.Result)
                    .HasMaxLength(200)
                    .HasColumnName("RESULT");
            });

            modelBuilder.Entity<RfOmdtl>(entity =>
            {
                entity.HasKey(e => new { e.CodeComp, e.CodeOrg, e.RfId, e.SysSeq });

                entity.ToTable("RF_OMDTL");

                entity.Property(e => e.CodeComp)
                    .HasColumnName("CODE_COMP")
                    .HasComment("company code");

                entity.Property(e => e.CodeOrg)
                    .HasColumnName("CODE_ORG")
                    .HasComment("organization code");

                entity.Property(e => e.RfId)
                    .HasColumnName("RF_ID")
                    .HasComment("red flag id");

                entity.Property(e => e.SysSeq)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("SYS_SEQ")
                    .HasComment("system running number (index purpose)");

                entity.Property(e => e.AuditCreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("AUDIT_CREATED_DATE")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.AuditCreatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_CREATED_USER");

                entity.Property(e => e.AuditUpdatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("AUDIT_UPDATED_DATE")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.AuditUpdatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_UPDATED_USER");

                entity.Property(e => e.Categorynum)
                    .HasMaxLength(500)
                    .HasColumnName("CATEGORYNUM")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ConfidenceScore)
                    .HasColumnName("CONFIDENCE_SCORE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.FlagFalsepos)
                    .HasColumnName("FLAG_FALSEPOS")
                    .HasComment("flag of false positive");

                entity.Property(e => e.HitCategory)
                    .HasMaxLength(100)
                    .HasColumnName("HIT_CATEGORY")
                    .HasComment("watchlist category");

                entity.Property(e => e.HitCountry)
                    .HasMaxLength(150)
                    .HasColumnName("HIT_COUNTRY")
                    .HasComment("watchlist country");

                entity.Property(e => e.HitDobs)
                    .HasMaxLength(512)
                    .HasColumnName("HIT_DOBS")
                    .HasComment("watchlist YOB");

                entity.Property(e => e.HitGender)
                    .HasMaxLength(20)
                    .HasColumnName("HIT_GENDER")
                    .HasComment("gender field in watchlist");

                entity.Property(e => e.HitId)
                    .HasMaxLength(150)
                    .HasColumnName("HIT_ID")
                    .HasComment("watchlist id");

                entity.Property(e => e.HitNamesource)
                    .HasMaxLength(20)
                    .HasColumnName("HIT_NAMESOURCE");

                entity.Property(e => e.HitSource)
                    .HasMaxLength(20)
                    .HasColumnName("HIT_SOURCE")
                    .HasComment("watchlist provider");

                entity.Property(e => e.HitStrong)
                    .HasColumnName("HIT_STRONG")
                    .HasComment("match percentage group");

                entity.Property(e => e.HitWlId)
                    .HasMaxLength(30)
                    .HasColumnName("HIT_WL_ID")
                    .HasComment("entity id for watchlist");

                entity.Property(e => e.NoAccount)
                    .HasMaxLength(30)
                    .HasColumnName("NO_ACCOUNT")
                    .HasComment("account no of customer");

                entity.Property(e => e.NoCif)
                    .HasMaxLength(30)
                    .HasColumnName("NO_CIF")
                    .HasComment("cif no of customer");

                entity.Property(e => e.OriginalScriptName)
                    .HasMaxLength(300)
                    .HasColumnName("ORIGINAL_SCRIPT_NAME")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Remarks)
                    .HasMaxLength(2000)
                    .HasColumnName("REMARKS")
                    .HasComment("remarks");

                entity.Property(e => e.Sanction)
                    .HasMaxLength(1024)
                    .HasColumnName("SANCTION")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SingleStringName)
                    .HasMaxLength(255)
                    .HasColumnName("SINGLE_STRING_NAME")
                    .HasComment("watchlist name");

                entity.Property(e => e.StatusInv)
                    .HasColumnName("STATUS_INV")
                    .HasComment("investigation status assigned by user");

                entity.Property(e => e.Subcategory)
                    .HasMaxLength(50)
                    .HasColumnName("SUBCATEGORY")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TypeEnt)
                    .HasMaxLength(50)
                    .HasColumnName("TYPE_ENT");

                entity.Property(e => e.TypeExpo)
                    .HasColumnName("TYPE_EXPO")
                    .HasComment("exposition assigned by user");

                entity.Property(e => e.TypeHit)
                    .HasColumnName("TYPE_HIT")
                    .HasComment("indicator hit (name/id/country etc)");

                entity.Property(e => e.TypeName)
                    .HasMaxLength(255)
                    .HasColumnName("TYPE_NAME")
                    .HasComment("name type (primary/aka/secondary etc)");
            });

            modelBuilder.Entity<RfOmdtlArchive>(entity =>
            {
                entity.HasKey(e => new { e.CodeComp, e.CodeOrg, e.RfId, e.SysSeq });

                entity.ToTable("RF_OMDTL_ARCHIVE");

                entity.Property(e => e.CodeComp)
                    .HasColumnName("CODE_COMP")
                    .HasComment("company code");

                entity.Property(e => e.CodeOrg)
                    .HasColumnName("CODE_ORG")
                    .HasComment("organization code");

                entity.Property(e => e.RfId)
                    .HasColumnName("RF_ID")
                    .HasComment("red flag id");

                entity.Property(e => e.SysSeq)
                    .HasColumnName("SYS_SEQ")
                    .HasComment("system running number (index purpose)");

                entity.Property(e => e.AuditCreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("AUDIT_CREATED_DATE")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.AuditCreatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_CREATED_USER");

                entity.Property(e => e.AuditUpdatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("AUDIT_UPDATED_DATE")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.AuditUpdatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_UPDATED_USER");

                entity.Property(e => e.Categorynum)
                    .HasMaxLength(500)
                    .HasColumnName("CATEGORYNUM")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ConfidenceScore)
                    .HasColumnName("CONFIDENCE_SCORE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.FlagFalsepos)
                    .HasColumnName("FLAG_FALSEPOS")
                    .HasComment("flag of false positive");

                entity.Property(e => e.HitCategory)
                    .HasMaxLength(100)
                    .HasColumnName("HIT_CATEGORY")
                    .HasComment("watchlist category");

                entity.Property(e => e.HitCountry)
                    .HasMaxLength(150)
                    .HasColumnName("HIT_COUNTRY")
                    .HasComment("watchlist country");

                entity.Property(e => e.HitDobs)
                    .HasMaxLength(512)
                    .HasColumnName("HIT_DOBS")
                    .HasComment("watchlist YOB");

                entity.Property(e => e.HitGender)
                    .HasMaxLength(20)
                    .HasColumnName("HIT_GENDER")
                    .HasComment("gender field in watchlist");

                entity.Property(e => e.HitId)
                    .HasMaxLength(150)
                    .HasColumnName("HIT_ID")
                    .HasComment("watchlist id");

                entity.Property(e => e.HitNamesource)
                    .HasMaxLength(20)
                    .HasColumnName("HIT_NAMESOURCE");

                entity.Property(e => e.HitSource)
                    .HasMaxLength(20)
                    .HasColumnName("HIT_SOURCE")
                    .HasComment("watchlist provider");

                entity.Property(e => e.HitStrong)
                    .HasColumnName("HIT_STRONG")
                    .HasComment("match percentage group");

                entity.Property(e => e.HitWlId)
                    .HasMaxLength(30)
                    .HasColumnName("HIT_WL_ID")
                    .HasComment("entity id for watchlist");

                entity.Property(e => e.NoAccount)
                    .HasMaxLength(30)
                    .HasColumnName("NO_ACCOUNT")
                    .HasComment("account no of customer");

                entity.Property(e => e.NoCif)
                    .HasMaxLength(30)
                    .HasColumnName("NO_CIF")
                    .HasComment("cif no of customer");

                entity.Property(e => e.OriginalScriptName)
                    .HasMaxLength(300)
                    .HasColumnName("ORIGINAL_SCRIPT_NAME")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Remarks)
                    .HasMaxLength(2000)
                    .HasColumnName("REMARKS")
                    .HasComment("remarks");

                entity.Property(e => e.Sanction)
                    .HasMaxLength(1024)
                    .HasColumnName("SANCTION")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SingleStringName)
                    .HasMaxLength(255)
                    .HasColumnName("SINGLE_STRING_NAME")
                    .HasComment("watchlist name");

                entity.Property(e => e.StatusInv)
                    .HasColumnName("STATUS_INV")
                    .HasComment("investigation status assigned by user");

                entity.Property(e => e.Subcategory)
                    .HasMaxLength(50)
                    .HasColumnName("SUBCATEGORY")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TypeEnt)
                    .HasMaxLength(50)
                    .HasColumnName("TYPE_ENT");

                entity.Property(e => e.TypeExpo)
                    .HasColumnName("TYPE_EXPO")
                    .HasComment("exposition assigned by user");

                entity.Property(e => e.TypeHit)
                    .HasColumnName("TYPE_HIT")
                    .HasComment("indicator hit (name/id/country etc)");

                entity.Property(e => e.TypeName)
                    .HasMaxLength(255)
                    .HasColumnName("TYPE_NAME")
                    .HasComment("name type (primary/aka/secondary etc)");
            });

            modelBuilder.Entity<RfOmpassportresult>(entity =>
            {
                entity.HasKey(e => new { e.CodeOrg, e.CodeComp, e.RfId, e.SeqNo });

                entity.ToTable("RF_OMPASSPORTRESULT");

                entity.Property(e => e.CodeOrg)
                    .HasColumnName("CODE_ORG")
                    .HasComment("organization code");

                entity.Property(e => e.CodeComp).HasColumnName("CODE_COMP");

                entity.Property(e => e.RfId)
                    .HasColumnName("RF_ID")
                    .HasComment("red flag id");

                entity.Property(e => e.SeqNo)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("SEQ_NO");

                entity.Property(e => e.AuditCreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("AUDIT_CREATED_DATE");

                entity.Property(e => e.AuditCreatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_CREATED_USER");

                entity.Property(e => e.PassportExpiryDt)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("PASSPORT_EXPIRY_DT");

                entity.Property(e => e.PassportNo).HasColumnName("PASSPORT_NO");

                entity.Property(e => e.Result)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasColumnName("RESULT");
            });

            modelBuilder.Entity<RfOmriskresult>(entity =>
            {
                entity.HasKey(e => new { e.CodeOrg, e.CodeComp, e.RfId, e.FilteringCriteria });

                entity.ToTable("RF_OMRISKRESULT");

                entity.Property(e => e.CodeOrg)
                    .HasColumnName("CODE_ORG")
                    .HasComment("organization code");

                entity.Property(e => e.CodeComp).HasColumnName("CODE_COMP");

                entity.Property(e => e.RfId)
                    .HasColumnName("RF_ID")
                    .HasComment("red flag id");

                entity.Property(e => e.FilteringCriteria)
                    .HasMaxLength(50)
                    .HasColumnName("FILTERING_CRITERIA");

                entity.Property(e => e.AssessmentId)
                    .HasMaxLength(50)
                    .HasColumnName("ASSESSMENT_ID");

                entity.Property(e => e.AuditCreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("AUDIT_CREATED_DATE");

                entity.Property(e => e.AuditCreatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_CREATED_USER");

                entity.Property(e => e.ComparisonData).HasColumnName("COMPARISON_DATA");

                entity.Property(e => e.InputData)
                    .HasMaxLength(50)
                    .HasColumnName("INPUT_DATA");

                entity.Property(e => e.Match)
                    .HasMaxLength(200)
                    .HasColumnName("MATCH");
            });

            modelBuilder.Entity<RfPortfolio>(entity =>
            {
                entity.HasKey(e => new { e.CodeComp, e.CodeOrg, e.NoMaster, e.NoCif });

                entity.ToTable("RF_PORTFOLIO");

                entity.Property(e => e.CodeComp).HasColumnName("CODE_COMP");

                entity.Property(e => e.CodeOrg).HasColumnName("CODE_ORG");

                entity.Property(e => e.NoMaster)
                    .HasMaxLength(50)
                    .HasColumnName("NO_MASTER")
                    .HasComment("Master No for each customer");

                entity.Property(e => e.NoCif)
                    .HasMaxLength(50)
                    .HasColumnName("NO_CIF")
                    .HasComment("Customer Identification No");

                entity.Property(e => e.AuditCreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("AUDIT_CREATED_DATE");

                entity.Property(e => e.AuditCreatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_CREATED_USER")
                    .HasComment("User who created this PF");

                entity.Property(e => e.AuditUpdatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("AUDIT_UPDATED_DATE");

                entity.Property(e => e.AuditUpdatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_UPDATED_USER")
                    .HasComment("User who updated this PF");

                entity.Property(e => e.ExistingInd)
                    .HasColumnName("EXISTING_IND")
                    .HasDefaultValueSql("((1))")
                    .HasComment("0 for Temporary 1 for Existing");

                entity.Property(e => e.InfoName)
                    .HasMaxLength(50)
                    .HasColumnName("INFO_NAME")
                    .HasComment("Customer Name");

                entity.Property(e => e.RfModule01).HasColumnName("RF_MODULE01");

                entity.Property(e => e.RfModule02).HasColumnName("RF_MODULE02");

                entity.Property(e => e.RfModule03).HasColumnName("RF_MODULE03");

                entity.Property(e => e.RfModule04).HasColumnName("RF_MODULE04");

                entity.Property(e => e.RfModule05).HasColumnName("RF_MODULE05");

                entity.Property(e => e.RfOb).HasColumnName("RF_OB");

                entity.Property(e => e.RfPm).HasColumnName("RF_PM");

                entity.Property(e => e.RfRp).HasColumnName("RF_RP");

                entity.Property(e => e.RfTm).HasColumnName("RF_TM");

                entity.Property(e => e.RfWl).HasColumnName("RF_WL");

                entity.Property(e => e.RiskLevel)
                    .HasColumnName("RISK_LEVEL")
                    .HasComment("Customer risk level\\n- To decide the risk criteria");

                entity.Property(e => e.RiskPriority)
                    .HasColumnName("RISK_PRIORITY")
                    .HasComment("To sort out the priority portfolio to be review\\nCondition will be calculated based on respective RF");

                entity.Property(e => e.StatusRf)
                    .IsRequired()
                    .HasMaxLength(300)
                    .HasColumnName("STATUS_RF")
                    .HasComment("Store the status of each module\\n01|00|00|00|00|01|00|00|02|03\\n\\n00 - Nothing\\n01 - New\\n02 - Addon\\n03 - Late");
            });

            modelBuilder.Entity<RfT>(entity =>
            {
                entity.HasKey(e => new { e.CodeComp, e.CodeOrg, e.RfId, e.ModuleId });

                entity.ToTable("RF_TS");

                entity.HasIndex(e => new { e.RfId, e.ModuleId }, "Unq_RF_TS_RF_ID")
                    .IsUnique();

                entity.Property(e => e.CodeComp)
                    .HasColumnName("CODE_COMP")
                    .HasComment("company code");

                entity.Property(e => e.CodeOrg)
                    .HasColumnName("CODE_ORG")
                    .HasComment("organization code");

                entity.Property(e => e.RfId)
                    .HasColumnName("RF_ID")
                    .HasComment("red flag id");

                entity.Property(e => e.ModuleId)
                    .HasMaxLength(8)
                    .HasColumnName("MODULE_ID")
                    .HasComment("module of redflag");

                entity.Property(e => e.AuditCreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("AUDIT_CREATED_DATE")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the record being created");

                entity.Property(e => e.AuditCreatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_CREATED_USER")
                    .HasComment("User created the record");

                entity.Property(e => e.AuditDateCreated)
                    .HasColumnName("AUDIT_DATE_CREATED")
                    .HasComment("date of this record created");

                entity.Property(e => e.AuditDateUpdated)
                    .HasColumnName("AUDIT_DATE_UPDATED")
                    .HasComment("date of this record updated");

                entity.Property(e => e.AuditStatus)
                    .HasColumnName("AUDIT_STATUS")
                    .HasComment("current redflag status");

                entity.Property(e => e.AuditStatusDate)
                    .HasColumnName("AUDIT_STATUS_DATE")
                    .HasComment("update date of current redflag status");

                entity.Property(e => e.AuditTimeCreated)
                    .HasColumnName("AUDIT_TIME_CREATED")
                    .HasComment("time of this record created");

                entity.Property(e => e.AuditTimeUpdated)
                    .HasColumnName("AUDIT_TIME_UPDATED")
                    .HasComment("time of this record updated");

                entity.Property(e => e.AuditUpdatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("AUDIT_UPDATED_DATE")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the record being updated");

                entity.Property(e => e.AuditUpdatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_UPDATED_USER")
                    .HasComment("user who modify the record");

                entity.Property(e => e.CaseId)
                    .HasColumnName("CASE_ID")
                    .HasComment("Assigned case ID");

                entity.Property(e => e.FileId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("FILE_ID")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.HitAmount)
                    .HasMaxLength(1)
                    .HasColumnName("HIT_AMOUNT")
                    .HasDefaultValueSql("('')")
                    .HasComment("Y/N");

                entity.Property(e => e.HitBene)
                    .HasMaxLength(1)
                    .HasColumnName("HIT_BENE")
                    .HasDefaultValueSql("('')")
                    .HasComment("Y/N");

                entity.Property(e => e.HitBic)
                    .HasMaxLength(1)
                    .HasColumnName("HIT_BIC")
                    .HasDefaultValueSql("('')")
                    .HasComment("Y/N");

                entity.Property(e => e.HitBranch)
                    .HasMaxLength(20)
                    .HasColumnName("HIT_BRANCH")
                    .HasComment("routed alert for customer branch");

                entity.Property(e => e.HitDate)
                    .HasColumnName("HIT_DATE")
                    .HasComment("date of redflag being generated");

                entity.Property(e => e.HitId)
                    .HasMaxLength(1)
                    .HasColumnName("HIT_ID")
                    .HasDefaultValueSql("('')")
                    .HasComment("Y/N");

                entity.Property(e => e.HitSanctionCountry)
                    .HasMaxLength(1)
                    .HasColumnName("HIT_SANCTION_COUNTRY")
                    .HasDefaultValueSql("('')")
                    .HasComment("Y/N");

                entity.Property(e => e.HitSender)
                    .HasMaxLength(1)
                    .HasColumnName("HIT_SENDER")
                    .HasDefaultValueSql("('')")
                    .HasComment("Y/N");

                entity.Property(e => e.HitTxnPurpose)
                    .HasMaxLength(1)
                    .HasColumnName("HIT_TXN_PURPOSE")
                    .HasDefaultValueSql("('')")
                    .HasComment("Y/N");

                entity.Property(e => e.InfoBranch)
                    .HasMaxLength(20)
                    .HasColumnName("INFO_BRANCH")
                    .HasComment("customer's account opening branch");

                entity.Property(e => e.InfoName)
                    .HasMaxLength(100)
                    .HasColumnName("INFO_NAME")
                    .HasDefaultValueSql("('')")
                    .HasComment("customer's name");

                entity.Property(e => e.InfoProduct)
                    .HasMaxLength(8)
                    .HasColumnName("INFO_PRODUCT")
                    .HasComment("product code of transaction take place");

                entity.Property(e => e.MsgId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("MSG_ID")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NoAccount)
                    .HasMaxLength(30)
                    .HasColumnName("NO_ACCOUNT")
                    .HasComment("customer's account number");

                entity.Property(e => e.NoCif)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("NO_CIF")
                    .HasComment("customer's identification number");

                entity.Property(e => e.NoMaster)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("NO_MASTER");

                entity.Property(e => e.PayInstructionId)
                    .HasMaxLength(500)
                    .HasColumnName("PAY_INSTRUCTION_ID");

                entity.Property(e => e.Source)
                    .HasMaxLength(20)
                    .HasColumnName("SOURCE")
                    .HasDefaultValueSql("('')")
                    .HasComment("Channel: SWIFT, CITAD, VCB, etc");

                entity.Property(e => e.TagCase)
                    .HasColumnName("TAG_CASE")
                    .HasComment("indicator of this redflag has been raised as case");

                entity.Property(e => e.TagCaseAssign)
                    .HasColumnName("TAG_CASE_ASSIGN")
                    .HasComment("case ID where this redflag being assigned");

                entity.Property(e => e.TagFraud)
                    .HasMaxLength(1)
                    .HasColumnName("TAG_FRAUD")
                    .HasComment("tagging of fraud");

                entity.Property(e => e.TagRev).HasColumnName("TAG_REV");

                entity.Property(e => e.TagStaff)
                    .HasColumnName("TAG_STAFF")
                    .HasComment("tagging of staff");

                entity.Property(e => e.TranAmount)
                    .HasColumnName("TRAN_AMOUNT")
                    .HasComment("total amount of transaction performed");

                entity.Property(e => e.TranCur)
                    .HasMaxLength(8)
                    .HasColumnName("TRAN_CUR")
                    .HasComment("currency of transaction performed");

                entity.Property(e => e.TranDate)
                    .HasColumnName("TRAN_DATE")
                    .HasComment("date of transaction made");

                entity.Property(e => e.TranLocation)
                    .HasMaxLength(20)
                    .HasColumnName("TRAN_LOCATION")
                    .HasComment("location of transaction take place");

                entity.Property(e => e.TranType)
                    .HasColumnName("TRAN_TYPE")
                    .HasComment("credit / debit / both");

                entity.Property(e => e.TranVol)
                    .HasColumnName("TRAN_VOL")
                    .HasComment("total number of transaction performed");
            });

            modelBuilder.Entity<RfTm>(entity =>
            {
                entity.HasKey(e => new { e.CodeComp, e.CodeOrg, e.RfId, e.ModuleId });

                entity.ToTable("RF_TM");

                entity.HasIndex(e => e.CodeComp, "IX_RF_TM");

                entity.HasIndex(e => new { e.RfId, e.ModuleId }, "Unq_RF_TM_RF_ID")
                    .IsUnique();

                entity.Property(e => e.CodeComp)
                    .HasColumnName("CODE_COMP")
                    .HasComment("company code");

                entity.Property(e => e.CodeOrg)
                    .HasColumnName("CODE_ORG")
                    .HasComment("organization code");

                entity.Property(e => e.RfId)
                    .HasColumnName("RF_ID")
                    .HasComment("red flag id");

                entity.Property(e => e.ModuleId)
                    .HasMaxLength(8)
                    .HasColumnName("MODULE_ID")
                    .HasComment("module of redflag");

                entity.Property(e => e.AuditCreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("AUDIT_CREATED_DATE")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the record being created");

                entity.Property(e => e.AuditCreatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_CREATED_USER")
                    .HasComment("User created the record");

                entity.Property(e => e.AuditDateCreated)
                    .HasColumnName("AUDIT_DATE_CREATED")
                    .HasComment("date of this record created");

                entity.Property(e => e.AuditDateUpdated)
                    .HasColumnName("AUDIT_DATE_UPDATED")
                    .HasComment("date of this record updated");

                entity.Property(e => e.AuditStatus)
                    .HasColumnName("AUDIT_STATUS")
                    .HasComment("current redflag status");

                entity.Property(e => e.AuditStatusDate)
                    .HasColumnName("AUDIT_STATUS_DATE")
                    .HasComment("update date of current redflag status");

                entity.Property(e => e.AuditTimeCreated)
                    .HasColumnName("AUDIT_TIME_CREATED")
                    .HasComment("time of this record created");

                entity.Property(e => e.AuditTimeUpdated)
                    .HasColumnName("AUDIT_TIME_UPDATED")
                    .HasComment("time of this record updated");

                entity.Property(e => e.AuditUpdatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("AUDIT_UPDATED_DATE")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the record being updated");

                entity.Property(e => e.AuditUpdatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_UPDATED_USER")
                    .HasComment("user who modify the record");

                entity.Property(e => e.CaseId)
                    .HasColumnName("CASE_ID")
                    .HasComment("Assigned case ID");

                entity.Property(e => e.FlagFiltersql)
                    .HasColumnName("FLAG_FILTERSQL")
                    .HasComment("flag filtering sql statement");

                entity.Property(e => e.HitBranch)
                    .HasMaxLength(20)
                    .HasColumnName("HIT_BRANCH")
                    .HasComment("routed alert for customer branch");

                entity.Property(e => e.HitDate)
                    .HasColumnName("HIT_DATE")
                    .HasComment("date of redflag being generated");

                entity.Property(e => e.HitRuleid)
                    .HasMaxLength(15)
                    .HasColumnName("HIT_RULEID")
                    .HasComment("rule id for hit redflag");

                entity.Property(e => e.HitRulename)
                    .HasMaxLength(100)
                    .HasColumnName("HIT_RULENAME")
                    .HasComment("rule name for hit redflag");

                entity.Property(e => e.InfoBranch)
                    .HasMaxLength(20)
                    .HasColumnName("INFO_BRANCH")
                    .HasComment("customer's account opening branch");

                entity.Property(e => e.InfoFiltersql)
                    .HasMaxLength(2000)
                    .HasColumnName("INFO_FILTERSQL")
                    .HasComment("filtering used to capture history transaction");

                entity.Property(e => e.InfoName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("INFO_NAME")
                    .HasComment("customer's name");

                entity.Property(e => e.InfoProduct)
                    .HasMaxLength(8)
                    .HasColumnName("INFO_PRODUCT")
                    .HasComment("product code of transaction take place");

                entity.Property(e => e.NoAccount)
                    .HasMaxLength(30)
                    .HasColumnName("NO_ACCOUNT")
                    .HasComment("customer's account number");

                entity.Property(e => e.NoCif)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("NO_CIF")
                    .HasComment("customer's identification number");

                entity.Property(e => e.NoMaster)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("NO_MASTER");

                entity.Property(e => e.TagCase)
                    .HasColumnName("TAG_CASE")
                    .HasComment("indicator of this redflag has been raised as case");

                entity.Property(e => e.TagCaseAssign)
                    .HasColumnName("TAG_CASE_ASSIGN")
                    .HasComment("case ID where this redflag being assigned");

                entity.Property(e => e.TagFraud)
                    .HasMaxLength(1)
                    .HasColumnName("TAG_FRAUD")
                    .HasComment("tagging of fraud");

                entity.Property(e => e.TagRev).HasColumnName("TAG_REV");

                entity.Property(e => e.TagStaff)
                    .HasColumnName("TAG_STAFF")
                    .HasComment("tagging of staff");

                entity.Property(e => e.TranAmount)
                    .HasColumnName("TRAN_AMOUNT")
                    .HasComment("total amount of transaction performed");

                entity.Property(e => e.TranCode)
                    .HasMaxLength(8)
                    .HasColumnName("TRAN_CODE")
                    .HasComment("transaction code of transaction performed");

                entity.Property(e => e.TranCur)
                    .HasMaxLength(8)
                    .HasColumnName("TRAN_CUR")
                    .HasComment("currency of transaction performed");

                entity.Property(e => e.TranCurAmount)
                    .HasColumnName("TRAN_CUR_AMOUNT")
                    .HasComment("total amount of transaction of foreign currency");

                entity.Property(e => e.TranDate)
                    .HasColumnName("TRAN_DATE")
                    .HasComment("date of transaction made");

                entity.Property(e => e.TranHamount)
                    .HasColumnName("TRAN_HAMOUNT")
                    .HasComment("total transaction history amount");

                entity.Property(e => e.TranHcurAmount)
                    .HasColumnName("TRAN_HCUR_AMOUNT")
                    .HasComment("total amount foreign");

                entity.Property(e => e.TranHvol)
                    .HasColumnName("TRAN_HVOL")
                    .HasComment("total transaction history volume");

                entity.Property(e => e.TranLocation)
                    .HasMaxLength(20)
                    .HasColumnName("TRAN_LOCATION")
                    .HasComment("location of transaction take place");

                entity.Property(e => e.TranPostDate)
                    .HasColumnName("TRAN_POST_DATE")
                    .HasComment("posting date of transaction performed");

                entity.Property(e => e.TranRate)
                    .HasColumnName("TRAN_RATE")
                    .HasComment("conversion rate of currency");

                entity.Property(e => e.TranType)
                    .HasMaxLength(10)
                    .HasColumnName("TRAN_TYPE")
                    .HasDefaultValueSql("('')")
                    .HasComment("credit / debit / both");

                entity.Property(e => e.TranValDate)
                    .HasColumnName("TRAN_VAL_DATE")
                    .HasComment("value date of transaction performed");

                entity.Property(e => e.TranVol)
                    .HasColumnName("TRAN_VOL")
                    .HasComment("total number of transaction performed");
            });

            modelBuilder.Entity<RfTmAct>(entity =>
            {
                entity.HasKey(e => e.CodeSeq)
                    .HasName("Pk_RF_TM_ACT_CODE_SEQ_1");

                entity.ToTable("RF_TM_ACT");

                entity.HasComment("Remarks performed on watchlist module");

                entity.Property(e => e.CodeSeq).HasColumnName("CODE_SEQ");

                entity.Property(e => e.AuditAction)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_ACTION");

                entity.Property(e => e.AuditCreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("AUDIT_CREATED_DATE")
                    .HasComment("Date time activity being executed");

                entity.Property(e => e.AuditCreatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_CREATED_USER")
                    .HasComment("User ID of staff performed activity");

                entity.Property(e => e.AuditRemarks)
                    .HasColumnName("AUDIT_REMARKS")
                    .HasComment("Remarks fill in by users");

                entity.Property(e => e.AuditStatus)
                    .HasColumnName("AUDIT_STATUS")
                    .HasComment("Status changed upon activity performed");

                entity.Property(e => e.AuditSubStatus)
                    .HasColumnName("AUDIT_SUB_STATUS")
                    .HasComment("Status changed upon activity performed");

                entity.Property(e => e.CaseId)
                    .HasColumnName("CASE_ID")
                    .HasComment("Case ID for watchlist Module");

                entity.Property(e => e.CodeComp)
                    .HasColumnName("CODE_COMP")
                    .HasComment("Company Code");

                entity.Property(e => e.CodeOrg)
                    .HasColumnName("CODE_ORG")
                    .HasComment("Organization Code");

                entity.Property(e => e.RfId)
                    .HasColumnName("RF_ID")
                    .HasComment("RedFlag ID for watchlist module");
            });

            modelBuilder.Entity<RfTmAttach>(entity =>
            {
                entity.HasKey(e => e.CodeSeq)
                    .HasName("Pk_RF_TM_ATTACH_CODE_SEQ_2");

                entity.ToTable("RF_TM_ATTACH");

                entity.HasComment("Attachment on Transaction Monitoring module");

                entity.Property(e => e.CodeSeq).HasColumnName("CODE_SEQ");

                entity.Property(e => e.AuditCreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("AUDIT_CREATED_DATE")
                    .HasComment("Date time attachment being executed");

                entity.Property(e => e.AuditCreatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_CREATED_USER")
                    .HasComment("User ID of staff performed activity");

                entity.Property(e => e.CaseId)
                    .HasColumnName("CASE_ID")
                    .HasComment("Case ID for Transaction Monitoring Module");

                entity.Property(e => e.CodeComp)
                    .HasColumnName("CODE_COMP")
                    .HasComment("Company Code");

                entity.Property(e => e.CodeOrg)
                    .HasColumnName("CODE_ORG")
                    .HasComment("Organization Code");

                entity.Property(e => e.FileEncode)
                    .HasColumnName("FILE_ENCODE")
                    .HasComment("Encoded data of each files");

                entity.Property(e => e.FileName)
                    .HasMaxLength(200)
                    .HasColumnName("FILE_NAME")
                    .HasComment("Attachment File Name");

                entity.Property(e => e.FilePath)
                    .HasMaxLength(200)
                    .HasColumnName("FILE_PATH")
                    .HasComment("Attachment File Path");

                entity.Property(e => e.RfId)
                    .HasColumnName("RF_ID")
                    .HasComment("RedFlag ID for Transaction Monitoring module");
            });

            modelBuilder.Entity<RfTmTxnhit>(entity =>
            {
                entity.HasKey(e => new { e.CodeComp, e.CodeOrg, e.ModuleId, e.RfId, e.SeqTxnhitAuto })
                    .HasName("PK_RF_TM_TXNHIT_1");

                entity.ToTable("RF_TM_TXNHIT");

                entity.Property(e => e.CodeComp)
                    .HasColumnName("CODE_COMP")
                    .HasComment("Company Code");

                entity.Property(e => e.CodeOrg)
                    .HasColumnName("CODE_ORG")
                    .HasComment("Organization Code");

                entity.Property(e => e.ModuleId)
                    .HasColumnName("MODULE_ID")
                    .HasComment("Module ID of Red Flag");

                entity.Property(e => e.RfId)
                    .HasColumnName("RF_ID")
                    .HasComment("Red Flag ID");

                entity.Property(e => e.SeqTxnhitAuto)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("SEQ_TXNHIT_AUTO");

                entity.Property(e => e.AccNo)
                    .HasMaxLength(50)
                    .HasColumnName("ACC_NO")
                    .HasDefaultValueSql("('')")
                    .HasComment("Account number");

                entity.Property(e => e.AmtBal)
                    .HasColumnName("AMT_BAL")
                    .HasComment("Remaining acc balance");

                entity.Property(e => e.AmtCr)
                    .HasColumnName("AMT_CR")
                    .HasComment("Credit amount");

                entity.Property(e => e.AmtCur)
                    .HasMaxLength(50)
                    .HasColumnName("AMT_CUR")
                    .HasDefaultValueSql("('')")
                    .HasComment("Currency");

                entity.Property(e => e.AmtDr)
                    .HasColumnName("AMT_DR")
                    .HasComment("Debit amount");

                entity.Property(e => e.AmtOther)
                    .HasColumnName("AMT_OTHER")
                    .HasComment("Original amount");

                entity.Property(e => e.AmtRate)
                    .HasColumnName("AMT_RATE")
                    .HasComment("FX rate");

                entity.Property(e => e.AuditCreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("AUDIT_CREATED_DATE");

                entity.Property(e => e.AuditCreatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_CREATED_USER")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.BatchDate).HasColumnName("BATCH_DATE");

                entity.Property(e => e.BatchNo)
                    .HasMaxLength(15)
                    .HasColumnName("BATCH_NO")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.BeneBcty)
                    .HasMaxLength(50)
                    .HasColumnName("BENE_BCTY")
                    .HasDefaultValueSql("('')")
                    .HasComment("Beneficiary bank country");

                entity.Property(e => e.BeneBic)
                    .HasMaxLength(50)
                    .HasColumnName("BENE_BIC")
                    .HasDefaultValueSql("('')")
                    .HasComment("Beneficiary bank BIC");

                entity.Property(e => e.BeneBname)
                    .HasMaxLength(50)
                    .HasColumnName("BENE_BNAME")
                    .HasDefaultValueSql("('')")
                    .HasComment("Beneficiary bank name");

                entity.Property(e => e.BeneCty)
                    .HasMaxLength(50)
                    .HasColumnName("BENE_CTY")
                    .HasDefaultValueSql("('')")
                    .HasComment("Beneficiary country");

                entity.Property(e => e.BeneName)
                    .HasMaxLength(150)
                    .HasColumnName("BENE_NAME")
                    .HasDefaultValueSql("('')")
                    .HasComment("Beneficiary name");

                entity.Property(e => e.BeneRelay)
                    .HasMaxLength(50)
                    .HasColumnName("BENE_RELAY")
                    .HasDefaultValueSql("('')")
                    .HasComment("Beneficiary relationship");

                entity.Property(e => e.BeneSwift)
                    .HasMaxLength(50)
                    .HasColumnName("BENE_SWIFT")
                    .HasDefaultValueSql("('')")
                    .HasComment("Beneficiary bank swift code");

                entity.Property(e => e.CaseId)
                    .HasColumnName("CASE_ID")
                    .HasComment("Case ID");

                entity.Property(e => e.DataValue01)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE01")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue02)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE02")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue03)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE03")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue04)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE04")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue05)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE05")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue06)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE06")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue07)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE07")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue08)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE08")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue09)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE09")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue10)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE10")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue11)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE11")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue12)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE12")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue13)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE13")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue14)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE14")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue15)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE15")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue16)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE16")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue17)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE17")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue18)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE18")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue19)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE19")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue20)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE20")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue21)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE21")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue22)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE22")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue23)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE23")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue24)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE24")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue25)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE25")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue26)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE26")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue27)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE27")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue28)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE28")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue29)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE29")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue30)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE30")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue31)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE31")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue32)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE32")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue33)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE33")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue34)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE34")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue35)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE35")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue36)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE36")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue37)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE37")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue38)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE38")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue39)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE39")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue40)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE40")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue41)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE41")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue42)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE42")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue43)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE43")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue44)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE44")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue45)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE45")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue46)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE46")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue47)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE47")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue48)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE48")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue49)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE49")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue50)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE50")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue51)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE51")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue52)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE52")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue53)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE53")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue54)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE54")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue55)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE55")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FundName)
                    .HasMaxLength(50)
                    .HasColumnName("FUND_NAME")
                    .HasDefaultValueSql("('')")
                    .HasComment("Fund description");

                entity.Property(e => e.FundType)
                    .HasMaxLength(50)
                    .HasColumnName("FUND_TYPE")
                    .HasDefaultValueSql("('')")
                    .HasComment("Fund type");

                entity.Property(e => e.NoCif)
                    .HasMaxLength(50)
                    .HasColumnName("NO_CIF")
                    .HasDefaultValueSql("('')")
                    .HasComment("CIF number");

                entity.Property(e => e.PctAdd1)
                    .HasMaxLength(100)
                    .HasColumnName("PCT_ADD1")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PctAdd2)
                    .HasMaxLength(100)
                    .HasColumnName("PCT_ADD2")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PctAdd3)
                    .HasMaxLength(100)
                    .HasColumnName("PCT_ADD3")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PctAdd4)
                    .HasMaxLength(100)
                    .HasColumnName("PCT_ADD4")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PctCity)
                    .HasMaxLength(50)
                    .HasColumnName("PCT_CITY")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PctCty)
                    .HasMaxLength(50)
                    .HasColumnName("PCT_CTY")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PctName)
                    .HasMaxLength(150)
                    .HasColumnName("PCT_NAME")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PctNat)
                    .HasMaxLength(50)
                    .HasColumnName("PCT_NAT")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PctPcode)
                    .HasMaxLength(50)
                    .HasColumnName("PCT_PCODE")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PctRelay)
                    .HasMaxLength(50)
                    .HasColumnName("PCT_RELAY")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PctState)
                    .HasMaxLength(50)
                    .HasColumnName("PCT_STATE")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ProdType)
                    .HasColumnName("PROD_TYPE")
                    .HasComment("Product type");

                entity.Property(e => e.SendBcty)
                    .HasMaxLength(50)
                    .HasColumnName("SEND_BCTY")
                    .HasDefaultValueSql("('')")
                    .HasComment("Sender bank country");

                entity.Property(e => e.SendBic)
                    .HasMaxLength(50)
                    .HasColumnName("SEND_BIC")
                    .HasDefaultValueSql("('')")
                    .HasComment("Sender bank BIC");

                entity.Property(e => e.SendBname)
                    .HasMaxLength(50)
                    .HasColumnName("SEND_BNAME")
                    .HasDefaultValueSql("('')")
                    .HasComment("Sender bank name");

                entity.Property(e => e.SendCty)
                    .HasMaxLength(50)
                    .HasColumnName("SEND_CTY")
                    .HasDefaultValueSql("('')")
                    .HasComment("Sender country");

                entity.Property(e => e.SendName)
                    .HasMaxLength(150)
                    .HasColumnName("SEND_NAME")
                    .HasDefaultValueSql("('')")
                    .HasComment("Sender name");

                entity.Property(e => e.SendRelay)
                    .HasMaxLength(50)
                    .HasColumnName("SEND_RELAY")
                    .HasDefaultValueSql("('')")
                    .HasComment("Sender relationship");

                entity.Property(e => e.SendSwift)
                    .HasMaxLength(50)
                    .HasColumnName("SEND_SWIFT")
                    .HasDefaultValueSql("('')")
                    .HasComment("Sender bank swift code");

                entity.Property(e => e.SeqHistAuto)
                    .HasColumnName("SEQ_HIST_AUTO")
                    .HasComment("SEQ_NO from TXN (DAILY/HIST)");

                entity.Property(e => e.SprodType)
                    .HasColumnName("SPROD_TYPE")
                    .HasComment("Sub product type");

                entity.Property(e => e.TranChan)
                    .HasMaxLength(50)
                    .HasColumnName("TRAN_CHAN")
                    .HasDefaultValueSql("('')")
                    .HasComment("Transaction channel");

                entity.Property(e => e.TranCode1)
                    .HasMaxLength(50)
                    .HasColumnName("TRAN_CODE1")
                    .HasDefaultValueSql("('')")
                    .HasComment("Auxiliary txn code");

                entity.Property(e => e.TranCode2)
                    .HasMaxLength(50)
                    .HasColumnName("TRAN_CODE2")
                    .HasDefaultValueSql("('')")
                    .HasComment("Txn code");

                entity.Property(e => e.TranDate)
                    .HasColumnName("TRAN_DATE")
                    .HasComment("Transaction date");

                entity.Property(e => e.TranLoc)
                    .HasMaxLength(50)
                    .HasColumnName("TRAN_LOC")
                    .HasDefaultValueSql("('')")
                    .HasComment("Transaction location");

                entity.Property(e => e.TranNo)
                    .HasColumnName("TRAN_NO")
                    .HasComment("Transaction number");

                entity.Property(e => e.TranPdate)
                    .HasColumnName("TRAN_PDATE")
                    .HasComment("Posting date");

                entity.Property(e => e.TranPurpose)
                    .HasMaxLength(50)
                    .HasColumnName("TRAN_PURPOSE")
                    .HasDefaultValueSql("('')")
                    .HasComment("Transaction purpose");

                entity.Property(e => e.TranRef)
                    .HasMaxLength(50)
                    .HasColumnName("TRAN_REF")
                    .HasDefaultValueSql("('')")
                    .HasComment("Transaction reference number");

                entity.Property(e => e.TranStatus)
                    .HasColumnName("TRAN_STATUS")
                    .HasComment("Transaction status");

                entity.Property(e => e.TranType)
                    .HasMaxLength(50)
                    .HasColumnName("TRAN_TYPE")
                    .HasDefaultValueSql("('')")
                    .HasComment("Transaction type");

                entity.Property(e => e.TranVdate).HasColumnName("TRAN_VDATE");

                entity.Property(e => e.UnitPrice).HasColumnName("UNIT_PRICE");

                entity.Property(e => e.UnitRate).HasColumnName("UNIT_RATE");

                entity.Property(e => e.UnitVal).HasColumnName("UNIT_VAL");
            });

            modelBuilder.Entity<RfTmdtl>(entity =>
            {
                entity.HasKey(e => new { e.CodeComp, e.CodeOrg, e.RfId, e.TranId });

                entity.ToTable("RF_TMDTL");

                entity.Property(e => e.CodeComp)
                    .HasColumnName("CODE_COMP")
                    .HasComment("company code");

                entity.Property(e => e.CodeOrg)
                    .HasColumnName("CODE_ORG")
                    .HasComment("organization code");

                entity.Property(e => e.RfId)
                    .HasColumnName("RF_ID")
                    .HasComment("red flag ID");

                entity.Property(e => e.TranId)
                    .HasColumnName("TRAN_ID")
                    .HasComment("link to the actual transaction in TXN table");

                entity.Property(e => e.AuditCreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("AUDIT_CREATED_DATE")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.AuditCreatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_CREATED_USER");

                entity.Property(e => e.AuditUpdatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("AUDIT_UPDATED_DATE")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.AuditUpdatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_UPDATED_USER");

                entity.Property(e => e.InfoBranch)
                    .HasMaxLength(15)
                    .HasColumnName("INFO_BRANCH");

                entity.Property(e => e.ModuleId)
                    .HasMaxLength(8)
                    .HasColumnName("MODULE_ID");

                entity.Property(e => e.NoAcc)
                    .HasMaxLength(30)
                    .HasColumnName("NO_ACC")
                    .HasComment("customer's account number");

                entity.Property(e => e.NoCif)
                    .HasMaxLength(30)
                    .HasColumnName("NO_CIF")
                    .HasComment("customer's identification number");

                entity.Property(e => e.ResChar01)
                    .HasMaxLength(100)
                    .HasColumnName("RES_CHAR01")
                    .HasComment("reserve char field 01");

                entity.Property(e => e.ResChar02)
                    .HasMaxLength(100)
                    .HasColumnName("RES_CHAR02")
                    .HasComment("reserve char field 02");

                entity.Property(e => e.ResChar03)
                    .HasMaxLength(100)
                    .HasColumnName("RES_CHAR03")
                    .HasComment("reserve char field 03");

                entity.Property(e => e.ResChar04)
                    .HasMaxLength(100)
                    .HasColumnName("RES_CHAR04")
                    .HasComment("reserve char field 04");

                entity.Property(e => e.ResChar05)
                    .HasMaxLength(100)
                    .HasColumnName("RES_CHAR05")
                    .HasComment("reserve char field 05");

                entity.Property(e => e.ResChar06)
                    .HasMaxLength(100)
                    .HasColumnName("RES_CHAR06")
                    .HasComment("reserve char field 06");

                entity.Property(e => e.ResChar07)
                    .HasMaxLength(100)
                    .HasColumnName("RES_CHAR07")
                    .HasComment("reserve char field 07");

                entity.Property(e => e.ResChar08)
                    .HasMaxLength(100)
                    .HasColumnName("RES_CHAR08")
                    .HasComment("reserve char field 08");

                entity.Property(e => e.ResChar09)
                    .HasMaxLength(100)
                    .HasColumnName("RES_CHAR09")
                    .HasComment("reserve char field 09");

                entity.Property(e => e.ResChar10)
                    .HasMaxLength(100)
                    .HasColumnName("RES_CHAR10")
                    .HasComment("reserve char field 10");

                entity.Property(e => e.ResFlt01)
                    .HasColumnName("RES_FLT01")
                    .HasComment("reserve float field 01");

                entity.Property(e => e.ResFlt02)
                    .HasColumnName("RES_FLT02")
                    .HasComment("reserve float field 02");

                entity.Property(e => e.ResFlt03)
                    .HasColumnName("RES_FLT03")
                    .HasComment("reserve float field 03");

                entity.Property(e => e.ResFlt04)
                    .HasColumnName("RES_FLT04")
                    .HasComment("reserve float field 04");

                entity.Property(e => e.ResFlt05)
                    .HasColumnName("RES_FLT05")
                    .HasComment("reserve float field 05");

                entity.Property(e => e.ResInt01)
                    .HasColumnName("RES_INT01")
                    .HasComment("reserve int field 01");

                entity.Property(e => e.ResInt02)
                    .HasColumnName("RES_INT02")
                    .HasComment("reserve int field 02");

                entity.Property(e => e.ResInt03)
                    .HasColumnName("RES_INT03")
                    .HasComment("reserve int field 03");

                entity.Property(e => e.ResInt04)
                    .HasColumnName("RES_INT04")
                    .HasComment("reserve int field 04");

                entity.Property(e => e.ResInt05)
                    .HasColumnName("RES_INT05")
                    .HasComment("reserve int field 05");

                entity.Property(e => e.TranAmount)
                    .HasColumnName("TRAN_AMOUNT")
                    .HasComment("total amount of transaction performed");

                entity.Property(e => e.TranCode)
                    .HasMaxLength(8)
                    .HasColumnName("TRAN_CODE")
                    .HasComment("transaction code of transaction performed");

                entity.Property(e => e.TranCur)
                    .HasMaxLength(8)
                    .HasColumnName("TRAN_CUR")
                    .HasComment("currency of transaction performed");

                entity.Property(e => e.TranCurAmount)
                    .HasColumnName("TRAN_CUR_AMOUNT")
                    .HasComment("total amount of transaction of foreign currency");

                entity.Property(e => e.TranDate)
                    .HasColumnName("TRAN_DATE")
                    .HasComment("date of transaction made");

                entity.Property(e => e.TranLocation)
                    .HasMaxLength(20)
                    .HasColumnName("TRAN_LOCATION")
                    .HasComment("location of transaction take place");

                entity.Property(e => e.TranPostDate)
                    .HasColumnName("TRAN_POST_DATE")
                    .HasComment("posting date of transaction performed");

                entity.Property(e => e.TranRate)
                    .HasColumnName("TRAN_RATE")
                    .HasComment("conversion rate of currency");

                entity.Property(e => e.TranRev).HasColumnName("TRAN_REV");

                entity.Property(e => e.TranSeq)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("TRAN_SEQ");

                entity.Property(e => e.TranType)
                    .HasColumnName("TRAN_TYPE")
                    .HasComment("credit / debit / both");

                entity.Property(e => e.TranValDate)
                    .HasColumnName("TRAN_VAL_DATE")
                    .HasComment("value date of transaction performed");

                entity.Property(e => e.TypeData)
                    .HasMaxLength(50)
                    .HasColumnName("TYPE_DATA")
                    .HasComment("to differentiate between daily/historical");

                entity.Property(e => e.TypeEnt)
                    .HasMaxLength(50)
                    .HasColumnName("TYPE_ENT");

                entity.Property(e => e.TypeProduct)
                    .HasMaxLength(8)
                    .HasColumnName("TYPE_PRODUCT");
            });

            modelBuilder.Entity<RfTsAct>(entity =>
            {
                entity.HasKey(e => e.CodeSeq)
                    .HasName("Pk_RF_TS_ACT_CODE_SEQ_1");

                entity.ToTable("RF_TS_ACT");

                entity.HasComment("Remarks performed on watchlist module");

                entity.Property(e => e.CodeSeq).HasColumnName("CODE_SEQ");

                entity.Property(e => e.AuditAction)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_ACTION");

                entity.Property(e => e.AuditCreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("AUDIT_CREATED_DATE")
                    .HasComment("Date time activity being executed");

                entity.Property(e => e.AuditCreatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_CREATED_USER")
                    .HasComment("User ID of staff performed activity");

                entity.Property(e => e.AuditRemarks)
                    .HasColumnName("AUDIT_REMARKS")
                    .HasComment("Remarks fill in by users");

                entity.Property(e => e.AuditStatus)
                    .HasColumnName("AUDIT_STATUS")
                    .HasComment("Status changed upon activity performed");

                entity.Property(e => e.AuditSubStatus)
                    .HasColumnName("AUDIT_SUB_STATUS")
                    .HasComment("Status changed upon activity performed");

                entity.Property(e => e.CaseId)
                    .HasColumnName("CASE_ID")
                    .HasComment("Case ID for watchlist Module");

                entity.Property(e => e.CodeComp)
                    .HasColumnName("CODE_COMP")
                    .HasComment("Company Code");

                entity.Property(e => e.CodeOrg)
                    .HasColumnName("CODE_ORG")
                    .HasComment("Organization Code");

                entity.Property(e => e.RfId)
                    .HasColumnName("RF_ID")
                    .HasComment("RedFlag ID for watchlist module");
            });

            modelBuilder.Entity<RfTsAttach>(entity =>
            {
                entity.HasKey(e => e.CodeSeq)
                    .HasName("Pk_RF_TS_ATTACH_CODE_SEQ_2");

                entity.ToTable("RF_TS_ATTACH");

                entity.HasComment("Attachment on Transaction Monitoring module");

                entity.Property(e => e.CodeSeq).HasColumnName("CODE_SEQ");

                entity.Property(e => e.AuditCreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("AUDIT_CREATED_DATE")
                    .HasComment("Date time attachment being executed");

                entity.Property(e => e.AuditCreatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_CREATED_USER")
                    .HasComment("User ID of staff performed activity");

                entity.Property(e => e.CaseId)
                    .HasColumnName("CASE_ID")
                    .HasComment("Case ID for Transaction Monitoring Module");

                entity.Property(e => e.CodeComp)
                    .HasColumnName("CODE_COMP")
                    .HasComment("Company Code");

                entity.Property(e => e.CodeOrg)
                    .HasColumnName("CODE_ORG")
                    .HasComment("Organization Code");

                entity.Property(e => e.FileEncode)
                    .HasColumnName("FILE_ENCODE")
                    .HasComment("Encoded data of each files");

                entity.Property(e => e.FileName)
                    .HasMaxLength(200)
                    .HasColumnName("FILE_NAME")
                    .HasComment("Attachment File Name");

                entity.Property(e => e.FilePath)
                    .HasMaxLength(200)
                    .HasColumnName("FILE_PATH")
                    .HasComment("Attachment File Path");

                entity.Property(e => e.RfId)
                    .HasColumnName("RF_ID")
                    .HasComment("RedFlag ID for Transaction Monitoring module");
            });

            modelBuilder.Entity<RfTscomparison>(entity =>
            {
                entity.HasKey(e => new { e.CodeOrg, e.CodeComp, e.RfId });

                entity.ToTable("RF_TSCOMPARISON");

                entity.Property(e => e.CodeOrg)
                    .HasColumnName("CODE_ORG")
                    .HasComment("organization code");

                entity.Property(e => e.CodeComp).HasColumnName("CODE_COMP");

                entity.Property(e => e.RfId)
                    .HasColumnName("RF_ID")
                    .HasComment("red flag id");

                entity.Property(e => e.AuditCreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("AUDIT_CREATED_DATE");

                entity.Property(e => e.AuditCreatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_CREATED_USER");

                entity.Property(e => e.ComparisonData).HasColumnName("COMPARISON_DATA");

                entity.Property(e => e.EntityId)
                    .HasMaxLength(50)
                    .HasColumnName("ENTITY_ID");

                entity.Property(e => e.FilteringCriteria)
                    .HasMaxLength(50)
                    .HasColumnName("FILTERING_CRITERIA");

                entity.Property(e => e.InputData)
                    .HasMaxLength(50)
                    .HasColumnName("INPUT_DATA");

                entity.Property(e => e.Match)
                    .HasMaxLength(200)
                    .HasColumnName("MATCH");

                entity.Property(e => e.WatchlistData)
                    .HasMaxLength(200)
                    .HasColumnName("WATCHLIST_DATA");
            });

            modelBuilder.Entity<RfTsdtl>(entity =>
            {
                entity.HasKey(e => new { e.CodeComp, e.CodeOrg, e.RfId, e.TranId });

                entity.ToTable("RF_TSDTL");

                entity.Property(e => e.CodeComp)
                    .HasColumnName("CODE_COMP")
                    .HasComment("company code");

                entity.Property(e => e.CodeOrg)
                    .HasColumnName("CODE_ORG")
                    .HasComment("organization code");

                entity.Property(e => e.RfId)
                    .HasColumnName("RF_ID")
                    .HasComment("red flag ID");

                entity.Property(e => e.TranId)
                    .HasColumnName("TRAN_ID")
                    .HasComment("link to the actual transaction in TXN table");

                entity.Property(e => e.AuditCreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("AUDIT_CREATED_DATE")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.AuditCreatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_CREATED_USER");

                entity.Property(e => e.AuditUpdatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("AUDIT_UPDATED_DATE")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.AuditUpdatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_UPDATED_USER");

                entity.Property(e => e.InfoBranch)
                    .HasMaxLength(15)
                    .HasColumnName("INFO_BRANCH");

                entity.Property(e => e.ModuleId)
                    .HasMaxLength(8)
                    .HasColumnName("MODULE_ID");

                entity.Property(e => e.NoAcc)
                    .HasMaxLength(30)
                    .HasColumnName("NO_ACC")
                    .HasComment("customer's account number");

                entity.Property(e => e.NoCif)
                    .HasMaxLength(30)
                    .HasColumnName("NO_CIF")
                    .HasComment("customer's identification number");

                entity.Property(e => e.ResChar01)
                    .HasMaxLength(100)
                    .HasColumnName("RES_CHAR01")
                    .HasComment("reserve char field 01");

                entity.Property(e => e.ResChar02)
                    .HasMaxLength(100)
                    .HasColumnName("RES_CHAR02")
                    .HasComment("reserve char field 02");

                entity.Property(e => e.ResChar03)
                    .HasMaxLength(100)
                    .HasColumnName("RES_CHAR03")
                    .HasComment("reserve char field 03");

                entity.Property(e => e.ResChar04)
                    .HasMaxLength(100)
                    .HasColumnName("RES_CHAR04")
                    .HasComment("reserve char field 04");

                entity.Property(e => e.ResChar05)
                    .HasMaxLength(100)
                    .HasColumnName("RES_CHAR05")
                    .HasComment("reserve char field 05");

                entity.Property(e => e.ResChar06)
                    .HasMaxLength(100)
                    .HasColumnName("RES_CHAR06")
                    .HasComment("reserve char field 06");

                entity.Property(e => e.ResChar07)
                    .HasMaxLength(100)
                    .HasColumnName("RES_CHAR07")
                    .HasComment("reserve char field 07");

                entity.Property(e => e.ResChar08)
                    .HasMaxLength(100)
                    .HasColumnName("RES_CHAR08")
                    .HasComment("reserve char field 08");

                entity.Property(e => e.ResChar09)
                    .HasMaxLength(100)
                    .HasColumnName("RES_CHAR09")
                    .HasComment("reserve char field 09");

                entity.Property(e => e.ResChar10)
                    .HasMaxLength(100)
                    .HasColumnName("RES_CHAR10")
                    .HasComment("reserve char field 10");

                entity.Property(e => e.ResFlt01)
                    .HasColumnName("RES_FLT01")
                    .HasComment("reserve float field 01");

                entity.Property(e => e.ResFlt02)
                    .HasColumnName("RES_FLT02")
                    .HasComment("reserve float field 02");

                entity.Property(e => e.ResFlt03)
                    .HasColumnName("RES_FLT03")
                    .HasComment("reserve float field 03");

                entity.Property(e => e.ResFlt04)
                    .HasColumnName("RES_FLT04")
                    .HasComment("reserve float field 04");

                entity.Property(e => e.ResFlt05)
                    .HasColumnName("RES_FLT05")
                    .HasComment("reserve float field 05");

                entity.Property(e => e.ResInt01)
                    .HasColumnName("RES_INT01")
                    .HasComment("reserve int field 01");

                entity.Property(e => e.ResInt02)
                    .HasColumnName("RES_INT02")
                    .HasComment("reserve int field 02");

                entity.Property(e => e.ResInt03)
                    .HasColumnName("RES_INT03")
                    .HasComment("reserve int field 03");

                entity.Property(e => e.ResInt04)
                    .HasColumnName("RES_INT04")
                    .HasComment("reserve int field 04");

                entity.Property(e => e.ResInt05)
                    .HasColumnName("RES_INT05")
                    .HasComment("reserve int field 05");

                entity.Property(e => e.TranAmount)
                    .HasColumnName("TRAN_AMOUNT")
                    .HasComment("total amount of transaction performed");

                entity.Property(e => e.TranCode)
                    .HasMaxLength(8)
                    .HasColumnName("TRAN_CODE")
                    .HasComment("transaction code of transaction performed");

                entity.Property(e => e.TranCur)
                    .HasMaxLength(8)
                    .HasColumnName("TRAN_CUR")
                    .HasComment("currency of transaction performed");

                entity.Property(e => e.TranCurAmount)
                    .HasColumnName("TRAN_CUR_AMOUNT")
                    .HasComment("total amount of transaction of foreign currency");

                entity.Property(e => e.TranDate)
                    .HasColumnName("TRAN_DATE")
                    .HasComment("date of transaction made");

                entity.Property(e => e.TranLocation)
                    .HasMaxLength(20)
                    .HasColumnName("TRAN_LOCATION")
                    .HasComment("location of transaction take place");

                entity.Property(e => e.TranPostDate)
                    .HasColumnName("TRAN_POST_DATE")
                    .HasComment("posting date of transaction performed");

                entity.Property(e => e.TranRate)
                    .HasColumnName("TRAN_RATE")
                    .HasComment("conversion rate of currency");

                entity.Property(e => e.TranRev).HasColumnName("TRAN_REV");

                entity.Property(e => e.TranSeq)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("TRAN_SEQ");

                entity.Property(e => e.TranType)
                    .HasColumnName("TRAN_TYPE")
                    .HasComment("credit / debit / both");

                entity.Property(e => e.TranValDate)
                    .HasColumnName("TRAN_VAL_DATE")
                    .HasComment("value date of transaction performed");

                entity.Property(e => e.TypeData)
                    .HasMaxLength(50)
                    .HasColumnName("TYPE_DATA")
                    .HasComment("to differentiate between daily/historical");

                entity.Property(e => e.TypeEnt)
                    .HasMaxLength(50)
                    .HasColumnName("TYPE_ENT");

                entity.Property(e => e.TypeProduct)
                    .HasMaxLength(8)
                    .HasColumnName("TYPE_PRODUCT");
            });

            modelBuilder.Entity<RfTshitdtl>(entity =>
            {
                entity.HasKey(e => new { e.CodeComp, e.CodeOrg, e.RfId, e.SysSeq });

                entity.ToTable("RF_TSHITDTL");

                entity.Property(e => e.CodeComp)
                    .HasColumnName("CODE_COMP")
                    .HasComment("company code");

                entity.Property(e => e.CodeOrg)
                    .HasColumnName("CODE_ORG")
                    .HasComment("organization code");

                entity.Property(e => e.RfId)
                    .HasColumnName("RF_ID")
                    .HasComment("red flag id");

                entity.Property(e => e.SysSeq)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("SYS_SEQ")
                    .HasComment("system running number (index purpose)");

                entity.Property(e => e.AuditCreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("AUDIT_CREATED_DATE")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.AuditCreatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_CREATED_USER");

                entity.Property(e => e.AuditUpdatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("AUDIT_UPDATED_DATE")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.AuditUpdatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_UPDATED_USER");

                entity.Property(e => e.HitValue)
                    .HasMaxLength(1000)
                    .HasColumnName("HIT_VALUE")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Input)
                    .HasMaxLength(1000)
                    .HasColumnName("INPUT")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TypeHit)
                    .HasColumnName("TYPE_HIT")
                    .HasDefaultValueSql("((0))")
                    .HasComment("Hit indicator for 1-Sanction country/currency, 2-BIC code, 3-Txn purpose, 4-Amount");
            });

            modelBuilder.Entity<RfTswlcomparison>(entity =>
            {
                entity.HasKey(e => new { e.CodeOrg, e.CodeComp, e.RfId });

                entity.ToTable("RF_TSWLCOMPARISON");

                entity.Property(e => e.CodeOrg)
                    .HasColumnName("CODE_ORG")
                    .HasComment("organization code");

                entity.Property(e => e.CodeComp).HasColumnName("CODE_COMP");

                entity.Property(e => e.RfId)
                    .HasColumnName("RF_ID")
                    .HasComment("red flag id");

                entity.Property(e => e.AuditCreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("AUDIT_CREATED_DATE");

                entity.Property(e => e.AuditCreatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_CREATED_USER");

                entity.Property(e => e.ComparisonData).HasColumnName("COMPARISON_DATA");
            });

            modelBuilder.Entity<RfTswldtl>(entity =>
            {
                entity.HasKey(e => new { e.CodeComp, e.CodeOrg, e.RfId, e.SysSeq });

                entity.ToTable("RF_TSWLDTL");

                entity.Property(e => e.CodeComp)
                    .HasColumnName("CODE_COMP")
                    .HasComment("company code");

                entity.Property(e => e.CodeOrg)
                    .HasColumnName("CODE_ORG")
                    .HasComment("organization code");

                entity.Property(e => e.RfId)
                    .HasColumnName("RF_ID")
                    .HasComment("red flag id");

                entity.Property(e => e.SysSeq)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("SYS_SEQ")
                    .HasComment("system running number (index purpose)");

                entity.Property(e => e.AuditCreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("AUDIT_CREATED_DATE")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.AuditCreatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_CREATED_USER");

                entity.Property(e => e.AuditUpdatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("AUDIT_UPDATED_DATE")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.AuditUpdatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_UPDATED_USER");

                entity.Property(e => e.Categorynum)
                    .HasMaxLength(500)
                    .HasColumnName("CATEGORYNUM")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ConfidenceScore)
                    .HasColumnName("CONFIDENCE_SCORE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.FlagFalsepos)
                    .HasColumnName("FLAG_FALSEPOS")
                    .HasComment("flag of false positive");

                entity.Property(e => e.HitCategory)
                    .HasMaxLength(100)
                    .HasColumnName("HIT_CATEGORY")
                    .HasComment("watchlist category");

                entity.Property(e => e.HitCountry)
                    .HasMaxLength(4000)
                    .HasColumnName("HIT_COUNTRY")
                    .HasComment("watchlist country");

                entity.Property(e => e.HitDobs)
                    .HasMaxLength(500)
                    .HasColumnName("HIT_DOBS")
                    .HasComment("watchlist YOB");

                entity.Property(e => e.HitGender)
                    .HasMaxLength(20)
                    .HasColumnName("HIT_GENDER")
                    .HasComment("gender field in watchlist");

                entity.Property(e => e.HitId)
                    .HasMaxLength(150)
                    .HasColumnName("HIT_ID")
                    .HasComment("watchlist id");

                entity.Property(e => e.HitNamesource)
                    .HasMaxLength(20)
                    .HasColumnName("HIT_NAMESOURCE");

                entity.Property(e => e.HitSource)
                    .HasMaxLength(20)
                    .HasColumnName("HIT_SOURCE")
                    .HasComment("watchlist provider");

                entity.Property(e => e.HitStrong)
                    .HasColumnName("HIT_STRONG")
                    .HasComment("match percentage group");

                entity.Property(e => e.HitType)
                    .HasColumnName("HIT_TYPE")
                    .HasComment("0-Sender, 1-Bene");

                entity.Property(e => e.HitWlId)
                    .HasMaxLength(30)
                    .HasColumnName("HIT_WL_ID")
                    .HasComment("entity id for watchlist");

                entity.Property(e => e.InfoName)
                    .HasMaxLength(1000)
                    .HasColumnName("INFO_NAME")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NoAccount)
                    .HasMaxLength(30)
                    .HasColumnName("NO_ACCOUNT")
                    .HasComment("account no of customer");

                entity.Property(e => e.NoCif)
                    .HasMaxLength(30)
                    .HasColumnName("NO_CIF")
                    .HasComment("cif no of customer");

                entity.Property(e => e.OriginalScriptName)
                    .HasMaxLength(300)
                    .HasColumnName("ORIGINAL_SCRIPT_NAME")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Remarks)
                    .HasMaxLength(2000)
                    .HasColumnName("REMARKS")
                    .HasComment("remarks");

                entity.Property(e => e.Sanction)
                    .HasMaxLength(1024)
                    .HasColumnName("SANCTION")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SingleStringName)
                    .HasMaxLength(255)
                    .HasColumnName("SINGLE_STRING_NAME")
                    .HasComment("watchlist name");

                entity.Property(e => e.StatusInv)
                    .HasColumnName("STATUS_INV")
                    .HasComment("investigation status assigned by user");

                entity.Property(e => e.Subcategory)
                    .HasMaxLength(50)
                    .HasColumnName("SUBCATEGORY")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TypeEnt)
                    .HasMaxLength(50)
                    .HasColumnName("TYPE_ENT");

                entity.Property(e => e.TypeExpo)
                    .HasColumnName("TYPE_EXPO")
                    .HasComment("exposition assigned by user");

                entity.Property(e => e.TypeHit)
                    .HasColumnName("TYPE_HIT")
                    .HasComment("indicator hit (name/id/country etc)");

                entity.Property(e => e.TypeName)
                    .HasMaxLength(255)
                    .HasColumnName("TYPE_NAME")
                    .HasComment("name type (primary/aka/secondary etc)");
            });

            modelBuilder.Entity<RfWm>(entity =>
            {
                entity.HasKey(e => new { e.CodeComp, e.CodeOrg, e.ModuleId, e.RfId });

                entity.ToTable("RF_WM");

                entity.HasIndex(e => new { e.CodeComp, e.CodeOrg, e.CaseId, e.RfId }, "Unq_RF_WM_CODE_COMP")
                    .IsUnique();

                entity.Property(e => e.CodeComp)
                    .HasColumnName("CODE_COMP")
                    .HasComment("company code");

                entity.Property(e => e.CodeOrg)
                    .HasColumnName("CODE_ORG")
                    .HasComment("organization code");

                entity.Property(e => e.ModuleId)
                    .HasColumnName("MODULE_ID")
                    .HasComment("module of redflag");

                entity.Property(e => e.RfId)
                    .HasColumnName("RF_ID")
                    .HasComment("red flag id");

                entity.Property(e => e.AuditCreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("AUDIT_CREATED_DATE")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the record being created");

                entity.Property(e => e.AuditCreatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_CREATED_USER")
                    .HasComment("User created the record");

                entity.Property(e => e.AuditStatus)
                    .HasColumnName("AUDIT_STATUS")
                    .HasComment("current redflag status");

                entity.Property(e => e.AuditUpdatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("AUDIT_UPDATED_DATE")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the record being updated");

                entity.Property(e => e.AuditUpdatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_UPDATED_USER")
                    .HasComment("user who modify the record");

                entity.Property(e => e.CaseId)
                    .HasColumnName("CASE_ID")
                    .HasComment("assign case id");

                entity.Property(e => e.ConfigDetect)
                    .HasMaxLength(15)
                    .HasColumnName("CONFIG_DETECT")
                    .HasComment("to differentiate the method of detection");

                entity.Property(e => e.ConfigSqlfd)
                    .HasMaxLength(2000)
                    .HasColumnName("CONFIG_SQLFD")
                    .HasComment("table use for screening");

                entity.Property(e => e.ConfigTable)
                    .HasMaxLength(30)
                    .HasColumnName("CONFIG_TABLE")
                    .HasComment("table use for name screening");

                entity.Property(e => e.HitDate)
                    .HasColumnName("HIT_DATE")
                    .HasComment("date of redflag being generated");

                entity.Property(e => e.HitRuleid)
                    .HasMaxLength(15)
                    .HasColumnName("HIT_RULEID")
                    .HasComment("rule id for hit redflag");

                entity.Property(e => e.HitRulename)
                    .HasMaxLength(100)
                    .HasColumnName("HIT_RULENAME")
                    .HasComment("rule name for hit redflag");

                entity.Property(e => e.HitSearch)
                    .HasMaxLength(2000)
                    .HasColumnName("HIT_SEARCH")
                    .HasComment("search name resulting to hit");

                entity.Property(e => e.HitVol)
                    .HasColumnName("HIT_VOL")
                    .HasComment("total volume watchlist hit");

                entity.Property(e => e.HitVolId)
                    .HasColumnName("HIT_VOL_ID")
                    .HasComment("total volume watchlist hit base on ID");

                entity.Property(e => e.HitVolName)
                    .HasColumnName("HIT_VOL_NAME")
                    .HasComment("total volume watchlist hit base on name");

                entity.Property(e => e.InfoBranch)
                    .HasMaxLength(20)
                    .HasColumnName("INFO_BRANCH")
                    .HasComment("customer's account opening branch");

                entity.Property(e => e.InfoName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("INFO_NAME");

                entity.Property(e => e.NoCif)
                    .HasMaxLength(30)
                    .HasColumnName("NO_CIF")
                    .HasComment("Customer's identification no");

                entity.Property(e => e.TagCaseAssign)
                    .HasColumnName("TAG_CASE_ASSIGN")
                    .HasComment("case ID where this redflag being assigned");

                entity.Property(e => e.TagFraud)
                    .HasMaxLength(1)
                    .HasColumnName("TAG_FRAUD")
                    .HasComment("tagging of fraud");

                entity.Property(e => e.TagStaff)
                    .HasColumnName("TAG_STAFF")
                    .HasComment("tagging of staff");

                entity.Property(e => e.TypeProduct)
                    .HasMaxLength(8)
                    .HasColumnName("TYPE_PRODUCT")
                    .HasComment("product code of account take place");

                entity.Property(e => e.TypeSearch)
                    .HasMaxLength(2)
                    .HasColumnName("TYPE_SEARCH")
                    .HasComment("to differentiate type of search performed (partial, full, etc etc)");
            });

            modelBuilder.Entity<RfWmAct>(entity =>
            {
                entity.HasKey(e => e.CodeSeq)
                    .HasName("Pk_AUDIT_MASTER_CODE_SEQ_1");

                entity.ToTable("RF_WM_ACT");

                entity.HasComment("Remarks performed on watchlist module");

                entity.Property(e => e.CodeSeq).HasColumnName("CODE_SEQ");

                entity.Property(e => e.AuditAction)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_ACTION");

                entity.Property(e => e.AuditCreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("AUDIT_CREATED_DATE")
                    .HasComment("Date time activity being executed");

                entity.Property(e => e.AuditCreatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_CREATED_USER")
                    .HasComment("User ID of staff performed activity");

                entity.Property(e => e.AuditRemarks)
                    .HasColumnName("AUDIT_REMARKS")
                    .HasComment("Remarks fill in by users");

                entity.Property(e => e.AuditStatus)
                    .HasColumnName("AUDIT_STATUS")
                    .HasComment("Status changed upon activity performed");

                entity.Property(e => e.AuditSubStatus)
                    .HasColumnName("AUDIT_SUB_STATUS")
                    .HasComment("Status changed upon activity performed");

                entity.Property(e => e.CaseId)
                    .HasColumnName("CASE_ID")
                    .HasComment("Case ID for watchlist Module");

                entity.Property(e => e.CodeComp)
                    .HasColumnName("CODE_COMP")
                    .HasComment("Company Code");

                entity.Property(e => e.CodeOrg)
                    .HasColumnName("CODE_ORG")
                    .HasComment("Organization Code");

                entity.Property(e => e.RfId)
                    .HasColumnName("RF_ID")
                    .HasComment("RedFlag ID for watchlist module");
            });

            modelBuilder.Entity<RfWmAttach>(entity =>
            {
                entity.HasKey(e => e.CodeSeq)
                    .HasName("Pk_AUDIT_MASTER_CODE_SEQ_2");

                entity.ToTable("RF_WM_ATTACH");

                entity.HasComment("Attachment on watchlist module");

                entity.Property(e => e.CodeSeq).HasColumnName("CODE_SEQ");

                entity.Property(e => e.AuditCreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("AUDIT_CREATED_DATE")
                    .HasComment("Date time attachment being executed");

                entity.Property(e => e.AuditCreatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_CREATED_USER")
                    .HasComment("User ID of staff performed activity");

                entity.Property(e => e.CaseId)
                    .HasColumnName("CASE_ID")
                    .HasComment("Case ID for watchlist Module");

                entity.Property(e => e.CodeComp)
                    .HasColumnName("CODE_COMP")
                    .HasComment("Company Code");

                entity.Property(e => e.CodeOrg)
                    .HasColumnName("CODE_ORG")
                    .HasComment("Organization Code");

                entity.Property(e => e.FileEncode)
                    .HasColumnName("FILE_ENCODE")
                    .HasComment("Encoded data of each files");

                entity.Property(e => e.FileName)
                    .HasMaxLength(200)
                    .HasColumnName("FILE_NAME")
                    .HasComment("Attachment File Name");

                entity.Property(e => e.FilePath)
                    .HasMaxLength(200)
                    .HasColumnName("FILE_PATH")
                    .HasComment("Attachment File Path");

                entity.Property(e => e.RfId)
                    .HasColumnName("RF_ID")
                    .HasComment("RedFlag ID for watchlist module");
            });

            modelBuilder.Entity<RfWmcomparison>(entity =>
            {
                entity.HasKey(e => new { e.CodeOrg, e.CodeComp, e.RfId });

                entity.ToTable("RF_WMCOMPARISON");

                entity.Property(e => e.CodeOrg)
                    .HasColumnName("CODE_ORG")
                    .HasComment("organization code");

                entity.Property(e => e.CodeComp).HasColumnName("CODE_COMP");

                entity.Property(e => e.RfId)
                    .HasColumnName("RF_ID")
                    .HasComment("red flag id");

                entity.Property(e => e.AuditCreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("AUDIT_CREATED_DATE");

                entity.Property(e => e.AuditCreatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_CREATED_USER");

                entity.Property(e => e.ComparisonData).HasColumnName("COMPARISON_DATA");

                entity.Property(e => e.EntityId)
                    .HasMaxLength(50)
                    .HasColumnName("ENTITY_ID");

                entity.Property(e => e.FilteringCriteria)
                    .HasMaxLength(50)
                    .HasColumnName("FILTERING_CRITERIA");

                entity.Property(e => e.InputData)
                    .HasMaxLength(50)
                    .HasColumnName("INPUT_DATA");

                entity.Property(e => e.Match)
                    .HasMaxLength(200)
                    .HasColumnName("MATCH");

                entity.Property(e => e.WatchlistData)
                    .HasMaxLength(200)
                    .HasColumnName("WATCHLIST_DATA");
            });

            modelBuilder.Entity<RfWmdtl>(entity =>
            {
                entity.HasKey(e => new { e.CodeComp, e.CodeOrg, e.RfId, e.SysSeq });

                entity.ToTable("RF_WMDTL");

                entity.Property(e => e.CodeComp)
                    .HasColumnName("CODE_COMP")
                    .HasComment("company code");

                entity.Property(e => e.CodeOrg)
                    .HasColumnName("CODE_ORG")
                    .HasComment("organization code");

                entity.Property(e => e.RfId)
                    .HasColumnName("RF_ID")
                    .HasComment("red flag id");

                entity.Property(e => e.SysSeq)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("SYS_SEQ")
                    .HasComment("system running number (index purpose)");

                entity.Property(e => e.AuditCreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("AUDIT_CREATED_DATE")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.AuditCreatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_CREATED_USER");

                entity.Property(e => e.AuditUpdatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("AUDIT_UPDATED_DATE")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.AuditUpdatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_UPDATED_USER");

                entity.Property(e => e.Categorynum)
                    .HasMaxLength(500)
                    .HasColumnName("CATEGORYNUM")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ConfidenceScore)
                    .HasColumnName("CONFIDENCE_SCORE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.FlagFalsepos)
                    .HasColumnName("FLAG_FALSEPOS")
                    .HasComment("flag of false positive");

                entity.Property(e => e.HitCategory)
                    .HasMaxLength(100)
                    .HasColumnName("HIT_CATEGORY")
                    .HasComment("watchlist category");

                entity.Property(e => e.HitCountry)
                    .HasMaxLength(4000)
                    .HasColumnName("HIT_COUNTRY")
                    .HasComment("watchlist country");

                entity.Property(e => e.HitDobs)
                    .HasMaxLength(500)
                    .HasColumnName("HIT_DOBS")
                    .HasComment("watchlist YOB");

                entity.Property(e => e.HitGender)
                    .HasMaxLength(20)
                    .HasColumnName("HIT_GENDER")
                    .HasComment("gender field in watchlist");

                entity.Property(e => e.HitId)
                    .HasMaxLength(150)
                    .HasColumnName("HIT_ID")
                    .HasComment("watchlist id");

                entity.Property(e => e.HitNamesource)
                    .HasMaxLength(20)
                    .HasColumnName("HIT_NAMESOURCE");

                entity.Property(e => e.HitSource)
                    .HasMaxLength(20)
                    .HasColumnName("HIT_SOURCE")
                    .HasComment("watchlist provider");

                entity.Property(e => e.HitStrong)
                    .HasColumnName("HIT_STRONG")
                    .HasComment("match percentage group");

                entity.Property(e => e.HitWlId)
                    .HasMaxLength(30)
                    .HasColumnName("HIT_WL_ID")
                    .HasComment("entity id for watchlist");

                entity.Property(e => e.NoAccount)
                    .HasMaxLength(30)
                    .HasColumnName("NO_ACCOUNT")
                    .HasComment("account no of customer");

                entity.Property(e => e.NoCif)
                    .HasMaxLength(30)
                    .HasColumnName("NO_CIF")
                    .HasComment("cif no of customer");

                entity.Property(e => e.OriginalScriptName)
                    .HasMaxLength(300)
                    .HasColumnName("ORIGINAL_SCRIPT_NAME")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Remarks)
                    .HasMaxLength(2000)
                    .HasColumnName("REMARKS")
                    .HasComment("remarks");

                entity.Property(e => e.Sanction)
                    .HasMaxLength(1024)
                    .HasColumnName("SANCTION")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SingleStringName)
                    .HasMaxLength(255)
                    .HasColumnName("SINGLE_STRING_NAME")
                    .HasComment("watchlist name");

                entity.Property(e => e.StatusInv)
                    .HasColumnName("STATUS_INV")
                    .HasComment("investigation status assigned by user");

                entity.Property(e => e.Subcategory)
                    .HasMaxLength(50)
                    .HasColumnName("SUBCATEGORY")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TypeEnt)
                    .HasMaxLength(50)
                    .HasColumnName("TYPE_ENT");

                entity.Property(e => e.TypeExpo)
                    .HasColumnName("TYPE_EXPO")
                    .HasComment("exposition assigned by user");

                entity.Property(e => e.TypeHit)
                    .HasColumnName("TYPE_HIT")
                    .HasComment("indicator hit (name/id/country etc)");

                entity.Property(e => e.TypeName)
                    .HasMaxLength(255)
                    .HasColumnName("TYPE_NAME")
                    .HasComment("name type (primary/aka/secondary etc)");
            });

            modelBuilder.Entity<RiskCalc>(entity =>
            {
                entity.HasKey(e => new { e.CodeComp, e.CodeOrg, e.AssessmentId, e.RiskCalcId })
                    .HasName("PK_RISK_CALCULATION_1");

                entity.ToTable("RISK_CALC");

                entity.Property(e => e.CodeComp)
                    .HasColumnName("CODE_COMP")
                    .HasComment("company code");

                entity.Property(e => e.CodeOrg)
                    .HasColumnName("CODE_ORG")
                    .HasComment("organization code");

                entity.Property(e => e.AssessmentId)
                    .HasMaxLength(50)
                    .HasColumnName("ASSESSMENT_ID")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.RiskCalcId).HasColumnName("RISK_CALC_ID");

                entity.Property(e => e.AuditCreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("AUDIT_CREATED_DATE")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the record being created");

                entity.Property(e => e.AuditCreatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_CREATED_USER")
                    .HasComment("User created the record");

                entity.Property(e => e.AuditUpdatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("AUDIT_UPDATED_DATE")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the record being updated");

                entity.Property(e => e.AuditUpdatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_UPDATED_USER")
                    .HasComment("user who modify the record");

                entity.Property(e => e.FilterStatus).HasColumnName("FILTER_STATUS");

                entity.Property(e => e.FirsttimeRp).HasColumnName("FIRSTTIME_RP");

                entity.Property(e => e.GrpAcctSqlStmt)
                    .HasMaxLength(4000)
                    .HasColumnName("GRP_ACCT_SQL_STMT");

                entity.Property(e => e.GrpAcctSqlStmt1)
                    .HasMaxLength(4000)
                    .HasColumnName("GRP_ACCT_SQL_STMT1");

                entity.Property(e => e.GrpAcctTable)
                    .HasMaxLength(50)
                    .HasColumnName("GRP_ACCT_TABLE");

                entity.Property(e => e.GrpCifSqlStmt)
                    .HasMaxLength(4000)
                    .HasColumnName("GRP_CIF_SQL_STMT");

                entity.Property(e => e.GrpCifSqlStmt1)
                    .HasMaxLength(4000)
                    .HasColumnName("GRP_CIF_SQL_STMT1");

                entity.Property(e => e.GrpCifTable)
                    .HasMaxLength(50)
                    .HasColumnName("GRP_CIF_TABLE");

                entity.Property(e => e.GrpComputeMethod).HasColumnName("GRP_COMPUTE_METHOD");

                entity.Property(e => e.GrpFilterAcctStatus).HasColumnName("GRP_FILTER_ACCT_STATUS");

                entity.Property(e => e.GrpFilterAcctStatus1).HasColumnName("GRP_FILTER_ACCT_STATUS1");

                entity.Property(e => e.GrpFilterCifStatus).HasColumnName("GRP_FILTER_CIF_STATUS");

                entity.Property(e => e.GrpFilterCifStatus1).HasColumnName("GRP_FILTER_CIF_STATUS1");

                entity.Property(e => e.GrpFilterMiscStatus).HasColumnName("GRP_FILTER_MISC_STATUS");

                entity.Property(e => e.GrpFilterMiscStatus1).HasColumnName("GRP_FILTER_MISC_STATUS1");

                entity.Property(e => e.GrpFilterStatus).HasColumnName("GRP_FILTER_STATUS");

                entity.Property(e => e.GrpFilterStmt)
                    .HasMaxLength(4000)
                    .HasColumnName("GRP_FILTER_STMT")
                    .HasComment("Filtered Condition");

                entity.Property(e => e.GrpLinkAcc).HasColumnName("GRP_LINK_ACC");

                entity.Property(e => e.GrpLinkScoreFd)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("GRP_LINK_SCORE_FD")
                    .HasDefaultValueSql("(N'ACCOUNT_NO')");

                entity.Property(e => e.GrpMaxSoureParentId).HasColumnName("GRP_MAX_SOURE_PARENT_ID");

                entity.Property(e => e.GrpMaxSoureTable)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("GRP_MAX_SOURE_TABLE")
                    .HasDefaultValueSql("(N'NA')");

                entity.Property(e => e.GrpMiscSqlStmt)
                    .HasMaxLength(4000)
                    .HasColumnName("GRP_MISC_SQL_STMT");

                entity.Property(e => e.GrpMiscSqlStmt1)
                    .HasMaxLength(4000)
                    .HasColumnName("GRP_MISC_SQL_STMT1");

                entity.Property(e => e.GrpMiscTable)
                    .HasMaxLength(50)
                    .HasColumnName("GRP_MISC_TABLE");

                entity.Property(e => e.GrpSqlStmt)
                    .HasMaxLength(4000)
                    .HasColumnName("GRP_SQL_STMT")
                    .HasComment("Full Query");

                entity.Property(e => e.LinkCodetableNo).HasColumnName("LINK_CODETABLE_NO");

                entity.Property(e => e.MaxScoreFd)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("MAX_SCORE_FD")
                    .HasDefaultValueSql("(N'NA')");

                entity.Property(e => e.RiskCalcDesc)
                    .HasMaxLength(150)
                    .HasColumnName("RISK_CALC_DESC")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.RiskCalcType).HasColumnName("RISK_CALC_TYPE");

                entity.Property(e => e.RiskModelNo).HasColumnName("RISK_MODEL_NO");

                entity.Property(e => e.ScoreFd)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("SCORE_FD")
                    .HasDefaultValueSql("(N'NA')");

                entity.Property(e => e.SeqNo).HasColumnName("SEQ_NO");

                entity.Property(e => e.SqlVerifyInd)
                    .HasColumnName("SQL_VERIFY_IND")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Status).HasColumnName("STATUS");

                entity.Property(e => e.TableParentId)
                    .HasColumnName("TABLE_PARENT_ID")
                    .HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<RiskCalcFilter>(entity =>
            {
                entity.HasKey(e => new { e.CodeComp, e.AssessmentId, e.RiskCalcId, e.FilterId, e.CodeOrg });

                entity.ToTable("RISK_CALC_FILTER");

                entity.Property(e => e.CodeComp)
                    .HasColumnName("CODE_COMP")
                    .HasComment("Company Code");

                entity.Property(e => e.AssessmentId)
                    .HasMaxLength(50)
                    .HasColumnName("ASSESSMENT_ID")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.RiskCalcId).HasColumnName("RISK_CALC_ID");

                entity.Property(e => e.FilterId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("FILTER_ID");

                entity.Property(e => e.CodeOrg)
                    .HasColumnName("CODE_ORG")
                    .HasComment("Organization Code");

                entity.Property(e => e.AuditCreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("AUDIT_CREATED_DATE")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the record being created");

                entity.Property(e => e.AuditCreatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_CREATED_USER")
                    .HasComment("User created the record");

                entity.Property(e => e.AuditUpdatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("AUDIT_UPDATED_DATE")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the record being updated");

                entity.Property(e => e.AuditUpdatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_UPDATED_USER")
                    .HasComment("user who modify the record");

                entity.Property(e => e.FilterDatatype)
                    .HasMaxLength(50)
                    .HasColumnName("FILTER_DATATYPE");

                entity.Property(e => e.FilterDisplayOrder).HasColumnName("FILTER_DISPLAY_ORDER");

                entity.Property(e => e.FilterField)
                    .HasMaxLength(100)
                    .HasColumnName("FILTER_FIELD")
                    .HasComment("Field Name for selection filtering");

                entity.Property(e => e.FilterFormula)
                    .HasMaxLength(50)
                    .HasColumnName("FILTER_FORMULA");

                entity.Property(e => e.FilterInputData)
                    .HasMaxLength(500)
                    .HasColumnName("FILTER_INPUT_DATA")
                    .HasComment("Data to be stored for specified filtering");

                entity.Property(e => e.FilterOperator)
                    .HasMaxLength(50)
                    .HasColumnName("FILTER_OPERATOR");

                entity.Property(e => e.FilterQuery).HasColumnName("FILTER_QUERY");

                entity.Property(e => e.FilterTable)
                    .HasMaxLength(50)
                    .HasColumnName("FILTER_TABLE")
                    .HasComment("Table name for specified filtering (Customer/");

                entity.Property(e => e.RiskTableParentId)
                    .HasColumnName("RISK_TABLE_PARENT_ID")
                    .HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<RiskCalcSource>(entity =>
            {
                entity.HasKey(e => new { e.CodeComp, e.CodeOrg, e.AssessmentId, e.RiskfactorId, e.RiskCalcId, e.AutoSeqNo })
                    .HasName("PK_RISK_CALCULATIONSOURCE");

                entity.ToTable("RISK_CALC_SOURCE");

                entity.Property(e => e.CodeComp)
                    .HasColumnName("CODE_COMP")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.CodeOrg)
                    .HasColumnName("CODE_ORG")
                    .HasComment("organization code");

                entity.Property(e => e.AssessmentId)
                    .HasMaxLength(50)
                    .HasColumnName("ASSESSMENT_ID")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.RiskfactorId)
                    .HasColumnName("RISKFACTOR_ID")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.RiskCalcId).HasColumnName("RISK_CALC_ID");

                entity.Property(e => e.AutoSeqNo)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("AUTO_SEQ_NO");

                entity.Property(e => e.AuditCreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("AUDIT_CREATED_DATE")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the record being created");

                entity.Property(e => e.AuditCreatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_CREATED_USER")
                    .HasComment("User created the record");

                entity.Property(e => e.AuditUpdatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("AUDIT_UPDATED_DATE")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the record being updated");

                entity.Property(e => e.AuditUpdatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_UPDATED_USER")
                    .HasComment("user who modify the record");

                entity.Property(e => e.DestinationField)
                    .HasMaxLength(200)
                    .HasColumnName("DESTINATION_FIELD");

                entity.Property(e => e.DestinationTable)
                    .HasMaxLength(200)
                    .HasColumnName("DESTINATION_TABLE");

                entity.Property(e => e.ParamCode).HasColumnName("PARAM_CODE");

                entity.Property(e => e.RiskDesc)
                    .HasMaxLength(200)
                    .HasColumnName("RISK_DESC");

                entity.Property(e => e.SourceField)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasColumnName("SOURCE_FIELD");

                entity.Property(e => e.SourceTable)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasColumnName("SOURCE_TABLE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Status).HasColumnName("STATUS");
            });

            modelBuilder.Entity<RiskTemp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("RISK_TEMP");

                entity.Property(e => e.FinalScore).HasColumnName("FINAL_SCORE");

                entity.Property(e => e.NoCif)
                    .HasMaxLength(50)
                    .HasColumnName("NO_CIF");

                entity.Property(e => e.NoMaster)
                    .HasMaxLength(50)
                    .HasColumnName("NO_MASTER");

                entity.Property(e => e.SumRiskCalcType1).HasColumnName("SUM_RISK_CALC_TYPE1");

                entity.Property(e => e.SumRiskCalcType2).HasColumnName("SUM_RISK_CALC_TYPE2");

                entity.Property(e => e.SumRiskCalcType3).HasColumnName("SUM_RISK_CALC_TYPE3");
            });

            modelBuilder.Entity<Riskrulematrixdtl>(entity =>
            {
                entity.HasKey(e => new { e.CompCode, e.RiskNo, e.RiskType, e.RiskLevel, e.SeqNo });

                entity.ToTable("RISKRULEMATRIXDTL");

                entity.Property(e => e.CompCode)
                    .HasColumnName("COMP_CODE")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.RiskNo)
                    .HasColumnName("RISK_NO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.RiskType)
                    .HasColumnName("RISK_TYPE")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.RiskLevel)
                    .HasColumnName("RISK_LEVEL")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.SeqNo).HasColumnName("SEQ_NO");

                entity.Property(e => e.ColDesc1)
                    .HasMaxLength(60)
                    .HasColumnName("COL_DESC1");

                entity.Property(e => e.ColDesc2)
                    .HasMaxLength(60)
                    .HasColumnName("COL_DESC2");

                entity.Property(e => e.ColDesc3)
                    .HasMaxLength(60)
                    .HasColumnName("COL_DESC3");

                entity.Property(e => e.ColDesc4)
                    .HasMaxLength(60)
                    .HasColumnName("COL_DESC4");

                entity.Property(e => e.ColDesc5)
                    .HasMaxLength(60)
                    .HasColumnName("COL_DESC5");

                entity.Property(e => e.ColDesc6)
                    .HasMaxLength(60)
                    .HasColumnName("COL_DESC6");

                entity.Property(e => e.ColDesc7)
                    .HasMaxLength(60)
                    .HasColumnName("COL_DESC7");

                entity.Property(e => e.ColDesc8)
                    .HasMaxLength(60)
                    .HasColumnName("COL_DESC8");

                entity.Property(e => e.ColDesc9)
                    .HasMaxLength(60)
                    .HasColumnName("COL_DESC9");

                entity.Property(e => e.ColRiskLevel1).HasColumnName("COL_RISK_LEVEL1");

                entity.Property(e => e.ColRiskLevel2).HasColumnName("COL_RISK_LEVEL2");

                entity.Property(e => e.ColRiskLevel3).HasColumnName("COL_RISK_LEVEL3");

                entity.Property(e => e.ColRiskLevel4).HasColumnName("COL_RISK_LEVEL4");

                entity.Property(e => e.ColRiskLevel5).HasColumnName("COL_RISK_LEVEL5");

                entity.Property(e => e.ColRiskLevel6).HasColumnName("COL_RISK_LEVEL6");

                entity.Property(e => e.ColRiskLevel7).HasColumnName("COL_RISK_LEVEL7");

                entity.Property(e => e.ColRiskLevel8).HasColumnName("COL_RISK_LEVEL8");

                entity.Property(e => e.ColRiskLevel9).HasColumnName("COL_RISK_LEVEL9");

                entity.Property(e => e.ColTotalValue).HasColumnName("COL_TOTAL_VALUE");

                entity.Property(e => e.ComputeLevel).HasColumnName("COMPUTE_LEVEL");

                entity.Property(e => e.ComputeMethod).HasColumnName("COMPUTE_METHOD");

                entity.Property(e => e.ComputeSeq).HasColumnName("COMPUTE_SEQ");

                entity.Property(e => e.RiskFactor1).HasColumnName("RISK_FACTOR1");

                entity.Property(e => e.RiskFactor2).HasColumnName("RISK_FACTOR2");

                entity.Property(e => e.RiskFactor3).HasColumnName("RISK_FACTOR3");

                entity.Property(e => e.RiskFactor4).HasColumnName("RISK_FACTOR4");

                entity.Property(e => e.RiskFactor5).HasColumnName("RISK_FACTOR5");

                entity.Property(e => e.RiskFactor6).HasColumnName("RISK_FACTOR6");

                entity.Property(e => e.RiskFactor7).HasColumnName("RISK_FACTOR7");

                entity.Property(e => e.RiskFactor8).HasColumnName("RISK_FACTOR8");

                entity.Property(e => e.RiskFactor9).HasColumnName("RISK_FACTOR9");

                entity.Property(e => e.SortFields)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasColumnName("SORT_FIELDS")
                    .HasDefaultValueSql("(N'None')");
            });

            modelBuilder.Entity<Riskrulematrixhdr>(entity =>
            {
                entity.HasKey(e => new { e.CompCode, e.RiskNo });

                entity.ToTable("RISKRULEMATRIXHDR");

                entity.Property(e => e.CompCode)
                    .HasColumnName("COMP_CODE")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.RiskNo)
                    .HasColumnName("RISK_NO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ColCode1).HasColumnName("COL_CODE1");

                entity.Property(e => e.ColCode2).HasColumnName("COL_CODE2");

                entity.Property(e => e.ColCode3).HasColumnName("COL_CODE3");

                entity.Property(e => e.ColCode4).HasColumnName("COL_CODE4");

                entity.Property(e => e.ColCode5).HasColumnName("COL_CODE5");

                entity.Property(e => e.ColCode6).HasColumnName("COL_CODE6");

                entity.Property(e => e.ColCode7).HasColumnName("COL_CODE7");

                entity.Property(e => e.ColCode8).HasColumnName("COL_CODE8");

                entity.Property(e => e.ColCode9).HasColumnName("COL_CODE9");

                entity.Property(e => e.ColDesc)
                    .HasMaxLength(60)
                    .HasColumnName("COL_DESC");

                entity.Property(e => e.ColDesc1)
                    .HasMaxLength(60)
                    .HasColumnName("COL_DESC1");

                entity.Property(e => e.ColDesc2)
                    .HasMaxLength(60)
                    .HasColumnName("COL_DESC2");

                entity.Property(e => e.ColDesc3)
                    .HasMaxLength(60)
                    .HasColumnName("COL_DESC3");

                entity.Property(e => e.ColDesc4)
                    .HasMaxLength(60)
                    .HasColumnName("COL_DESC4");

                entity.Property(e => e.ColDesc5)
                    .HasMaxLength(60)
                    .HasColumnName("COL_DESC5");

                entity.Property(e => e.ColDesc6)
                    .HasMaxLength(60)
                    .HasColumnName("COL_DESC6");

                entity.Property(e => e.ColDesc7)
                    .HasMaxLength(60)
                    .HasColumnName("COL_DESC7");

                entity.Property(e => e.ColDesc8)
                    .HasMaxLength(60)
                    .HasColumnName("COL_DESC8");

                entity.Property(e => e.ColDesc9)
                    .HasMaxLength(60)
                    .HasColumnName("COL_DESC9");

                entity.Property(e => e.ColTotal)
                    .HasMaxLength(60)
                    .HasColumnName("COL_TOTAL");

                entity.Property(e => e.LastUptDt).HasColumnName("LAST_UPT_DT");

                entity.Property(e => e.LastUptTm).HasColumnName("LAST_UPT_TM");

                entity.Property(e => e.NoOfCol)
                    .HasColumnName("NO_OF_COL")
                    .HasDefaultValueSql("((4))");

                entity.Property(e => e.NoOfRow)
                    .HasColumnName("NO_OF_ROW")
                    .HasDefaultValueSql("((4))");

                entity.Property(e => e.RiskDesc)
                    .HasMaxLength(150)
                    .HasColumnName("RISK_DESC")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.RowCode1).HasColumnName("ROW_CODE1");

                entity.Property(e => e.RowCode2).HasColumnName("ROW_CODE2");

                entity.Property(e => e.RowCode3).HasColumnName("ROW_CODE3");

                entity.Property(e => e.RowCode4).HasColumnName("ROW_CODE4");

                entity.Property(e => e.RowCode5).HasColumnName("ROW_CODE5");

                entity.Property(e => e.RowCode6).HasColumnName("ROW_CODE6");

                entity.Property(e => e.RowDesc1)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasColumnName("ROW_DESC1")
                    .HasDefaultValueSql("(N'LOW')");

                entity.Property(e => e.RowDesc2)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasColumnName("ROW_DESC2")
                    .HasDefaultValueSql("(N'MEDIUM')");

                entity.Property(e => e.RowDesc3)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasColumnName("ROW_DESC3")
                    .HasDefaultValueSql("(N'HIGH')");

                entity.Property(e => e.RowDesc4)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasColumnName("ROW_DESC4")
                    .HasDefaultValueSql("(N'EXTREME')");

                entity.Property(e => e.RowDesc5)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasColumnName("ROW_DESC5")
                    .HasDefaultValueSql("(N'KIV')");

                entity.Property(e => e.RowDesc6)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasColumnName("ROW_DESC6")
                    .HasDefaultValueSql("(N'KIV')");

                entity.Property(e => e.RowMaxVal1).HasColumnName("ROW_MAX_VAL1");

                entity.Property(e => e.RowMaxVal2).HasColumnName("ROW_MAX_VAL2");

                entity.Property(e => e.RowMaxVal3).HasColumnName("ROW_MAX_VAL3");

                entity.Property(e => e.RowMaxVal4).HasColumnName("ROW_MAX_VAL4");

                entity.Property(e => e.RowMaxVal5).HasColumnName("ROW_MAX_VAL5");

                entity.Property(e => e.RowMaxVal6).HasColumnName("ROW_MAX_VAL6");

                entity.Property(e => e.RowMinVal1).HasColumnName("ROW_MIN_VAL1");

                entity.Property(e => e.RowMinVal2).HasColumnName("ROW_MIN_VAL2");

                entity.Property(e => e.RowMinVal3).HasColumnName("ROW_MIN_VAL3");

                entity.Property(e => e.RowMinVal4).HasColumnName("ROW_MIN_VAL4");

                entity.Property(e => e.RowMinVal5).HasColumnName("ROW_MIN_VAL5");

                entity.Property(e => e.RowMinVal6).HasColumnName("ROW_MIN_VAL6");

                entity.Property(e => e.RowRvwVal1).HasColumnName("ROW_RVW_VAL1");

                entity.Property(e => e.RowRvwVal2).HasColumnName("ROW_RVW_VAL2");

                entity.Property(e => e.RowRvwVal3).HasColumnName("ROW_RVW_VAL3");

                entity.Property(e => e.RowRvwVal4).HasColumnName("ROW_RVW_VAL4");

                entity.Property(e => e.RowRvwVal5).HasColumnName("ROW_RVW_VAL5");

                entity.Property(e => e.RowRvwVal6).HasColumnName("ROW_RVW_VAL6");
            });

            modelBuilder.Entity<Riskrulemodeldtl>(entity =>
            {
                entity.HasKey(e => new { e.CompCode, e.RiskNo, e.AutoSeqNo });

                entity.ToTable("RISKRULEMODELDTL");

                entity.Property(e => e.CompCode)
                    .HasColumnName("COMP_CODE")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.RiskNo)
                    .HasColumnName("RISK_NO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.AutoSeqNo)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("AUTO_SEQ_NO");

                entity.Property(e => e.DisplayOrder).HasColumnName("DISPLAY_ORDER");

                entity.Property(e => e.GrpLinkScoreFd)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("GRP_LINK_SCORE_FD")
                    .HasDefaultValueSql("(N'')");

                entity.Property(e => e.GrpLinkScoreFdDesc)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("GRP_LINK_SCORE_FD_DESC")
                    .HasDefaultValueSql("(N'')");

                entity.Property(e => e.LinkCodetableNo).HasColumnName("LINK_CODETABLE_NO");

                entity.Property(e => e.MaxScoreValue).HasColumnName("MAX_SCORE_VALUE");

                entity.Property(e => e.MinScoreValue).HasColumnName("MIN_SCORE_VALUE");

                entity.Property(e => e.ModeMn)
                    .IsRequired()
                    .HasMaxLength(1)
                    .HasColumnName("MODE_MN")
                    .HasDefaultValueSql("(N'A')")
                    .HasComment("");

                entity.Property(e => e.RiskItemDesc)
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasColumnName("RISK_ITEM_DESC")
                    .HasDefaultValueSql("(N'ACCOUNT_NO')");

                entity.Property(e => e.StampDttm)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("STAMP_DTTM");

                entity.Property(e => e.Status).HasColumnName("STATUS");

                entity.Property(e => e.TableIdUsed)
                    .HasMaxLength(50)
                    .HasColumnName("TABLE_ID_USED");

                entity.Property(e => e.TableParentId)
                    .HasColumnName("TABLE_PARENT_ID")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.UserId)
                    .HasMaxLength(30)
                    .HasColumnName("USER_ID");
            });

            modelBuilder.Entity<Riskrulemodelhdr>(entity =>
            {
                entity.HasKey(e => new { e.CompCode, e.RiskNo })
                    .HasName("PK_RISKRULEMATRIXHDR2");

                entity.ToTable("RISKRULEMODELHDR");

                entity.Property(e => e.CompCode)
                    .HasColumnName("COMP_CODE")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.RiskNo)
                    .HasColumnName("RISK_NO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.LastUptDt).HasColumnName("LAST_UPT_DT");

                entity.Property(e => e.LastUptTm).HasColumnName("LAST_UPT_TM");

                entity.Property(e => e.NoOfCol)
                    .HasColumnName("NO_OF_COL")
                    .HasDefaultValueSql("((4))");

                entity.Property(e => e.NoOfRow)
                    .HasColumnName("NO_OF_ROW")
                    .HasDefaultValueSql("((4))");

                entity.Property(e => e.RiskDesc)
                    .HasMaxLength(150)
                    .HasColumnName("RISK_DESC")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.RowCode1).HasColumnName("ROW_CODE1");

                entity.Property(e => e.RowCode11).HasColumnName("ROW_CODE11");

                entity.Property(e => e.RowCode2).HasColumnName("ROW_CODE2");

                entity.Property(e => e.RowCode21).HasColumnName("ROW_CODE21");

                entity.Property(e => e.RowCode3).HasColumnName("ROW_CODE3");

                entity.Property(e => e.RowCode31).HasColumnName("ROW_CODE31");

                entity.Property(e => e.RowCode4).HasColumnName("ROW_CODE4");

                entity.Property(e => e.RowCode41).HasColumnName("ROW_CODE41");

                entity.Property(e => e.RowCode5).HasColumnName("ROW_CODE5");

                entity.Property(e => e.RowCode51).HasColumnName("ROW_CODE51");

                entity.Property(e => e.RowCode6).HasColumnName("ROW_CODE6");

                entity.Property(e => e.RowCode61).HasColumnName("ROW_CODE61");

                entity.Property(e => e.RowDesc1)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasColumnName("ROW_DESC1")
                    .HasDefaultValueSql("(N'LOW')");

                entity.Property(e => e.RowDesc2)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasColumnName("ROW_DESC2")
                    .HasDefaultValueSql("(N'MEDIUM')");

                entity.Property(e => e.RowDesc3)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasColumnName("ROW_DESC3")
                    .HasDefaultValueSql("(N'HIGH')");

                entity.Property(e => e.RowDesc4)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasColumnName("ROW_DESC4")
                    .HasDefaultValueSql("(N'EXTREME')");

                entity.Property(e => e.RowDesc5)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasColumnName("ROW_DESC5")
                    .HasDefaultValueSql("(N'KIV')");

                entity.Property(e => e.RowDesc6)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasColumnName("ROW_DESC6")
                    .HasDefaultValueSql("(N'KIV')");

                entity.Property(e => e.RowMaxVal1).HasColumnName("ROW_MAX_VAL1");

                entity.Property(e => e.RowMaxVal11).HasColumnName("ROW_MAX_VAL11");

                entity.Property(e => e.RowMaxVal2).HasColumnName("ROW_MAX_VAL2");

                entity.Property(e => e.RowMaxVal21).HasColumnName("ROW_MAX_VAL21");

                entity.Property(e => e.RowMaxVal3).HasColumnName("ROW_MAX_VAL3");

                entity.Property(e => e.RowMaxVal31).HasColumnName("ROW_MAX_VAL31");

                entity.Property(e => e.RowMaxVal4).HasColumnName("ROW_MAX_VAL4");

                entity.Property(e => e.RowMaxVal41).HasColumnName("ROW_MAX_VAL41");

                entity.Property(e => e.RowMaxVal5).HasColumnName("ROW_MAX_VAL5");

                entity.Property(e => e.RowMaxVal51).HasColumnName("ROW_MAX_VAL51");

                entity.Property(e => e.RowMaxVal6).HasColumnName("ROW_MAX_VAL6");

                entity.Property(e => e.RowMaxVal61).HasColumnName("ROW_MAX_VAL61");

                entity.Property(e => e.RowMinVal1).HasColumnName("ROW_MIN_VAL1");

                entity.Property(e => e.RowMinVal11).HasColumnName("ROW_MIN_VAL11");

                entity.Property(e => e.RowMinVal2).HasColumnName("ROW_MIN_VAL2");

                entity.Property(e => e.RowMinVal21).HasColumnName("ROW_MIN_VAL21");

                entity.Property(e => e.RowMinVal3).HasColumnName("ROW_MIN_VAL3");

                entity.Property(e => e.RowMinVal31).HasColumnName("ROW_MIN_VAL31");

                entity.Property(e => e.RowMinVal4).HasColumnName("ROW_MIN_VAL4");

                entity.Property(e => e.RowMinVal41).HasColumnName("ROW_MIN_VAL41");

                entity.Property(e => e.RowMinVal5).HasColumnName("ROW_MIN_VAL5");

                entity.Property(e => e.RowMinVal51).HasColumnName("ROW_MIN_VAL51");

                entity.Property(e => e.RowMinVal6).HasColumnName("ROW_MIN_VAL6");

                entity.Property(e => e.RowMinVal61).HasColumnName("ROW_MIN_VAL61");

                entity.Property(e => e.RowRvwVal1).HasColumnName("ROW_RVW_VAL1");

                entity.Property(e => e.RowRvwVal2).HasColumnName("ROW_RVW_VAL2");

                entity.Property(e => e.RowRvwVal3).HasColumnName("ROW_RVW_VAL3");

                entity.Property(e => e.RowRvwVal4).HasColumnName("ROW_RVW_VAL4");

                entity.Property(e => e.RowRvwVal5).HasColumnName("ROW_RVW_VAL5");

                entity.Property(e => e.RowRvwVal6).HasColumnName("ROW_RVW_VAL6");
            });

            modelBuilder.Entity<RptCtrDtl>(entity =>
            {
                entity.HasKey(e => new { e.CodeComp, e.CodeOrg, e.CtrSeq });

                entity.ToTable("RPT_CTR_DTL");

                entity.Property(e => e.CodeComp)
                    .HasColumnName("CODE_COMP")
                    .HasComment("Company Code");

                entity.Property(e => e.CodeOrg)
                    .HasColumnName("CODE_ORG")
                    .HasComment("Organization Code");

                entity.Property(e => e.CtrSeq)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("CTR_SEQ")
                    .HasComment("History sequence for selected NO_CIF");

                entity.Property(e => e.AuditCreatedDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("AUDIT_CREATED_DATE");

                entity.Property(e => e.AuditCreatedUser)
                    .HasMaxLength(150)
                    .HasColumnName("AUDIT_CREATED_USER");

                entity.Property(e => e.AuditUpdatedDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("AUDIT_UPDATED_DATE");

                entity.Property(e => e.AuditUpdatedUser)
                    .HasMaxLength(150)
                    .HasColumnName("AUDIT_UPDATED_USER");

                entity.Property(e => e.AuditUserLevel).HasColumnName("AUDIT_USER_LEVEL");

                entity.Property(e => e.CtrCategory).HasColumnName("CTR_CATEGORY");

                entity.Property(e => e.CtrHdrSeq)
                    .HasColumnName("CTR_HDR_SEQ")
                    .HasDefaultValueSql("((1))")
                    .HasComment("Sequence to tag CTR between DTL and HDR");

                entity.Property(e => e.CtrHistQuest)
                    .HasColumnName("CTR_HIST_QUEST")
                    .HasDefaultValueSql("((1))")
                    .HasComment("History question being used during submission CTR");

                entity.Property(e => e.NoCif)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("NO_CIF")
                    .HasComment("No CIF");

                entity.Property(e => e.NoMaster)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("NO_MASTER")
                    .HasComment("No Master");

                entity.Property(e => e.ReportId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("REPORT_ID")
                    .HasComment("Template CTR used from PARAM_CTR");

                entity.Property(e => e.RptSetSeq).HasColumnName("RPT_SET_SEQ");

                entity.Property(e => e.Tfield001)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD001");

                entity.Property(e => e.Tfield002)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD002");

                entity.Property(e => e.Tfield003)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD003");

                entity.Property(e => e.Tfield004)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD004");

                entity.Property(e => e.Tfield005)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD005");

                entity.Property(e => e.Tfield006)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD006");

                entity.Property(e => e.Tfield007)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD007");

                entity.Property(e => e.Tfield008)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD008");

                entity.Property(e => e.Tfield009)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD009");

                entity.Property(e => e.Tfield010)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD010");

                entity.Property(e => e.Tfield011)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD011");

                entity.Property(e => e.Tfield012)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD012");

                entity.Property(e => e.Tfield013)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD013");

                entity.Property(e => e.Tfield014)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD014");

                entity.Property(e => e.Tfield015)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD015");

                entity.Property(e => e.Tfield016)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD016");

                entity.Property(e => e.Tfield017)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD017");

                entity.Property(e => e.Tfield018)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD018");

                entity.Property(e => e.Tfield019)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD019");

                entity.Property(e => e.Tfield020)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD020");

                entity.Property(e => e.Tfield021)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD021");

                entity.Property(e => e.Tfield022)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD022");

                entity.Property(e => e.Tfield023)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD023");

                entity.Property(e => e.Tfield024)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD024");

                entity.Property(e => e.Tfield025)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD025");

                entity.Property(e => e.Tfield026)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD026");

                entity.Property(e => e.Tfield027)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD027");

                entity.Property(e => e.Tfield028)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD028");

                entity.Property(e => e.Tfield029)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD029");

                entity.Property(e => e.Tfield030)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD030");

                entity.Property(e => e.Tfield031)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD031");

                entity.Property(e => e.Tfield032)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD032");

                entity.Property(e => e.Tfield033)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD033");

                entity.Property(e => e.Tfield034)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD034");

                entity.Property(e => e.Tfield035)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD035");

                entity.Property(e => e.Tfield036)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD036");

                entity.Property(e => e.Tfield037)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD037");

                entity.Property(e => e.Tfield038)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD038");

                entity.Property(e => e.Tfield039)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD039");

                entity.Property(e => e.Tfield040)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD040");

                entity.Property(e => e.Tfield041)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD041");

                entity.Property(e => e.Tfield042)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD042");

                entity.Property(e => e.Tfield043)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD043");

                entity.Property(e => e.Tfield044)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD044");

                entity.Property(e => e.Tfield045)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD045");

                entity.Property(e => e.Tfield046)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD046");

                entity.Property(e => e.Tfield047)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD047");

                entity.Property(e => e.Tfield048)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD048");

                entity.Property(e => e.Tfield049)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD049");

                entity.Property(e => e.Tfield050)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD050");

                entity.Property(e => e.Tfield051)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD051");

                entity.Property(e => e.Tfield052)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD052");

                entity.Property(e => e.Tfield053)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD053");

                entity.Property(e => e.Tfield054)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD054");

                entity.Property(e => e.Tfield055)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD055");

                entity.Property(e => e.Tfield056)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD056");

                entity.Property(e => e.Tfield057)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD057");

                entity.Property(e => e.Tfield058)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD058");

                entity.Property(e => e.Tfield059)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD059");

                entity.Property(e => e.Tfield060)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD060");

                entity.Property(e => e.Tfield061)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD061");

                entity.Property(e => e.Tfield062)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD062");

                entity.Property(e => e.Tfield063)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD063");

                entity.Property(e => e.Tfield064)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD064");

                entity.Property(e => e.Tfield065)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD065");

                entity.Property(e => e.Tfield066)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD066");

                entity.Property(e => e.Tfield067)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD067");

                entity.Property(e => e.Tfield068)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD068");

                entity.Property(e => e.Tfield069)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD069");

                entity.Property(e => e.Tfield070)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD070");

                entity.Property(e => e.Tfield071)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD071");

                entity.Property(e => e.Tfield072)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD072");

                entity.Property(e => e.Tfield073)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD073");

                entity.Property(e => e.Tfield074)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD074");

                entity.Property(e => e.Tfield075)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD075");

                entity.Property(e => e.Tfield076)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD076");

                entity.Property(e => e.Tfield077)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD077");

                entity.Property(e => e.Tfield078)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD078");

                entity.Property(e => e.Tfield079)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD079");

                entity.Property(e => e.Tfield080)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD080");

                entity.Property(e => e.Tfield081)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD081");

                entity.Property(e => e.Tfield082)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD082");

                entity.Property(e => e.Tfield083)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD083");

                entity.Property(e => e.Tfield084)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD084");

                entity.Property(e => e.Tfield085)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD085");

                entity.Property(e => e.Tfield086)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD086");

                entity.Property(e => e.Tfield087)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD087");

                entity.Property(e => e.Tfield088)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD088");

                entity.Property(e => e.Tfield089)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD089");

                entity.Property(e => e.Tfield090)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD090");

                entity.Property(e => e.Tfield091)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD091");

                entity.Property(e => e.Tfield092)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD092");

                entity.Property(e => e.Tfield093)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD093");

                entity.Property(e => e.Tfield094)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD094");

                entity.Property(e => e.Tfield095)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD095");

                entity.Property(e => e.Tfield096)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD096");

                entity.Property(e => e.Tfield097)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD097");

                entity.Property(e => e.Tfield098)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD098");

                entity.Property(e => e.Tfield099)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD099");

                entity.Property(e => e.Tfield100)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD100");
            });

            modelBuilder.Entity<RptCtrHdr>(entity =>
            {
                entity.HasKey(e => new { e.CodeComp, e.CodeOrg, e.NoMaster, e.NoCif, e.CtrHdrSeq, e.CaseId })
                    .HasName("Idx_RPT_CTR_HDR");

                entity.ToTable("RPT_CTR_HDR");

                entity.HasIndex(e => new { e.CodeComp, e.CodeOrg, e.CtrHdrSeq }, "Unq_RPT_CTR_HDR_CODE_COMP")
                    .IsUnique();

                entity.Property(e => e.CodeComp)
                    .HasColumnName("CODE_COMP")
                    .HasDefaultValueSql("((1))")
                    .HasComment("Company COde");

                entity.Property(e => e.CodeOrg)
                    .HasColumnName("CODE_ORG")
                    .HasDefaultValueSql("((1))")
                    .HasComment("Organization Code");

                entity.Property(e => e.NoMaster)
                    .HasMaxLength(50)
                    .HasColumnName("NO_MASTER")
                    .HasDefaultValueSql("((1))")
                    .HasComment("Customer no master");

                entity.Property(e => e.NoCif)
                    .HasMaxLength(50)
                    .HasColumnName("NO_CIF")
                    .HasDefaultValueSql("((1))")
                    .HasComment("Customer  no CIF");

                entity.Property(e => e.CtrHdrSeq)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("CTR_HDR_SEQ")
                    .HasComment("Sequence header for each reported CTR under 1 customer");

                entity.Property(e => e.CaseId).HasColumnName("CASE_ID");

                entity.Property(e => e.AuditCreatedDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("AUDIT_CREATED_DATE")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.AuditCreatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_CREATED_USER");

                entity.Property(e => e.AuditUpdatedDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("AUDIT_UPDATED_DATE")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date record updated");

                entity.Property(e => e.AuditUpdatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_UPDATED_USER")
                    .HasComment("USer ID who perform updation process");

                entity.Property(e => e.AuditUserLevel)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_USER_LEVEL")
                    .HasComment("User level who performed CTR creation/edition");

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("COUNTRY")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ExportDate)
                    .HasColumnType("datetime")
                    .HasColumnName("EXPORT_DATE")
                    .HasComment("CTR Date Exported");

                entity.Property(e => e.ExtractDate)
                    .HasColumnType("datetime")
                    .HasColumnName("EXTRACT_DATE")
                    .HasComment("CTR Date Extracted");

                entity.Property(e => e.PartType)
                    .HasColumnName("PART_TYPE")
                    .HasComment("Participant Type");

                entity.Property(e => e.ReportId)
                    .HasMaxLength(50)
                    .HasColumnName("REPORT_ID")
                    .HasComment("CTR ID taken from param_mapping_hdr");

                entity.Property(e => e.ReportIdentifier)
                    .HasMaxLength(50)
                    .HasColumnName("REPORT_IDENTIFIER");

                entity.Property(e => e.TranAmount).HasColumnName("TRAN_AMOUNT");

                entity.Property(e => e.TranCur)
                    .HasMaxLength(50)
                    .HasColumnName("TRAN_CUR")
                    .HasComment("Transaction Currency");

                entity.Property(e => e.TranDate)
                    .HasColumnName("TRAN_DATE")
                    .HasComment("Transaction Date");
            });

            modelBuilder.Entity<RptExtract>(entity =>
            {
                entity.HasKey(e => new { e.CodeComp, e.CodeOrg, e.ExtractionId });

                entity.ToTable("RPT_EXTRACT");

                entity.Property(e => e.CodeComp)
                    .HasColumnName("CODE_COMP")
                    .HasDefaultValueSql("((1))")
                    .HasComment("Company COde");

                entity.Property(e => e.CodeOrg)
                    .HasColumnName("CODE_ORG")
                    .HasDefaultValueSql("((1))")
                    .HasComment("Organization Code");

                entity.Property(e => e.ExtractionId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("EXTRACTION_ID");

                entity.Property(e => e.AuditCreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("AUDIT_CREATED_DATE")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the record being created");

                entity.Property(e => e.AuditCreatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_CREATED_USER")
                    .HasComment("User created the record");

                entity.Property(e => e.AuditUpdatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("AUDIT_UPDATED_DATE")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the record being updated");

                entity.Property(e => e.AuditUpdatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_UPDATED_USER")
                    .HasComment("user who modify the record");

                entity.Property(e => e.ExtractStatus).HasColumnName("EXTRACT_STATUS");

                entity.Property(e => e.ExtractedBy)
                    .HasMaxLength(50)
                    .HasColumnName("EXTRACTED_BY");

                entity.Property(e => e.ExtractedFile).HasColumnName("EXTRACTED_FILE");

                entity.Property(e => e.ExtractedRec)
                    .HasMaxLength(500)
                    .HasColumnName("EXTRACTED_REC");

                entity.Property(e => e.FileName)
                    .HasMaxLength(50)
                    .HasColumnName("FILE_NAME");

                entity.Property(e => e.FileType)
                    .HasMaxLength(10)
                    .HasColumnName("FILE_TYPE");

                entity.Property(e => e.OutputType)
                    .HasMaxLength(10)
                    .HasColumnName("OUTPUT_TYPE");

                entity.Property(e => e.RangeFrom)
                    .HasMaxLength(20)
                    .HasColumnName("RANGE_FROM");

                entity.Property(e => e.RangeTo)
                    .HasMaxLength(20)
                    .HasColumnName("RANGE_TO");

                entity.Property(e => e.RangeType)
                    .HasColumnName("RANGE_TYPE")
                    .HasComment("1 - Case ID (from and to) // 2 - Txn Date (from and to)");

                entity.Property(e => e.ReportCountry)
                    .HasColumnName("REPORT_COUNTRY")
                    .HasComment("Transaction Report Country (7004001 CodePrime)");

                entity.Property(e => e.ReportStatus).HasColumnName("REPORT_STATUS");

                entity.Property(e => e.ReportType)
                    .HasMaxLength(15)
                    .HasColumnName("REPORT_TYPE");
            });

            modelBuilder.Entity<RptExtractFile>(entity =>
            {
                entity.HasKey(e => new { e.CodeComp, e.CodeOrg, e.ExtractionId, e.SeqNo });

                entity.ToTable("RPT_EXTRACT_FILE");

                entity.Property(e => e.CodeComp).HasColumnName("CODE_COMP");

                entity.Property(e => e.CodeOrg).HasColumnName("CODE_ORG");

                entity.Property(e => e.ExtractionId).HasColumnName("EXTRACTION_ID");

                entity.Property(e => e.SeqNo)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("SEQ_NO");

                entity.Property(e => e.AuditCreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("AUDIT_CREATED_DATE")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the record being created");

                entity.Property(e => e.AuditCreatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_CREATED_USER")
                    .HasComment("User created the record");

                entity.Property(e => e.AuditUpdatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("AUDIT_UPDATED_DATE")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the record being updated");

                entity.Property(e => e.AuditUpdatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_UPDATED_USER")
                    .HasComment("user who modify the record");

                entity.Property(e => e.ExtractedFile).HasColumnName("EXTRACTED_FILE");
            });

            modelBuilder.Entity<RptStr>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("RPT_STR");

                entity.Property(e => e.AuditCreatedDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("AUDIT_CREATED_DATE");

                entity.Property(e => e.AuditCreatedUser)
                    .HasMaxLength(150)
                    .HasColumnName("AUDIT_CREATED_USER");

                entity.Property(e => e.AuditUpdatedDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("AUDIT_UPDATED_DATE");

                entity.Property(e => e.AuditUpdatedUser)
                    .HasMaxLength(150)
                    .HasColumnName("AUDIT_UPDATED_USER");

                entity.Property(e => e.AuditUserLevel).HasColumnName("AUDIT_USER_LEVEL");

                entity.Property(e => e.CodeComp)
                    .HasColumnName("CODE_COMP")
                    .HasComment("Company Code");

                entity.Property(e => e.CodeOrg)
                    .HasColumnName("CODE_ORG")
                    .HasComment("Organization Code");

                entity.Property(e => e.NoCif)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("NO_CIF")
                    .HasComment("No CIF");

                entity.Property(e => e.NoMaster)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("NO_MASTER")
                    .HasComment("No Master");

                entity.Property(e => e.StrHist)
                    .HasColumnName("STR_HIST")
                    .HasDefaultValueSql("((1))")
                    .HasComment("History sequence for selected NO_CIF");

                entity.Property(e => e.StrId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("STR_ID")
                    .HasComment("Template STR used from PARAM_STR");

                entity.Property(e => e.StrSeq)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("STR_SEQ")
                    .HasComment("History sequence for selected NO_CIF");

                entity.Property(e => e.Tfield001)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD001");

                entity.Property(e => e.Tfield002)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD002");

                entity.Property(e => e.Tfield003)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD003");

                entity.Property(e => e.Tfield004)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD004");

                entity.Property(e => e.Tfield005)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD005");

                entity.Property(e => e.Tfield006)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD006");

                entity.Property(e => e.Tfield007)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD007");

                entity.Property(e => e.Tfield008)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD008");

                entity.Property(e => e.Tfield009)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD009");

                entity.Property(e => e.Tfield010)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD010");

                entity.Property(e => e.Tfield011)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD011");

                entity.Property(e => e.Tfield012)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD012");

                entity.Property(e => e.Tfield013)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD013");

                entity.Property(e => e.Tfield014)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD014");

                entity.Property(e => e.Tfield015)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD015");

                entity.Property(e => e.Tfield016)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD016");

                entity.Property(e => e.Tfield017)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD017");

                entity.Property(e => e.Tfield018)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD018");

                entity.Property(e => e.Tfield019)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD019");

                entity.Property(e => e.Tfield020)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD020");

                entity.Property(e => e.Tfield021)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD021");

                entity.Property(e => e.Tfield022)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD022");

                entity.Property(e => e.Tfield023)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD023");

                entity.Property(e => e.Tfield024)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD024");

                entity.Property(e => e.Tfield025)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD025");

                entity.Property(e => e.Tfield026)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD026");

                entity.Property(e => e.Tfield027)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD027");

                entity.Property(e => e.Tfield028)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD028");

                entity.Property(e => e.Tfield029)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD029");

                entity.Property(e => e.Tfield030)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD030");

                entity.Property(e => e.Tfield031)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD031");

                entity.Property(e => e.Tfield032)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD032");

                entity.Property(e => e.Tfield033)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD033");

                entity.Property(e => e.Tfield034)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD034");

                entity.Property(e => e.Tfield035)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD035");

                entity.Property(e => e.Tfield036)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD036");

                entity.Property(e => e.Tfield037)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD037");

                entity.Property(e => e.Tfield038)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD038");

                entity.Property(e => e.Tfield039)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD039");

                entity.Property(e => e.Tfield040)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD040");

                entity.Property(e => e.Tfield041)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD041");

                entity.Property(e => e.Tfield042)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD042");

                entity.Property(e => e.Tfield043)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD043");

                entity.Property(e => e.Tfield044)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD044");

                entity.Property(e => e.Tfield045)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD045");

                entity.Property(e => e.Tfield046)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD046");

                entity.Property(e => e.Tfield047)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD047");

                entity.Property(e => e.Tfield048)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD048");

                entity.Property(e => e.Tfield049)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD049");

                entity.Property(e => e.Tfield050)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD050");

                entity.Property(e => e.Tfield051)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD051");

                entity.Property(e => e.Tfield052)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD052");

                entity.Property(e => e.Tfield053)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD053");

                entity.Property(e => e.Tfield054)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD054");

                entity.Property(e => e.Tfield055)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD055");

                entity.Property(e => e.Tfield056)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD056");

                entity.Property(e => e.Tfield057)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD057");

                entity.Property(e => e.Tfield058)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD058");

                entity.Property(e => e.Tfield059)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD059");

                entity.Property(e => e.Tfield060)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD060");

                entity.Property(e => e.Tfield061)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD061");

                entity.Property(e => e.Tfield062)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD062");

                entity.Property(e => e.Tfield063)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD063");

                entity.Property(e => e.Tfield064)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD064");

                entity.Property(e => e.Tfield065)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD065");

                entity.Property(e => e.Tfield066)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD066");

                entity.Property(e => e.Tfield067)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD067");

                entity.Property(e => e.Tfield068)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD068");

                entity.Property(e => e.Tfield069)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD069");

                entity.Property(e => e.Tfield070)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD070");

                entity.Property(e => e.Tfield071)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD071");

                entity.Property(e => e.Tfield072)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD072");

                entity.Property(e => e.Tfield073)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD073");

                entity.Property(e => e.Tfield074)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD074");

                entity.Property(e => e.Tfield075)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD075");

                entity.Property(e => e.Tfield076)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD076");

                entity.Property(e => e.Tfield077)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD077");

                entity.Property(e => e.Tfield078)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD078");

                entity.Property(e => e.Tfield079)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD079");

                entity.Property(e => e.Tfield080)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD080");

                entity.Property(e => e.Tfield081)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD081");

                entity.Property(e => e.Tfield082)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD082");

                entity.Property(e => e.Tfield083)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD083");

                entity.Property(e => e.Tfield084)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD084");

                entity.Property(e => e.Tfield085)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD085");

                entity.Property(e => e.Tfield086)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD086");

                entity.Property(e => e.Tfield087)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD087");

                entity.Property(e => e.Tfield088)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD088");

                entity.Property(e => e.Tfield089)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD089");

                entity.Property(e => e.Tfield090)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD090");

                entity.Property(e => e.Tfield091)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD091");

                entity.Property(e => e.Tfield092)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD092");

                entity.Property(e => e.Tfield093)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD093");

                entity.Property(e => e.Tfield094)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD094");

                entity.Property(e => e.Tfield095)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD095");

                entity.Property(e => e.Tfield096)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD096");

                entity.Property(e => e.Tfield097)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD097");

                entity.Property(e => e.Tfield098)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD098");

                entity.Property(e => e.Tfield099)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD099");

                entity.Property(e => e.Tfield100)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD100");

                entity.Property(e => e.Tfield101)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD101");

                entity.Property(e => e.Tfield102)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD102");

                entity.Property(e => e.Tfield103)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD103");

                entity.Property(e => e.Tfield104)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD104");

                entity.Property(e => e.Tfield105)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD105");

                entity.Property(e => e.Tfield106)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD106");

                entity.Property(e => e.Tfield107)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD107");

                entity.Property(e => e.Tfield108)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD108");

                entity.Property(e => e.Tfield109)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD109");

                entity.Property(e => e.Tfield110)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD110");

                entity.Property(e => e.Tfield111)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD111");

                entity.Property(e => e.Tfield112)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD112");

                entity.Property(e => e.Tfield113)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD113");

                entity.Property(e => e.Tfield114)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD114");

                entity.Property(e => e.Tfield115)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD115");

                entity.Property(e => e.Tfield116)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD116");

                entity.Property(e => e.Tfield117)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD117");

                entity.Property(e => e.Tfield118)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD118");

                entity.Property(e => e.Tfield119)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD119");

                entity.Property(e => e.Tfield120)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD120");
            });

            modelBuilder.Entity<RptStrAttach>(entity =>
            {
                entity.HasKey(e => new { e.CodeComp, e.CodeOrg, e.StrHdrSeq, e.FileId })
                    .HasName("PK_RPT_STR_ATTACH_1");

                entity.ToTable("RPT_STR_ATTACH");

                entity.Property(e => e.CodeComp)
                    .HasColumnName("CODE_COMP")
                    .HasComment("Company Code");

                entity.Property(e => e.CodeOrg)
                    .HasColumnName("CODE_ORG")
                    .HasComment("Organization Code");

                entity.Property(e => e.StrHdrSeq)
                    .HasColumnName("STR_HDR_SEQ")
                    .HasDefaultValueSql("((1))")
                    .HasComment("Sequence to tag STR between DTL and HDR");

                entity.Property(e => e.FileId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("FILE_ID");

                entity.Property(e => e.AuditCreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("AUDIT_CREATED_DATE")
                    .HasComment("Date time attachment being executed");

                entity.Property(e => e.AuditCreatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_CREATED_USER")
                    .HasComment("User ID of staff performed activity");

                entity.Property(e => e.FileBase64).HasColumnName("FILE_BASE64");

                entity.Property(e => e.FileEncode).HasColumnName("FILE_ENCODE");

                entity.Property(e => e.FileName)
                    .HasMaxLength(50)
                    .HasColumnName("FILE_NAME");

                entity.Property(e => e.FilePath)
                    .HasMaxLength(200)
                    .HasColumnName("FILE_PATH");

                entity.Property(e => e.FileType)
                    .HasMaxLength(50)
                    .HasColumnName("FILE_TYPE");
            });

            modelBuilder.Entity<RptStrDtl>(entity =>
            {
                entity.HasKey(e => new { e.CodeComp, e.CodeOrg, e.StrSeq });

                entity.ToTable("RPT_STR_DTL");

                entity.Property(e => e.CodeComp)
                    .HasColumnName("CODE_COMP")
                    .HasComment("Company Code");

                entity.Property(e => e.CodeOrg)
                    .HasColumnName("CODE_ORG")
                    .HasComment("Organization Code");

                entity.Property(e => e.StrSeq)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("STR_SEQ")
                    .HasComment("History sequence for selected NO_CIF");

                entity.Property(e => e.AuditCreatedDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("AUDIT_CREATED_DATE");

                entity.Property(e => e.AuditCreatedUser)
                    .HasMaxLength(150)
                    .HasColumnName("AUDIT_CREATED_USER");

                entity.Property(e => e.AuditUpdatedDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("AUDIT_UPDATED_DATE");

                entity.Property(e => e.AuditUpdatedUser)
                    .HasMaxLength(150)
                    .HasColumnName("AUDIT_UPDATED_USER");

                entity.Property(e => e.AuditUserLevel).HasColumnName("AUDIT_USER_LEVEL");

                entity.Property(e => e.NoCif)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("NO_CIF")
                    .HasComment("No CIF");

                entity.Property(e => e.NoMaster)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("NO_MASTER")
                    .HasComment("No Master");

                entity.Property(e => e.ReportId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("REPORT_ID")
                    .HasComment("Template STR used from PARAM_STR");

                entity.Property(e => e.StrCategory).HasColumnName("STR_CATEGORY");

                entity.Property(e => e.StrHdrSeq)
                    .HasColumnName("STR_HDR_SEQ")
                    .HasDefaultValueSql("((1))")
                    .HasComment("Sequence to tag STR between DTL and HDR");

                entity.Property(e => e.StrHistQuest)
                    .HasColumnName("STR_HIST_QUEST")
                    .HasDefaultValueSql("((1))")
                    .HasComment("History question being used during submission STR");

                entity.Property(e => e.Tfield001)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD001");

                entity.Property(e => e.Tfield002)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD002");

                entity.Property(e => e.Tfield003)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD003");

                entity.Property(e => e.Tfield004)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD004");

                entity.Property(e => e.Tfield005)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD005");

                entity.Property(e => e.Tfield006)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD006");

                entity.Property(e => e.Tfield007)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD007");

                entity.Property(e => e.Tfield008)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD008");

                entity.Property(e => e.Tfield009)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD009");

                entity.Property(e => e.Tfield010)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD010");

                entity.Property(e => e.Tfield011)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD011");

                entity.Property(e => e.Tfield012)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD012");

                entity.Property(e => e.Tfield013)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD013");

                entity.Property(e => e.Tfield014)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD014");

                entity.Property(e => e.Tfield015)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD015");

                entity.Property(e => e.Tfield016)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD016");

                entity.Property(e => e.Tfield017)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD017");

                entity.Property(e => e.Tfield018)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD018");

                entity.Property(e => e.Tfield019)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD019");

                entity.Property(e => e.Tfield020)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD020");

                entity.Property(e => e.Tfield021)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD021");

                entity.Property(e => e.Tfield022)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD022");

                entity.Property(e => e.Tfield023)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD023");

                entity.Property(e => e.Tfield024)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD024");

                entity.Property(e => e.Tfield025)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD025");

                entity.Property(e => e.Tfield026)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD026");

                entity.Property(e => e.Tfield027)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD027");

                entity.Property(e => e.Tfield028)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD028");

                entity.Property(e => e.Tfield029)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD029");

                entity.Property(e => e.Tfield030)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD030");

                entity.Property(e => e.Tfield031)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD031");

                entity.Property(e => e.Tfield032)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD032");

                entity.Property(e => e.Tfield033)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD033");

                entity.Property(e => e.Tfield034)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD034");

                entity.Property(e => e.Tfield035)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD035");

                entity.Property(e => e.Tfield036)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD036");

                entity.Property(e => e.Tfield037)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD037");

                entity.Property(e => e.Tfield038)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD038");

                entity.Property(e => e.Tfield039)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD039");

                entity.Property(e => e.Tfield040)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD040");

                entity.Property(e => e.Tfield041)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD041");

                entity.Property(e => e.Tfield042)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD042");

                entity.Property(e => e.Tfield043)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD043");

                entity.Property(e => e.Tfield044)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD044");

                entity.Property(e => e.Tfield045)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD045");

                entity.Property(e => e.Tfield046)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD046");

                entity.Property(e => e.Tfield047)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD047");

                entity.Property(e => e.Tfield048)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD048");

                entity.Property(e => e.Tfield049)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD049");

                entity.Property(e => e.Tfield050)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD050");

                entity.Property(e => e.Tfield051)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD051");

                entity.Property(e => e.Tfield052)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD052");

                entity.Property(e => e.Tfield053)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD053");

                entity.Property(e => e.Tfield054)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD054");

                entity.Property(e => e.Tfield055)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD055");

                entity.Property(e => e.Tfield056)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD056");

                entity.Property(e => e.Tfield057)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD057");

                entity.Property(e => e.Tfield058)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD058");

                entity.Property(e => e.Tfield059)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD059");

                entity.Property(e => e.Tfield060)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD060");

                entity.Property(e => e.Tfield061)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD061");

                entity.Property(e => e.Tfield062)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD062");

                entity.Property(e => e.Tfield063)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD063");

                entity.Property(e => e.Tfield064)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD064");

                entity.Property(e => e.Tfield065)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD065");

                entity.Property(e => e.Tfield066)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD066");

                entity.Property(e => e.Tfield067)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD067");

                entity.Property(e => e.Tfield068)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD068");

                entity.Property(e => e.Tfield069)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD069");

                entity.Property(e => e.Tfield070)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD070");

                entity.Property(e => e.Tfield071)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD071");

                entity.Property(e => e.Tfield072)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD072");

                entity.Property(e => e.Tfield073)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD073");

                entity.Property(e => e.Tfield074)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD074");

                entity.Property(e => e.Tfield075)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD075");

                entity.Property(e => e.Tfield076)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD076");

                entity.Property(e => e.Tfield077)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD077");

                entity.Property(e => e.Tfield078)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD078");

                entity.Property(e => e.Tfield079)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD079");

                entity.Property(e => e.Tfield080)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD080");

                entity.Property(e => e.Tfield081)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD081");

                entity.Property(e => e.Tfield082)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD082");

                entity.Property(e => e.Tfield083)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD083");

                entity.Property(e => e.Tfield084)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD084");

                entity.Property(e => e.Tfield085)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD085");

                entity.Property(e => e.Tfield086)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD086");

                entity.Property(e => e.Tfield087)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD087");

                entity.Property(e => e.Tfield088)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD088");

                entity.Property(e => e.Tfield089)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD089");

                entity.Property(e => e.Tfield090)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD090");

                entity.Property(e => e.Tfield091)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD091");

                entity.Property(e => e.Tfield092)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD092");

                entity.Property(e => e.Tfield093)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD093");

                entity.Property(e => e.Tfield094)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD094");

                entity.Property(e => e.Tfield095)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD095");

                entity.Property(e => e.Tfield096)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD096");

                entity.Property(e => e.Tfield097)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD097");

                entity.Property(e => e.Tfield098)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD098");

                entity.Property(e => e.Tfield099)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD099");

                entity.Property(e => e.Tfield100)
                    .HasMaxLength(150)
                    .HasColumnName("TFIELD100");
            });

            modelBuilder.Entity<RptStrHdr>(entity =>
            {
                entity.HasKey(e => new { e.CodeComp, e.CodeOrg, e.NoMaster, e.NoCif, e.StrHdrSeq, e.CaseId })
                    .HasName("Idx_RPT_STR_HDR");

                entity.ToTable("RPT_STR_HDR");

                entity.HasIndex(e => new { e.CodeComp, e.CodeOrg, e.StrHdrSeq }, "Unq_RPT_STR_HDR_CODE_COMP")
                    .IsUnique();

                entity.Property(e => e.CodeComp)
                    .HasColumnName("CODE_COMP")
                    .HasDefaultValueSql("((1))")
                    .HasComment("Company COde");

                entity.Property(e => e.CodeOrg)
                    .HasColumnName("CODE_ORG")
                    .HasDefaultValueSql("((1))")
                    .HasComment("Organization Code");

                entity.Property(e => e.NoMaster)
                    .HasMaxLength(50)
                    .HasColumnName("NO_MASTER")
                    .HasDefaultValueSql("((1))")
                    .HasComment("Customer no master");

                entity.Property(e => e.NoCif)
                    .HasMaxLength(50)
                    .HasColumnName("NO_CIF")
                    .HasDefaultValueSql("((1))")
                    .HasComment("Customer  no CIF");

                entity.Property(e => e.StrHdrSeq)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("STR_HDR_SEQ")
                    .HasComment("Sequence header for each reported STR under 1 customer");

                entity.Property(e => e.CaseId).HasColumnName("CASE_ID");

                entity.Property(e => e.AuditCreatedDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("AUDIT_CREATED_DATE")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.AuditCreatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_CREATED_USER");

                entity.Property(e => e.AuditUpdatedDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("AUDIT_UPDATED_DATE")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date record updated");

                entity.Property(e => e.AuditUpdatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_UPDATED_USER")
                    .HasComment("USer ID who perform updation process");

                entity.Property(e => e.AuditUserLevel)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_USER_LEVEL")
                    .HasComment("User level who performed STR creation/edition");

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("COUNTRY")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PartType)
                    .HasColumnName("PART_TYPE")
                    .HasDefaultValueSql("((0))")
                    .HasComment("Participant Type 1 for individual 2 for organization");

                entity.Property(e => e.ReportId)
                    .HasMaxLength(50)
                    .HasColumnName("REPORT_ID")
                    .HasComment("STR ID taken from param_mapping_hdr");

                entity.Property(e => e.StrStatus)
                    .HasColumnName("STR_STATUS")
                    .HasDefaultValueSql("((1))")
                    .HasComment("1(Draft) 2(Final)");

                entity.Property(e => e.TranDate)
                    .HasColumnName("TRAN_DATE")
                    .HasDefaultValueSql("((19000101))")
                    .HasComment("Transaction Date");
            });

            modelBuilder.Entity<RuleRpFilter>(entity =>
            {
                entity.HasKey(e => new { e.CodeComp, e.CodeOrg, e.RuleId, e.FilterId });

                entity.ToTable("RULE_RP_FILTER");

                entity.HasComment("Table declared to specified filter for each template and level ID");

                entity.Property(e => e.CodeComp)
                    .HasColumnName("CODE_COMP")
                    .HasComment("Company Code");

                entity.Property(e => e.CodeOrg)
                    .HasColumnName("CODE_ORG")
                    .HasComment("Organization Code");

                entity.Property(e => e.RuleId)
                    .HasMaxLength(15)
                    .HasColumnName("RULE_ID")
                    .HasComment("Rule ID");

                entity.Property(e => e.FilterId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("FILTER_ID");

                entity.Property(e => e.AuditCreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("AUDIT_CREATED_DATE");

                entity.Property(e => e.AuditCreatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_CREATED_USER");

                entity.Property(e => e.AuditUpdatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("AUDIT_UPDATED_DATE");

                entity.Property(e => e.AuditUpdatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_UPDATED_USER");

                entity.Property(e => e.FilterCbracket)
                    .HasMaxLength(50)
                    .HasColumnName("FILTER_CBRACKET");

                entity.Property(e => e.FilterDatatype)
                    .HasMaxLength(50)
                    .HasColumnName("FILTER_DATATYPE");

                entity.Property(e => e.FilterDisplayOrder).HasColumnName("FILTER_DISPLAY_ORDER");

                entity.Property(e => e.FilterField)
                    .HasMaxLength(100)
                    .HasColumnName("FILTER_FIELD")
                    .HasComment("Field Name for selection filtering");

                entity.Property(e => e.FilterFormula)
                    .HasMaxLength(50)
                    .HasColumnName("FILTER_FORMULA");

                entity.Property(e => e.FilterInputData)
                    .HasMaxLength(500)
                    .HasColumnName("FILTER_INPUT_DATA")
                    .HasComment("Data to be stored for specified filtering");

                entity.Property(e => e.FilterObracket)
                    .HasMaxLength(50)
                    .HasColumnName("FILTER_OBRACKET");

                entity.Property(e => e.FilterOperator)
                    .HasMaxLength(50)
                    .HasColumnName("FILTER_OPERATOR");

                entity.Property(e => e.FilterQuery).HasColumnName("FILTER_QUERY");

                entity.Property(e => e.FilterTable)
                    .HasMaxLength(50)
                    .HasColumnName("FILTER_TABLE")
                    .HasComment("Table name for specified filtering (Customer/");
            });

            modelBuilder.Entity<RuleRpHdr>(entity =>
            {
                entity.HasKey(e => new { e.CodeComp, e.CodeOrg, e.RuleId });

                entity.ToTable("RULE_RP_HDR");

                entity.Property(e => e.CodeComp)
                    .HasColumnName("CODE_COMP")
                    .HasDefaultValueSql("((1))")
                    .HasComment("Company Code");

                entity.Property(e => e.CodeOrg)
                    .HasColumnName("CODE_ORG")
                    .HasDefaultValueSql("((1))")
                    .HasComment("Organization Code");

                entity.Property(e => e.RuleId)
                    .HasMaxLength(15)
                    .HasColumnName("RULE_ID")
                    .HasComment("System generated ID base on running no");

                entity.Property(e => e.AssessmentId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("ASSESSMENT_ID");

                entity.Property(e => e.AuditCreatedDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("AUDIT_CREATED_DATE")
                    .HasDefaultValueSql("(sysdatetime())");

                entity.Property(e => e.AuditCreatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_CREATED_USER")
                    .HasDefaultValueSql("('SYSADMIN')");

                entity.Property(e => e.AuditUpdatedDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("AUDIT_UPDATED_DATE")
                    .HasDefaultValueSql("(sysdatetime())");

                entity.Property(e => e.AuditUpdatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_UPDATED_USER")
                    .HasDefaultValueSql("('SYSADMIN')");

                entity.Property(e => e.ComputeMethod).HasColumnName("COMPUTE_METHOD");

                entity.Property(e => e.EodBatchStatus).HasColumnName("EOD_BATCH_STATUS");

                entity.Property(e => e.FirsttimeOdd).HasColumnName("FIRSTTIME_ODD");

                entity.Property(e => e.GrpFiltering)
                    .HasColumnName("GRP_FILTERING")
                    .HasComment("Combined Query. Split Query can be found inside RULE_WM_FILTER table");

                entity.Property(e => e.ReportType)
                    .HasMaxLength(15)
                    .HasColumnName("REPORT_TYPE")
                    .HasDefaultValueSql("((1))")
                    .HasComment("Report Type");

                entity.Property(e => e.RuleCif).HasColumnName("RULE_CIF");

                entity.Property(e => e.RuleDesc)
                    .HasMaxLength(150)
                    .HasColumnName("RULE_DESC")
                    .HasComment("Description of the rule");

                entity.Property(e => e.RuleStatus)
                    .HasColumnName("RULE_STATUS")
                    .HasDefaultValueSql("((1))")
                    .HasComment("1-active\\n0-inactive");

                entity.Property(e => e.RuleType)
                    .HasColumnName("RULE_TYPE")
                    .HasComment("Watchlist Type (DJ, WC, Std)");

                entity.Property(e => e.ScenarioDesc)
                    .HasMaxLength(500)
                    .HasColumnName("SCENARIO_DESC")
                    .HasComment("Scenario Description");

                entity.Property(e => e.ScenarioType)
                    .HasColumnName("SCENARIO_TYPE")
                    .HasDefaultValueSql("((1))")
                    .HasComment("1-delta wl to full customer\\n2-full wl to delta customer\\n3-delta wl to delta customer\\n4-full wl to full customer");
            });

            modelBuilder.Entity<RuleTmFilter>(entity =>
            {
                entity.HasKey(e => new { e.CodeComp, e.CodeOrg, e.RuleId, e.FilterId });

                entity.ToTable("RULE_TM_FILTER");

                entity.HasComment("Table declared to specified filter for each template and level ID");

                entity.Property(e => e.CodeComp)
                    .HasColumnName("CODE_COMP")
                    .HasComment("Company Code");

                entity.Property(e => e.CodeOrg)
                    .HasColumnName("CODE_ORG")
                    .HasComment("Organization Code");

                entity.Property(e => e.RuleId)
                    .HasMaxLength(15)
                    .HasColumnName("RULE_ID")
                    .HasComment("Rule ID");

                entity.Property(e => e.FilterId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("FILTER_ID");

                entity.Property(e => e.AuditCreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("AUDIT_CREATED_DATE");

                entity.Property(e => e.AuditCreatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_CREATED_USER");

                entity.Property(e => e.AuditUpdatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("AUDIT_UPDATED_DATE");

                entity.Property(e => e.AuditUpdatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_UPDATED_USER");

                entity.Property(e => e.FilterCbracket)
                    .HasMaxLength(50)
                    .HasColumnName("FILTER_CBRACKET");

                entity.Property(e => e.FilterDatatype)
                    .HasMaxLength(50)
                    .HasColumnName("FILTER_DATATYPE");

                entity.Property(e => e.FilterDisplayOrder).HasColumnName("FILTER_DISPLAY_ORDER");

                entity.Property(e => e.FilterField)
                    .HasMaxLength(100)
                    .HasColumnName("FILTER_FIELD")
                    .HasComment("Field Name for selection filtering");

                entity.Property(e => e.FilterFormula)
                    .HasMaxLength(50)
                    .HasColumnName("FILTER_FORMULA");

                entity.Property(e => e.FilterInputData)
                    .HasMaxLength(500)
                    .HasColumnName("FILTER_INPUT_DATA")
                    .HasComment("Data to be stored for specified filtering");

                entity.Property(e => e.FilterObracket)
                    .HasMaxLength(50)
                    .HasColumnName("FILTER_OBRACKET");

                entity.Property(e => e.FilterOperator)
                    .HasMaxLength(50)
                    .HasColumnName("FILTER_OPERATOR");

                entity.Property(e => e.FilterQuery).HasColumnName("FILTER_QUERY");

                entity.Property(e => e.FilterTable)
                    .HasMaxLength(50)
                    .HasColumnName("FILTER_TABLE")
                    .HasComment("Table name for specified filtering (Customer/");

                entity.Property(e => e.FilterType)
                    .HasMaxLength(50)
                    .HasColumnName("FILTER_TYPE");
            });

            modelBuilder.Entity<RuleTmFormula>(entity =>
            {
                entity.HasKey(e => new { e.CodeComp, e.CodeOrg, e.RuleId, e.FormulaId });

                entity.ToTable("RULE_TM_FORMULA");

                entity.Property(e => e.CodeComp)
                    .HasColumnName("CODE_COMP")
                    .HasComment("Company Code");

                entity.Property(e => e.CodeOrg)
                    .HasColumnName("CODE_ORG")
                    .HasComment("Organization Code");

                entity.Property(e => e.RuleId)
                    .HasMaxLength(15)
                    .HasColumnName("RULE_ID")
                    .HasComment("Rule ID");

                entity.Property(e => e.FormulaId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("FORMULA_ID")
                    .HasComment("Formula ID");

                entity.Property(e => e.AuditCreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("AUDIT_CREATED_DATE");

                entity.Property(e => e.AuditCreatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_CREATED_USER")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AuditUpdatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("AUDIT_UPDATED_DATE");

                entity.Property(e => e.AuditUpdatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_UPDATED_USER")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FilterOperator)
                    .HasMaxLength(50)
                    .HasColumnName("FILTER_OPERATOR");

                entity.Property(e => e.Formula)
                    .HasMaxLength(50)
                    .HasColumnName("FORMULA");

                entity.Property(e => e.FormulaAggregate)
                    .HasMaxLength(50)
                    .HasColumnName("FORMULA_AGGREGATE");

                entity.Property(e => e.FormulaCompute)
                    .HasColumnName("FORMULA_COMPUTE")
                    .HasComment("Compute method");

                entity.Property(e => e.FormulaDesc)
                    .HasMaxLength(150)
                    .HasColumnName("FORMULA_DESC")
                    .HasComment("Formula description");

                entity.Property(e => e.FormulaDisplayOrder)
                    .HasColumnName("FORMULA_DISPLAY_ORDER")
                    .HasComment("Display order");

                entity.Property(e => e.FormulaDuration).HasColumnName("FORMULA_DURATION");

                entity.Property(e => e.FormulaPercent).HasColumnName("FORMULA_PERCENT");

                entity.Property(e => e.FormulaThreshold)
                    .HasColumnName("FORMULA_THRESHOLD")
                    .HasComment("Threshold");

                entity.Property(e => e.FormulaTranType)
                    .HasMaxLength(50)
                    .HasColumnName("FORMULA_TRAN_TYPE")
                    .HasDefaultValueSql("('')")
                    .HasComment("Transaction type: debit/credit");

                entity.Property(e => e.MaxFormulaThreshold).HasColumnName("MAX_FORMULA_THRESHOLD");

                entity.Property(e => e.MaxTranAmount).HasColumnName("MAX_TRAN_AMOUNT");

                entity.Property(e => e.MaxTranCount).HasColumnName("MAX_TRAN_COUNT");

                entity.Property(e => e.MinFormulaThreshold).HasColumnName("MIN_FORMULA_THRESHOLD");

                entity.Property(e => e.MinTranAmount).HasColumnName("MIN_TRAN_AMOUNT");

                entity.Property(e => e.MinTranCount).HasColumnName("MIN_TRAN_COUNT");
            });

            modelBuilder.Entity<RuleTmHdr>(entity =>
            {
                entity.HasKey(e => new { e.CodeComp, e.CodeOrg, e.RuleId })
                    .HasName("Pk_CONFIG_RULE_TM");

                entity.ToTable("RULE_TM_HDR");

                entity.Property(e => e.CodeComp)
                    .HasColumnName("CODE_COMP")
                    .HasDefaultValueSql("((1))")
                    .HasComment("Company Code");

                entity.Property(e => e.CodeOrg)
                    .HasColumnName("CODE_ORG")
                    .HasDefaultValueSql("((1))")
                    .HasComment("Organization Code");

                entity.Property(e => e.RuleId)
                    .HasMaxLength(15)
                    .HasColumnName("RULE_ID")
                    .HasComment("System generated ID base on running no");

                entity.Property(e => e.AuditCreatedDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("AUDIT_CREATED_DATE")
                    .HasDefaultValueSql("(sysdatetime())");

                entity.Property(e => e.AuditCreatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_CREATED_USER")
                    .HasDefaultValueSql("('SYSADMIN')");

                entity.Property(e => e.AuditUpdatedDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("AUDIT_UPDATED_DATE")
                    .HasDefaultValueSql("(sysdatetime())");

                entity.Property(e => e.AuditUpdatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_UPDATED_USER")
                    .HasDefaultValueSql("('SYSADMIN')");

                entity.Property(e => e.EodBatchStatus).HasColumnName("EOD_BATCH_STATUS");

                entity.Property(e => e.GrpFiltering)
                    .HasColumnName("GRP_FILTERING")
                    .HasComment("Combined Query. Split Query can be found inside RULE_TM_FILTER table");

                entity.Property(e => e.GrpSqlStmt)
                    .HasColumnName("GRP_SQL_STMT")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ReportType)
                    .HasMaxLength(15)
                    .HasColumnName("REPORT_TYPE")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.RuleAccount).HasColumnName("RULE_ACCOUNT");

                entity.Property(e => e.RuleCif).HasColumnName("RULE_CIF");

                entity.Property(e => e.RuleCurrency).HasColumnName("RULE_CURRENCY");

                entity.Property(e => e.RuleDesc)
                    .HasMaxLength(150)
                    .HasColumnName("RULE_DESC")
                    .HasComment("Description of the rule");

                entity.Property(e => e.RuleStatus)
                    .HasColumnName("RULE_STATUS")
                    .HasDefaultValueSql("((1))")
                    .HasComment("1-active\\n0-inactive");

                entity.Property(e => e.RuleStrFilter)
                    .HasColumnName("RULE_STR_FILTER")
                    .HasComment("Indicator to exclude STR client");

                entity.Property(e => e.RuleStrFilterDuration)
                    .HasColumnName("RULE_STR_FILTER_DURATION")
                    .HasComment("Exclude STR client for certain of duration");

                entity.Property(e => e.RuleTxn).HasColumnName("RULE_TXN");

                entity.Property(e => e.RuleTxnHistory).HasColumnName("RULE_TXN_HISTORY");

                entity.Property(e => e.RuleType)
                    .HasMaxLength(50)
                    .HasColumnName("RULE_TYPE")
                    .HasComment("Watchlist Type (DJ, WC, Std)");

                entity.Property(e => e.ScenarioDesc)
                    .HasMaxLength(500)
                    .HasColumnName("SCENARIO_DESC")
                    .HasComment("Scenario Description");

                entity.Property(e => e.ScenarioType)
                    .HasColumnName("SCENARIO_TYPE")
                    .HasDefaultValueSql("((1))")
                    .HasComment("1-delta wl to full customer\\n2-full wl to delta customer\\n3-delta wl to delta customer\\n4-full wl to full customer");

                entity.Property(e => e.TmWeakresult).HasColumnName("TM_WEAKRESULT");
            });

            modelBuilder.Entity<RuleWmDtl>(entity =>
            {
                entity.HasKey(e => new { e.CodeComp, e.CodeOrg, e.RuleId, e.RuleConId })
                    .HasName("Pk_RULE_WM_HDR");

                entity.ToTable("RULE_WM_DTL");

                entity.Property(e => e.CodeComp)
                    .HasColumnName("CODE_COMP")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.CodeOrg)
                    .HasColumnName("CODE_ORG")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.RuleId)
                    .HasMaxLength(15)
                    .HasColumnName("RULE_ID");

                entity.Property(e => e.RuleConId).HasColumnName("RULE_CON_ID");

                entity.Property(e => e.AuditCreatedDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("AUDIT_CREATED_DATE")
                    .HasDefaultValueSql("(sysdatetime())");

                entity.Property(e => e.AuditCreatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_CREATED_USER");

                entity.Property(e => e.AuditUpdatedDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("AUDIT_UPDATED_DATE")
                    .HasDefaultValueSql("(sysdatetime())");

                entity.Property(e => e.AuditUpdatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_UPDATED_USER");

                entity.Property(e => e.RuleConDesc)
                    .HasMaxLength(25)
                    .HasColumnName("RULE_CON_DESC")
                    .HasComment("Condition Name");

                entity.Property(e => e.RuleDestField)
                    .HasMaxLength(50)
                    .HasColumnName("RULE_DEST_FIELD");

                entity.Property(e => e.RuleDestTable)
                    .HasMaxLength(50)
                    .HasColumnName("RULE_DEST_TABLE");

                entity.Property(e => e.RuleSrcField)
                    .HasMaxLength(50)
                    .HasColumnName("RULE_SRC_FIELD");

                entity.Property(e => e.RuleSrcTable)
                    .HasMaxLength(50)
                    .HasColumnName("RULE_SRC_TABLE");

                entity.Property(e => e.RuleStatus)
                    .HasColumnName("RULE_STATUS")
                    .HasDefaultValueSql("((1))")
                    .HasComment("1-active\\n0-inactive");
            });

            modelBuilder.Entity<RuleWmFilter>(entity =>
            {
                entity.HasKey(e => new { e.CodeComp, e.CodeOrg, e.RuleId, e.FilterId });

                entity.ToTable("RULE_WM_FILTER");

                entity.HasComment("Table declared to specified filter for each template and level ID");

                entity.Property(e => e.CodeComp)
                    .HasColumnName("CODE_COMP")
                    .HasComment("Company Code");

                entity.Property(e => e.CodeOrg)
                    .HasColumnName("CODE_ORG")
                    .HasComment("Organization Code");

                entity.Property(e => e.RuleId)
                    .HasMaxLength(15)
                    .HasColumnName("RULE_ID")
                    .HasComment("Rule ID");

                entity.Property(e => e.FilterId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("FILTER_ID");

                entity.Property(e => e.AuditCreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("AUDIT_CREATED_DATE");

                entity.Property(e => e.AuditCreatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_CREATED_USER");

                entity.Property(e => e.AuditUpdatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("AUDIT_UPDATED_DATE");

                entity.Property(e => e.AuditUpdatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_UPDATED_USER");

                entity.Property(e => e.FilterCbracket)
                    .HasMaxLength(50)
                    .HasColumnName("FILTER_CBRACKET");

                entity.Property(e => e.FilterDatatype)
                    .HasMaxLength(50)
                    .HasColumnName("FILTER_DATATYPE");

                entity.Property(e => e.FilterDisplayOrder).HasColumnName("FILTER_DISPLAY_ORDER");

                entity.Property(e => e.FilterField)
                    .HasMaxLength(100)
                    .HasColumnName("FILTER_FIELD")
                    .HasComment("Field Name for selection filtering");

                entity.Property(e => e.FilterFormula)
                    .HasMaxLength(50)
                    .HasColumnName("FILTER_FORMULA");

                entity.Property(e => e.FilterInputData)
                    .HasMaxLength(500)
                    .HasColumnName("FILTER_INPUT_DATA")
                    .HasComment("Data to be stored for specified filtering");

                entity.Property(e => e.FilterObracket)
                    .HasMaxLength(50)
                    .HasColumnName("FILTER_OBRACKET");

                entity.Property(e => e.FilterOperator)
                    .HasMaxLength(50)
                    .HasColumnName("FILTER_OPERATOR");

                entity.Property(e => e.FilterQuery).HasColumnName("FILTER_QUERY");

                entity.Property(e => e.FilterTable)
                    .HasMaxLength(50)
                    .HasColumnName("FILTER_TABLE")
                    .HasComment("Table name for specified filtering (Customer/");
            });

            modelBuilder.Entity<RuleWmHdr>(entity =>
            {
                entity.HasKey(e => new { e.CodeComp, e.CodeOrg, e.RuleId })
                    .HasName("Pk_CONFIG_RULE_WM");

                entity.ToTable("RULE_WM_HDR");

                entity.Property(e => e.CodeComp)
                    .HasColumnName("CODE_COMP")
                    .HasDefaultValueSql("((1))")
                    .HasComment("Company Code");

                entity.Property(e => e.CodeOrg)
                    .HasColumnName("CODE_ORG")
                    .HasDefaultValueSql("((1))")
                    .HasComment("Organization Code");

                entity.Property(e => e.RuleId)
                    .HasMaxLength(15)
                    .HasColumnName("RULE_ID")
                    .HasComment("System generated ID base on running no");

                entity.Property(e => e.AuditCreatedDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("AUDIT_CREATED_DATE")
                    .HasDefaultValueSql("(sysdatetime())");

                entity.Property(e => e.AuditCreatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_CREATED_USER")
                    .HasDefaultValueSql("('SYSADMIN')");

                entity.Property(e => e.AuditUpdatedDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("AUDIT_UPDATED_DATE")
                    .HasDefaultValueSql("(sysdatetime())");

                entity.Property(e => e.AuditUpdatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_UPDATED_USER")
                    .HasDefaultValueSql("('SYSADMIN')");

                entity.Property(e => e.EodBatchStatus).HasColumnName("EOD_BATCH_STATUS");

                entity.Property(e => e.GrpFiltering)
                    .HasColumnName("GRP_FILTERING")
                    .HasComment("Combined Query. Split Query can be found inside RULE_WM_FILTER table");

                entity.Property(e => e.ReportType)
                    .HasMaxLength(15)
                    .HasColumnName("REPORT_TYPE")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.RuleDesc)
                    .HasMaxLength(150)
                    .HasColumnName("RULE_DESC")
                    .HasComment("Description of the rule");

                entity.Property(e => e.RuleStatus)
                    .HasColumnName("RULE_STATUS")
                    .HasDefaultValueSql("((1))")
                    .HasComment("1-active\\n0-inactive");

                entity.Property(e => e.ScenarioDesc)
                    .HasMaxLength(500)
                    .HasColumnName("SCENARIO_DESC")
                    .HasComment("Scenario Description");

                entity.Property(e => e.ScenarioType)
                    .HasColumnName("SCENARIO_TYPE")
                    .HasDefaultValueSql("((1))")
                    .HasComment("1-delta wl to full customer\\n2-full wl to delta customer\\n3-delta wl to delta customer\\n4-full wl to full customer");

                entity.Property(e => e.WlType)
                    .HasMaxLength(50)
                    .HasColumnName("WL_TYPE")
                    .HasComment("Watchlist Type (DJ, WC, Std)");

                entity.Property(e => e.WlWeakresult).HasColumnName("WL_WEAKRESULT");
            });

            modelBuilder.Entity<ScandataIn>(entity =>
            {
                entity.HasKey(e => new { e.JobId, e.SysId })
                    .HasName("PK__SCANDATA__1F7AD5E9618F2F51");

                entity.ToTable("SCANDATA_IN");

                entity.Property(e => e.JobId).HasColumnName("JOB_ID");

                entity.Property(e => e.SysId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("SYS_ID");

                entity.Property(e => e.AccountNo)
                    .HasMaxLength(30)
                    .HasColumnName("ACCOUNT_NO");

                entity.Property(e => e.BranchCode)
                    .HasMaxLength(30)
                    .HasColumnName("BRANCH_CODE");

                entity.Property(e => e.CifNo)
                    .HasMaxLength(30)
                    .HasColumnName("CIF_NO");

                entity.Property(e => e.FileFormat)
                    .HasMaxLength(1)
                    .HasColumnName("FILE_FORMAT");

                entity.Property(e => e.InUserId)
                    .HasMaxLength(35)
                    .HasColumnName("IN_USER_ID");

                entity.Property(e => e.MacTag)
                    .HasMaxLength(512)
                    .HasColumnName("MAC_TAG");

                entity.Property(e => e.RemarkField)
                    .HasMaxLength(255)
                    .HasColumnName("REMARK_FIELD");

                entity.Property(e => e.ScanCountryName)
                    .HasMaxLength(60)
                    .HasColumnName("SCAN_COUNTRY_NAME");

                entity.Property(e => e.ScanDob)
                    .HasMaxLength(20)
                    .HasColumnName("SCAN_DOB");

                entity.Property(e => e.ScanEntityName)
                    .HasMaxLength(255)
                    .HasColumnName("SCAN_ENTITY_NAME");

                entity.Property(e => e.ScanEntityType)
                    .HasMaxLength(20)
                    .HasColumnName("SCAN_ENTITY_TYPE");

                entity.Property(e => e.ScanGender)
                    .HasMaxLength(20)
                    .HasColumnName("SCAN_GENDER");

                entity.Property(e => e.ScanIdValue)
                    .HasMaxLength(100)
                    .HasColumnName("SCAN_ID_VALUE");

                entity.Property(e => e.ScanNativeName)
                    .HasMaxLength(255)
                    .HasColumnName("SCAN_NATIVE_NAME");

                entity.Property(e => e.ThirdPartyPayor)
                    .HasMaxLength(1)
                    .HasColumnName("THIRD_PARTY_PAYOR");

                entity.Property(e => e.TranAmount).HasColumnName("TRAN_AMOUNT");

                entity.Property(e => e.WatchlistType)
                    .HasMaxLength(20)
                    .HasColumnName("WATCHLIST_TYPE");
            });

            modelBuilder.Entity<ScanwldataIn>(entity =>
            {
                entity.HasKey(e => new { e.JobId, e.SysId })
                    .HasName("PK__SCANWLDA__1F7AD5E9266FA09C");

                entity.ToTable("SCANWLDATA_IN");

                entity.Property(e => e.JobId).HasColumnName("JOB_ID");

                entity.Property(e => e.SysId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("SYS_ID");

                entity.Property(e => e.AddDelInd).HasColumnName("ADD_DEL_IND");

                entity.Property(e => e.AddDelMode)
                    .HasMaxLength(5)
                    .HasColumnName("ADD_DEL_MODE");

                entity.Property(e => e.AddDelUid)
                    .HasMaxLength(50)
                    .HasColumnName("ADD_DEL_UID");

                entity.Property(e => e.Address)
                    .HasMaxLength(255)
                    .HasColumnName("ADDRESS");

                entity.Property(e => e.AliasesName1)
                    .HasMaxLength(255)
                    .HasColumnName("ALIASES_NAME1");

                entity.Property(e => e.AliasesName2)
                    .HasMaxLength(255)
                    .HasColumnName("ALIASES_NAME2");

                entity.Property(e => e.AliasesName3)
                    .HasMaxLength(255)
                    .HasColumnName("ALIASES_NAME3");

                entity.Property(e => e.AliasesName4)
                    .HasMaxLength(255)
                    .HasColumnName("ALIASES_NAME4");

                entity.Property(e => e.AliasesName5)
                    .HasMaxLength(255)
                    .HasColumnName("ALIASES_NAME5");

                entity.Property(e => e.AliasesName6)
                    .HasMaxLength(255)
                    .HasColumnName("ALIASES_NAME6");

                entity.Property(e => e.AlsoKnownAs)
                    .HasMaxLength(255)
                    .HasColumnName("ALSO_KNOWN_AS");

                entity.Property(e => e.BatchScanInd1).HasColumnName("BATCH_SCAN_IND1");

                entity.Property(e => e.BatchScanInd2).HasColumnName("BATCH_SCAN_IND2");

                entity.Property(e => e.BatchScanInd3).HasColumnName("BATCH_SCAN_IND3");

                entity.Property(e => e.BatchScanInd4).HasColumnName("BATCH_SCAN_IND4");

                entity.Property(e => e.Category)
                    .HasMaxLength(50)
                    .HasColumnName("CATEGORY");

                entity.Property(e => e.Dob)
                    .HasMaxLength(30)
                    .HasColumnName("DOB");

                entity.Property(e => e.EntityUid)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("ENTITY_UID");

                entity.Property(e => e.EntryType)
                    .HasMaxLength(20)
                    .HasColumnName("ENTRY_TYPE");

                entity.Property(e => e.FullName)
                    .HasMaxLength(255)
                    .HasColumnName("FULL_NAME");

                entity.Property(e => e.Gender)
                    .HasMaxLength(255)
                    .HasColumnName("GENDER");

                entity.Property(e => e.IdType1)
                    .HasMaxLength(50)
                    .HasColumnName("ID_TYPE1");

                entity.Property(e => e.IdType2)
                    .HasMaxLength(50)
                    .HasColumnName("ID_TYPE2");

                entity.Property(e => e.IdType3)
                    .HasMaxLength(255)
                    .HasColumnName("ID_TYPE3")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.IdType4)
                    .HasMaxLength(255)
                    .HasColumnName("ID_TYPE4")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.IdValue1)
                    .HasMaxLength(150)
                    .HasColumnName("ID_VALUE1");

                entity.Property(e => e.IdValue2)
                    .HasMaxLength(150)
                    .HasColumnName("ID_VALUE2");

                entity.Property(e => e.IdValue3)
                    .HasMaxLength(150)
                    .HasColumnName("ID_VALUE3")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.IdValue4)
                    .HasMaxLength(150)
                    .HasColumnName("ID_VALUE4")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.InUserId)
                    .HasMaxLength(35)
                    .HasColumnName("IN_USER_ID");

                entity.Property(e => e.MacTag)
                    .HasMaxLength(512)
                    .HasColumnName("MAC_TAG");

                entity.Property(e => e.NameSource)
                    .HasMaxLength(20)
                    .HasColumnName("NAME_SOURCE");

                entity.Property(e => e.NameSource2)
                    .HasColumnName("NAME_SOURCE2")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NameSource3)
                    .HasColumnName("NAME_SOURCE3")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Nationality)
                    .HasMaxLength(60)
                    .HasColumnName("NATIONALITY");

                entity.Property(e => e.NativeName)
                    .HasMaxLength(255)
                    .HasColumnName("NATIVE_NAME");

                entity.Property(e => e.PlaceOfBirth)
                    .HasMaxLength(60)
                    .HasColumnName("PLACE_OF_BIRTH");

                entity.Property(e => e.Remarks)
                    .HasMaxLength(4000)
                    .HasColumnName("REMARKS");

                entity.Property(e => e.ScanUptInd)
                    .IsRequired()
                    .HasMaxLength(1)
                    .HasColumnName("SCAN_UPT_IND");

                entity.Property(e => e.SubCategory)
                    .HasMaxLength(50)
                    .HasColumnName("SUB_CATEGORY");

                entity.Property(e => e.WatchlistType)
                    .HasMaxLength(20)
                    .HasColumnName("WATCHLIST_TYPE");
            });

            modelBuilder.Entity<StaffPermission>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("STAFF_PERMISSIONS");

                entity.Property(e => e.History)
                    .IsUnicode(false)
                    .HasColumnName("HISTORY");

                entity.Property(e => e.JobStatus)
                    .IsUnicode(false)
                    .HasColumnName("JOB_STATUS");

                entity.Property(e => e.OddRf).HasColumnName("ODD_RF");

                entity.Property(e => e.Onboard)
                    .IsUnicode(false)
                    .HasColumnName("ONBOARD");

                entity.Property(e => e.OnboardRf).HasColumnName("ONBOARD_RF");

                entity.Property(e => e.People)
                    .IsUnicode(false)
                    .HasColumnName("PEOPLE");

                entity.Property(e => e.Portfolio)
                    .IsUnicode(false)
                    .HasColumnName("PORTFOLIO");

                entity.Property(e => e.Reports)
                    .IsUnicode(false)
                    .HasColumnName("REPORTS");

                entity.Property(e => e.RiskProfile)
                    .IsUnicode(false)
                    .HasColumnName("RISK_PROFILE");

                entity.Property(e => e.Setting)
                    .IsUnicode(false)
                    .HasColumnName("SETTING");

                entity.Property(e => e.TransactionMonitoring)
                    .IsUnicode(false)
                    .HasColumnName("TRANSACTION_MONITORING");

                entity.Property(e => e.TransactionScreening)
                    .IsUnicode(false)
                    .HasColumnName("TRANSACTION_SCREENING");

                entity.Property(e => e.TxnMonitoringRf).HasColumnName("TXN_MONITORING_RF");

                entity.Property(e => e.UserId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.UserType).HasColumnName("USER_TYPE");

                entity.Property(e => e.Watchlist)
                    .IsUnicode(false)
                    .HasColumnName("WATCHLIST");

                entity.Property(e => e.WatchlistRf).HasColumnName("WATCHLIST_RF");
            });

            modelBuilder.Entity<TemplateFile>(entity =>
            {
                entity.HasKey(e => new { e.CodeComp, e.CodeOrg, e.FileId });

                entity.ToTable("TEMPLATE_FILE");

                entity.Property(e => e.CodeComp)
                    .HasColumnName("CODE_COMP")
                    .HasComment("Company Code");

                entity.Property(e => e.CodeOrg)
                    .HasColumnName("CODE_ORG")
                    .HasComment("Organization Code");

                entity.Property(e => e.FileId)
                    .HasColumnName("FILE_ID")
                    .HasComment("File ID");

                entity.Property(e => e.AuditCreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("AUDIT_CREATED_DATE")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date time attachment being executed");

                entity.Property(e => e.AuditCreatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_CREATED_USER")
                    .HasDefaultValueSql("('')")
                    .HasComment("User ID of staff performed activity");

                entity.Property(e => e.Description)
                    .HasMaxLength(2000)
                    .HasColumnName("DESCRIPTION")
                    .HasDefaultValueSql("('')")
                    .HasComment("Description");

                entity.Property(e => e.FileEncode)
                    .HasColumnName("FILE_ENCODE")
                    .HasComment("Encoded data of each files");

                entity.Property(e => e.FileName)
                    .HasMaxLength(200)
                    .HasColumnName("FILE_NAME")
                    .HasDefaultValueSql("('')")
                    .HasComment("Template File Name");

                entity.Property(e => e.FilePath)
                    .HasMaxLength(200)
                    .HasColumnName("FILE_PATH")
                    .HasDefaultValueSql("('')")
                    .HasComment("Template File Path");
            });

            modelBuilder.Entity<Transaction>(entity =>
            {
                entity.HasKey(e => e.TranId);

                entity.ToTable("TRANSACTION");

                entity.HasIndex(e => new { e.CodeComp, e.CodeOrg, e.NoMaster, e.NoCif, e.NoAccount }, "fk_dbo_transaction");

                entity.Property(e => e.TranId).HasColumnName("TRAN_ID");

                entity.Property(e => e.CodeComp).HasColumnName("CODE_COMP");

                entity.Property(e => e.CodeOrg).HasColumnName("CODE_ORG");

                entity.Property(e => e.NoAccount)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("NO_ACCOUNT");

                entity.Property(e => e.NoCif)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("NO_CIF");

                entity.Property(e => e.NoMaster).HasColumnName("NO_MASTER");
            });

            modelBuilder.Entity<TransactionDeltum>(entity =>
            {
                entity.HasKey(e => e.TranId);

                entity.ToTable("TRANSACTION_DELTA");

                entity.HasIndex(e => new { e.CodeComp, e.CodeOrg, e.NoMaster, e.NoCif, e.NoAccount }, "fk_dbo_transaction_delta");

                entity.Property(e => e.TranId).HasColumnName("TRAN_ID");

                entity.Property(e => e.CodeComp).HasColumnName("CODE_COMP");

                entity.Property(e => e.CodeOrg).HasColumnName("CODE_ORG");

                entity.Property(e => e.NoAccount)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("NO_ACCOUNT");

                entity.Property(e => e.NoCif)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("NO_CIF");

                entity.Property(e => e.NoMaster).HasColumnName("NO_MASTER");
            });

            modelBuilder.Entity<TsCase>(entity =>
            {
                entity.HasKey(e => e.CaseId);

                entity.ToTable("TS_CASE");

                entity.Property(e => e.CaseId).HasColumnName("CASE_ID");

                entity.Property(e => e.AuditDateCreated)
                    .HasColumnType("datetime")
                    .HasColumnName("AUDIT_DATE_CREATED");

                entity.Property(e => e.AuditDateUpdated)
                    .HasColumnType("datetime")
                    .HasColumnName("AUDIT_DATE_UPDATED");

                entity.Property(e => e.AuditUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_USER")
                    .HasComment("User attending alert");

                entity.Property(e => e.AuditUserLevel)
                    .HasColumnName("AUDIT_USER_LEVEL")
                    .HasComment("Level of Role User");

                entity.Property(e => e.CaseLevel)
                    .HasColumnName("CASE_LEVEL")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.CaseStatus).HasColumnName("CASE_STATUS");

                entity.Property(e => e.CaseSubStatus).HasColumnName("CASE_SUB_STATUS");

                entity.Property(e => e.Channel)
                    .HasMaxLength(50)
                    .HasColumnName("CHANNEL");

                entity.Property(e => e.CodeComp)
                    .HasColumnName("CODE_COMP")
                    .HasComment("Company Code");

                entity.Property(e => e.CodeOrg)
                    .HasColumnName("CODE_ORG")
                    .HasComment("Organization Code");

                entity.Property(e => e.Direction)
                    .HasMaxLength(50)
                    .HasColumnName("DIRECTION");

                entity.Property(e => e.FileId)
                    .HasMaxLength(50)
                    .HasColumnName("FILE_ID");

                entity.Property(e => e.MessageId)
                    .HasMaxLength(100)
                    .HasColumnName("MESSAGE_ID");

                entity.Property(e => e.ModuleId)
                    .HasColumnName("MODULE_ID")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.NoCif)
                    .HasMaxLength(50)
                    .HasColumnName("NO_CIF")
                    .HasComment("CIF No of customer");

                entity.Property(e => e.NoMaster)
                    .HasMaxLength(50)
                    .HasColumnName("NO_MASTER")
                    .HasComment("Master Number of client");

                entity.Property(e => e.ReviewCase)
                    .HasColumnName("REVIEW_CASE")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<TxnDaily>(entity =>
            {
                entity.HasKey(e => new { e.CodeComp, e.CodeOrg, e.ModuleId, e.RfId, e.SeqAuto });

                entity.ToTable("TXN_DAILY");

                entity.Property(e => e.CodeComp)
                    .HasColumnName("CODE_COMP")
                    .HasComment("Company Code");

                entity.Property(e => e.CodeOrg)
                    .HasColumnName("CODE_ORG")
                    .HasComment("Organization Code");

                entity.Property(e => e.ModuleId)
                    .HasMaxLength(8)
                    .HasColumnName("MODULE_ID")
                    .HasDefaultValueSql("((0))")
                    .HasComment("Module ID of Red Flag");

                entity.Property(e => e.RfId)
                    .HasColumnName("RF_ID")
                    .HasComment("Red Flag ID");

                entity.Property(e => e.SeqAuto)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("SEQ_AUTO");

                entity.Property(e => e.AccNo)
                    .HasMaxLength(50)
                    .HasColumnName("ACC_NO")
                    .HasDefaultValueSql("('')")
                    .HasComment("Account number");

                entity.Property(e => e.AmtBal)
                    .HasColumnName("AMT_BAL")
                    .HasComment("Remaining acc balance");

                entity.Property(e => e.AmtCr)
                    .HasColumnName("AMT_CR")
                    .HasComment("Credit amount");

                entity.Property(e => e.AmtCur)
                    .HasMaxLength(50)
                    .HasColumnName("AMT_CUR")
                    .HasDefaultValueSql("('')")
                    .HasComment("Currency");

                entity.Property(e => e.AmtDr)
                    .HasColumnName("AMT_DR")
                    .HasComment("Debit amount");

                entity.Property(e => e.AmtOther)
                    .HasColumnName("AMT_OTHER")
                    .HasComment("Original amount");

                entity.Property(e => e.AmtRate)
                    .HasColumnName("AMT_RATE")
                    .HasComment("FX rate");

                entity.Property(e => e.AuditCreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("AUDIT_CREATED_DATE");

                entity.Property(e => e.AuditCreatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_CREATED_USER")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.BatchDate).HasColumnName("BATCH_DATE");

                entity.Property(e => e.BatchNo)
                    .HasMaxLength(15)
                    .HasColumnName("BATCH_NO")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.BeneBcty)
                    .HasMaxLength(50)
                    .HasColumnName("BENE_BCTY")
                    .HasDefaultValueSql("('')")
                    .HasComment("Beneficiary bank country");

                entity.Property(e => e.BeneBic)
                    .HasMaxLength(50)
                    .HasColumnName("BENE_BIC")
                    .HasDefaultValueSql("('')")
                    .HasComment("Beneficiary bank BIC");

                entity.Property(e => e.BeneBname)
                    .HasMaxLength(50)
                    .HasColumnName("BENE_BNAME")
                    .HasDefaultValueSql("('')")
                    .HasComment("Beneficiary bank name");

                entity.Property(e => e.BeneCty)
                    .HasMaxLength(50)
                    .HasColumnName("BENE_CTY")
                    .HasDefaultValueSql("('')")
                    .HasComment("Beneficiary country");

                entity.Property(e => e.BeneName)
                    .HasMaxLength(150)
                    .HasColumnName("BENE_NAME")
                    .HasDefaultValueSql("('')")
                    .HasComment("Beneficiary name");

                entity.Property(e => e.BeneRelay)
                    .HasMaxLength(50)
                    .HasColumnName("BENE_RELAY")
                    .HasDefaultValueSql("('')")
                    .HasComment("Beneficiary relationship");

                entity.Property(e => e.BeneSwift)
                    .HasMaxLength(50)
                    .HasColumnName("BENE_SWIFT")
                    .HasDefaultValueSql("('')")
                    .HasComment("Beneficiary bank swift code");

                entity.Property(e => e.CaseId)
                    .HasColumnName("CASE_ID")
                    .HasComment("Case ID");

                entity.Property(e => e.DataValue01)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE01")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue02)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE02")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue03)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE03")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue04)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE04")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue05)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE05")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue06)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE06")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue07)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE07")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue08)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE08")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue09)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE09")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue10)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE10")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue11)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE11")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue12)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE12")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue13)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE13")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue14)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE14")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue15)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE15")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue16)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE16")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue17)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE17")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue18)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE18")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue19)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE19")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue20)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE20")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue21)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE21")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue22)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE22")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue23)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE23")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue24)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE24")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue25)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE25")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue26)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE26")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue27)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE27")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue28)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE28")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue29)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE29")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue30)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE30")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue31)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE31")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue32)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE32")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue33)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE33")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue34)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE34")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue35)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE35")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue36)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE36")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue37)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE37")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue38)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE38")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue39)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE39")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue40)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE40")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue41)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE41")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue42)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE42")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue43)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE43")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue44)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE44")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue45)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE45")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue46)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE46")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue47)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE47")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue48)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE48")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue49)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE49")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue50)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE50")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue51)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE51")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue52)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE52")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue53)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE53")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue54)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE54")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue55)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE55")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FundName)
                    .HasMaxLength(50)
                    .HasColumnName("FUND_NAME")
                    .HasDefaultValueSql("('')")
                    .HasComment("Fund description");

                entity.Property(e => e.FundType)
                    .HasMaxLength(50)
                    .HasColumnName("FUND_TYPE")
                    .HasDefaultValueSql("('')")
                    .HasComment("Fund type");

                entity.Property(e => e.NoCif)
                    .HasMaxLength(50)
                    .HasColumnName("NO_CIF")
                    .HasDefaultValueSql("('')")
                    .HasComment("Customer's identification no");

                entity.Property(e => e.PctAdd1)
                    .HasMaxLength(100)
                    .HasColumnName("PCT_ADD1")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PctAdd2)
                    .HasMaxLength(100)
                    .HasColumnName("PCT_ADD2")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PctAdd3)
                    .HasMaxLength(100)
                    .HasColumnName("PCT_ADD3")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PctAdd4)
                    .HasMaxLength(100)
                    .HasColumnName("PCT_ADD4")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PctCity)
                    .HasMaxLength(50)
                    .HasColumnName("PCT_CITY")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PctCty)
                    .HasMaxLength(50)
                    .HasColumnName("PCT_CTY")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PctName)
                    .HasMaxLength(150)
                    .HasColumnName("PCT_NAME")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PctNat)
                    .HasMaxLength(50)
                    .HasColumnName("PCT_NAT")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PctPcode)
                    .HasMaxLength(50)
                    .HasColumnName("PCT_PCODE")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PctRelay)
                    .HasMaxLength(50)
                    .HasColumnName("PCT_RELAY")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PctState)
                    .HasMaxLength(50)
                    .HasColumnName("PCT_STATE")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ProdType)
                    .HasColumnName("PROD_TYPE")
                    .HasComment("Product type");

                entity.Property(e => e.SendBcty)
                    .HasMaxLength(50)
                    .HasColumnName("SEND_BCTY")
                    .HasDefaultValueSql("('')")
                    .HasComment("Sender bank country");

                entity.Property(e => e.SendBic)
                    .HasMaxLength(50)
                    .HasColumnName("SEND_BIC")
                    .HasDefaultValueSql("('')")
                    .HasComment("Sender bank BIC");

                entity.Property(e => e.SendBname)
                    .HasMaxLength(50)
                    .HasColumnName("SEND_BNAME")
                    .HasDefaultValueSql("('')")
                    .HasComment("Sender bank name");

                entity.Property(e => e.SendCty)
                    .HasMaxLength(50)
                    .HasColumnName("SEND_CTY")
                    .HasDefaultValueSql("('')")
                    .HasComment("Sender country");

                entity.Property(e => e.SendName)
                    .HasMaxLength(150)
                    .HasColumnName("SEND_NAME")
                    .HasDefaultValueSql("('')")
                    .HasComment("Sender name");

                entity.Property(e => e.SendRelay)
                    .HasMaxLength(50)
                    .HasColumnName("SEND_RELAY")
                    .HasDefaultValueSql("('')")
                    .HasComment("Sender relationship");

                entity.Property(e => e.SendSwift)
                    .HasMaxLength(50)
                    .HasColumnName("SEND_SWIFT")
                    .HasDefaultValueSql("('')")
                    .HasComment("Sender bank swift code");

                entity.Property(e => e.SprodType)
                    .HasColumnName("SPROD_TYPE")
                    .HasComment("Sub product type");

                entity.Property(e => e.TranChan)
                    .HasMaxLength(50)
                    .HasColumnName("TRAN_CHAN")
                    .HasDefaultValueSql("('')")
                    .HasComment("Transaction channel");

                entity.Property(e => e.TranCode1)
                    .HasMaxLength(50)
                    .HasColumnName("TRAN_CODE1")
                    .HasDefaultValueSql("('')")
                    .HasComment("Auxiliary txn code");

                entity.Property(e => e.TranCode2)
                    .HasMaxLength(50)
                    .HasColumnName("TRAN_CODE2")
                    .HasDefaultValueSql("('')")
                    .HasComment("Txn code");

                entity.Property(e => e.TranDate)
                    .HasColumnName("TRAN_DATE")
                    .HasComment("Transaction date");

                entity.Property(e => e.TranLoc)
                    .HasMaxLength(50)
                    .HasColumnName("TRAN_LOC")
                    .HasDefaultValueSql("('')")
                    .HasComment("Transaction location");

                entity.Property(e => e.TranNo)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("TRAN_NO")
                    .HasDefaultValueSql("((0))")
                    .HasComment("Transaction number");

                entity.Property(e => e.TranPdate)
                    .HasColumnName("TRAN_PDATE")
                    .HasComment("Posting date");

                entity.Property(e => e.TranPurpose)
                    .HasMaxLength(50)
                    .HasColumnName("TRAN_PURPOSE")
                    .HasDefaultValueSql("('')")
                    .HasComment("Transaction purpose");

                entity.Property(e => e.TranRef)
                    .HasMaxLength(50)
                    .HasColumnName("TRAN_REF")
                    .HasDefaultValueSql("('')")
                    .HasComment("Transaction reference number");

                entity.Property(e => e.TranStatus)
                    .HasColumnName("TRAN_STATUS")
                    .HasComment("Transaction status");

                entity.Property(e => e.TranType)
                    .HasMaxLength(10)
                    .HasColumnName("TRAN_TYPE")
                    .HasDefaultValueSql("('')")
                    .HasComment("Transaction type");

                entity.Property(e => e.TranVdate).HasColumnName("TRAN_VDATE");

                entity.Property(e => e.UnitPrice).HasColumnName("UNIT_PRICE");

                entity.Property(e => e.UnitRate).HasColumnName("UNIT_RATE");

                entity.Property(e => e.UnitVal).HasColumnName("UNIT_VAL");
            });

            modelBuilder.Entity<TxnHist>(entity =>
            {
                entity.HasKey(e => new { e.CodeComp, e.CodeOrg, e.ModuleId, e.RfId, e.SeqHistAuto })
                    .HasName("PK_TXN_HIST_1");

                entity.ToTable("TXN_HIST");

                entity.Property(e => e.CodeComp)
                    .HasColumnName("CODE_COMP")
                    .HasComment("Company Code");

                entity.Property(e => e.CodeOrg)
                    .HasColumnName("CODE_ORG")
                    .HasComment("Organization Code");

                entity.Property(e => e.ModuleId)
                    .HasColumnName("MODULE_ID")
                    .HasComment("Module ID of Red Flag");

                entity.Property(e => e.RfId)
                    .HasColumnName("RF_ID")
                    .HasComment("Red Flag ID");

                entity.Property(e => e.SeqHistAuto)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("SEQ_HIST_AUTO");

                entity.Property(e => e.AccNo)
                    .HasMaxLength(50)
                    .HasColumnName("ACC_NO")
                    .HasDefaultValueSql("('')")
                    .HasComment("Account number");

                entity.Property(e => e.AmtBal)
                    .HasColumnName("AMT_BAL")
                    .HasComment("Remaining acc balance");

                entity.Property(e => e.AmtCr)
                    .HasColumnName("AMT_CR")
                    .HasComment("Credit amount");

                entity.Property(e => e.AmtCur)
                    .HasMaxLength(50)
                    .HasColumnName("AMT_CUR")
                    .HasDefaultValueSql("('')")
                    .HasComment("Currency");

                entity.Property(e => e.AmtDr)
                    .HasColumnName("AMT_DR")
                    .HasComment("Debit amount");

                entity.Property(e => e.AmtOther)
                    .HasColumnName("AMT_OTHER")
                    .HasComment("Original amount");

                entity.Property(e => e.AmtRate)
                    .HasColumnName("AMT_RATE")
                    .HasComment("FX rate");

                entity.Property(e => e.AuditCreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("AUDIT_CREATED_DATE");

                entity.Property(e => e.AuditCreatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_CREATED_USER")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.BatchDate).HasColumnName("BATCH_DATE");

                entity.Property(e => e.BatchNo)
                    .HasMaxLength(15)
                    .HasColumnName("BATCH_NO")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.BeneBcty)
                    .HasMaxLength(50)
                    .HasColumnName("BENE_BCTY")
                    .HasDefaultValueSql("('')")
                    .HasComment("Beneficiary bank country");

                entity.Property(e => e.BeneBic)
                    .HasMaxLength(50)
                    .HasColumnName("BENE_BIC")
                    .HasDefaultValueSql("('')")
                    .HasComment("Beneficiary bank BIC");

                entity.Property(e => e.BeneBname)
                    .HasMaxLength(50)
                    .HasColumnName("BENE_BNAME")
                    .HasDefaultValueSql("('')")
                    .HasComment("Beneficiary bank name");

                entity.Property(e => e.BeneCty)
                    .HasMaxLength(50)
                    .HasColumnName("BENE_CTY")
                    .HasDefaultValueSql("('')")
                    .HasComment("Beneficiary country");

                entity.Property(e => e.BeneName)
                    .HasMaxLength(150)
                    .HasColumnName("BENE_NAME")
                    .HasDefaultValueSql("('')")
                    .HasComment("Beneficiary name");

                entity.Property(e => e.BeneRelay)
                    .HasMaxLength(50)
                    .HasColumnName("BENE_RELAY")
                    .HasDefaultValueSql("('')")
                    .HasComment("Beneficiary relationship");

                entity.Property(e => e.BeneSwift)
                    .HasMaxLength(50)
                    .HasColumnName("BENE_SWIFT")
                    .HasDefaultValueSql("('')")
                    .HasComment("Beneficiary bank swift code");

                entity.Property(e => e.CaseId)
                    .HasColumnName("CASE_ID")
                    .HasComment("Case ID");

                entity.Property(e => e.DataValue01)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE01")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue02)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE02")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue03)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE03")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue04)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE04")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue05)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE05")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue06)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE06")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue07)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE07")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue08)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE08")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue09)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE09")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue10)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE10")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue11)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE11")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue12)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE12")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue13)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE13")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue14)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE14")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue15)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE15")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue16)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE16")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue17)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE17")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue18)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE18")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue19)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE19")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue20)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE20")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue21)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE21")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue22)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE22")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue23)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE23")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue24)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE24")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue25)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE25")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue26)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE26")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue27)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE27")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue28)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE28")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue29)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE29")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue30)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE30")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue31)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE31")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue32)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE32")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue33)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE33")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue34)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE34")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue35)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE35")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue36)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE36")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue37)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE37")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue38)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE38")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue39)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE39")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue40)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE40")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue41)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE41")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue42)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE42")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue43)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE43")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue44)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE44")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue45)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE45")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue46)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE46")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue47)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE47")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue48)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE48")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue49)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE49")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue50)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE50")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue51)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE51")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue52)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE52")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue53)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE53")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue54)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE54")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataValue55)
                    .HasMaxLength(50)
                    .HasColumnName("DATA_VALUE55")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FundName)
                    .HasMaxLength(50)
                    .HasColumnName("FUND_NAME")
                    .HasDefaultValueSql("('')")
                    .HasComment("Fund description");

                entity.Property(e => e.FundType)
                    .HasMaxLength(50)
                    .HasColumnName("FUND_TYPE")
                    .HasDefaultValueSql("('')")
                    .HasComment("Fund type");

                entity.Property(e => e.NoCif)
                    .HasMaxLength(50)
                    .HasColumnName("NO_CIF")
                    .HasDefaultValueSql("('')")
                    .HasComment("CIF number");

                entity.Property(e => e.PctAdd1)
                    .HasMaxLength(100)
                    .HasColumnName("PCT_ADD1")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PctAdd2)
                    .HasMaxLength(100)
                    .HasColumnName("PCT_ADD2")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PctAdd3)
                    .HasMaxLength(100)
                    .HasColumnName("PCT_ADD3")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PctAdd4)
                    .HasMaxLength(100)
                    .HasColumnName("PCT_ADD4")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PctCity)
                    .HasMaxLength(50)
                    .HasColumnName("PCT_CITY")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PctCty)
                    .HasMaxLength(50)
                    .HasColumnName("PCT_CTY")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PctName)
                    .HasMaxLength(150)
                    .HasColumnName("PCT_NAME")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PctNat)
                    .HasMaxLength(50)
                    .HasColumnName("PCT_NAT")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PctPcode)
                    .HasMaxLength(50)
                    .HasColumnName("PCT_PCODE")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PctRelay)
                    .HasMaxLength(50)
                    .HasColumnName("PCT_RELAY")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PctState)
                    .HasMaxLength(50)
                    .HasColumnName("PCT_STATE")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ProdType)
                    .HasColumnName("PROD_TYPE")
                    .HasComment("Product type");

                entity.Property(e => e.SendBcty)
                    .HasMaxLength(50)
                    .HasColumnName("SEND_BCTY")
                    .HasDefaultValueSql("('')")
                    .HasComment("Sender bank country");

                entity.Property(e => e.SendBic)
                    .HasMaxLength(50)
                    .HasColumnName("SEND_BIC")
                    .HasDefaultValueSql("('')")
                    .HasComment("Sender bank BIC");

                entity.Property(e => e.SendBname)
                    .HasMaxLength(50)
                    .HasColumnName("SEND_BNAME")
                    .HasDefaultValueSql("('')")
                    .HasComment("Sender bank name");

                entity.Property(e => e.SendCty)
                    .HasMaxLength(50)
                    .HasColumnName("SEND_CTY")
                    .HasDefaultValueSql("('')")
                    .HasComment("Sender country");

                entity.Property(e => e.SendName)
                    .HasMaxLength(150)
                    .HasColumnName("SEND_NAME")
                    .HasDefaultValueSql("('')")
                    .HasComment("Sender name");

                entity.Property(e => e.SendRelay)
                    .HasMaxLength(50)
                    .HasColumnName("SEND_RELAY")
                    .HasDefaultValueSql("('')")
                    .HasComment("Sender relationship");

                entity.Property(e => e.SendSwift)
                    .HasMaxLength(50)
                    .HasColumnName("SEND_SWIFT")
                    .HasDefaultValueSql("('')")
                    .HasComment("Sender bank swift code");

                entity.Property(e => e.SeqAuto)
                    .HasColumnName("SEQ_AUTO")
                    .HasComment("SEQ_AUTO from TXN_DAILY");

                entity.Property(e => e.SprodType)
                    .HasColumnName("SPROD_TYPE")
                    .HasComment("Sub product type");

                entity.Property(e => e.TranChan)
                    .HasMaxLength(50)
                    .HasColumnName("TRAN_CHAN")
                    .HasDefaultValueSql("('')")
                    .HasComment("Transaction channel");

                entity.Property(e => e.TranCode1)
                    .HasMaxLength(50)
                    .HasColumnName("TRAN_CODE1")
                    .HasDefaultValueSql("('')")
                    .HasComment("Auxiliary txn code");

                entity.Property(e => e.TranCode2)
                    .HasMaxLength(50)
                    .HasColumnName("TRAN_CODE2")
                    .HasDefaultValueSql("('')")
                    .HasComment("Txn code");

                entity.Property(e => e.TranDate)
                    .HasColumnName("TRAN_DATE")
                    .HasComment("Transaction date");

                entity.Property(e => e.TranLoc)
                    .HasMaxLength(50)
                    .HasColumnName("TRAN_LOC")
                    .HasDefaultValueSql("('')")
                    .HasComment("Transaction location");

                entity.Property(e => e.TranNo)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("TRAN_NO")
                    .HasDefaultValueSql("((0))")
                    .HasComment("Transaction number");

                entity.Property(e => e.TranPdate)
                    .HasColumnName("TRAN_PDATE")
                    .HasComment("Posting date");

                entity.Property(e => e.TranPurpose)
                    .HasMaxLength(50)
                    .HasColumnName("TRAN_PURPOSE")
                    .HasDefaultValueSql("('')")
                    .HasComment("Transaction purpose");

                entity.Property(e => e.TranRef)
                    .HasMaxLength(50)
                    .HasColumnName("TRAN_REF")
                    .HasDefaultValueSql("('')")
                    .HasComment("Transaction reference number");

                entity.Property(e => e.TranStatus)
                    .HasColumnName("TRAN_STATUS")
                    .HasComment("Transaction status");

                entity.Property(e => e.TranType)
                    .HasMaxLength(10)
                    .HasColumnName("TRAN_TYPE")
                    .HasDefaultValueSql("('')")
                    .HasComment("Transaction type");

                entity.Property(e => e.TranVdate).HasColumnName("TRAN_VDATE");

                entity.Property(e => e.UnitPrice).HasColumnName("UNIT_PRICE");

                entity.Property(e => e.UnitRate).HasColumnName("UNIT_RATE");

                entity.Property(e => e.UnitVal).HasColumnName("UNIT_VAL");
            });

            modelBuilder.Entity<TxnOverview>(entity =>
            {
                entity.HasKey(e => new { e.CodeComp, e.CodeOrg, e.NoCif, e.Year, e.Month, e.Week });

                entity.ToTable("TXN_OVERVIEW");

                entity.Property(e => e.CodeComp)
                    .HasColumnName("CODE_COMP")
                    .HasComment("Company Code");

                entity.Property(e => e.CodeOrg)
                    .HasColumnName("CODE_ORG")
                    .HasComment("Organization Code");

                entity.Property(e => e.NoCif)
                    .HasMaxLength(50)
                    .HasColumnName("NO_CIF")
                    .HasDefaultValueSql("('')")
                    .HasComment("CIF number");

                entity.Property(e => e.Year).HasColumnName("YEAR");

                entity.Property(e => e.Month).HasColumnName("MONTH");

                entity.Property(e => e.Week).HasColumnName("WEEK");

                entity.Property(e => e.AmtCr).HasColumnName("AMT_CR");

                entity.Property(e => e.AmtDr).HasColumnName("AMT_DR");

                entity.Property(e => e.AuditCreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("AUDIT_CREATED_DATE");

                entity.Property(e => e.AuditCreatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_CREATED_USER")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.BatchDate).HasColumnName("BATCH_DATE");

                entity.Property(e => e.BatchNo)
                    .HasMaxLength(15)
                    .HasColumnName("BATCH_NO")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TxnCountCr).HasColumnName("TXN_COUNT_CR");

                entity.Property(e => e.TxnCountDr).HasColumnName("TXN_COUNT_DR");
            });

            modelBuilder.Entity<TxnReportMisc>(entity =>
            {
                entity.HasKey(e => new { e.CompCode, e.AlertId, e.RptType, e.SeqNo })
                    .HasName("PK_txnReportMisc_1");

                entity.ToTable("TxnReportMisc");

                entity.Property(e => e.CompCode)
                    .HasColumnName("COMP_CODE")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.AlertId).HasColumnName("ALERT_ID");

                entity.Property(e => e.RptType)
                    .HasColumnName("RPT_TYPE")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.SeqNo)
                    .HasColumnName("SEQ_NO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.AcctBr)
                    .HasMaxLength(20)
                    .HasColumnName("ACCT_BR")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.AlertBr)
                    .HasMaxLength(20)
                    .HasColumnName("ALERT_BR")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ApprovalStatus)
                    .HasColumnName("APPROVAL_STATUS")
                    .HasDefaultValueSql("((9))");

                entity.Property(e => e.ClosedBy)
                    .HasMaxLength(30)
                    .HasColumnName("CLOSED_BY");

                entity.Property(e => e.CompletedInd).HasColumnName("COMPLETED_IND");

                entity.Property(e => e.CreatedDate).HasColumnName("CREATED_DATE");

                entity.Property(e => e.CreatedUserId)
                    .HasMaxLength(30)
                    .HasColumnName("CREATED_USER_ID");

                entity.Property(e => e.CreditDebit)
                    .HasColumnName("CREDIT_DEBIT")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.DateExported).HasColumnName("DATE_EXPORTED");

                entity.Property(e => e.ExportedBy)
                    .HasMaxLength(30)
                    .HasColumnName("EXPORTED_BY");

                entity.Property(e => e.FinsRefNo)
                    .HasMaxLength(30)
                    .HasColumnName("FINS_REF_NO");

                entity.Property(e => e.FinsSubmitDate).HasColumnName("FINS_SUBMIT_DATE");

                entity.Property(e => e.FinsSubmitTime).HasColumnName("FINS_SUBMIT_TIME");

                entity.Property(e => e.ForeignAmount).HasColumnName("FOREIGN_AMOUNT");

                entity.Property(e => e.FxRate).HasColumnName("FX_RATE");

                entity.Property(e => e.HitTranAutoId).HasColumnName("HIT_TRAN_AUTO_ID");

                entity.Property(e => e.HitTranhistAutoId)
                    .HasColumnName("HIT_TRANHIST_AUTO_ID")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.LocalCurrency)
                    .HasMaxLength(8)
                    .HasColumnName("LOCAL_CURRENCY");

                entity.Property(e => e.Mfield01).HasColumnName("MFIELD01");

                entity.Property(e => e.Mfield02)
                    .HasMaxLength(1500)
                    .HasColumnName("MFIELD02");

                entity.Property(e => e.ModifiedDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("MODIFIED_DATE");

                entity.Property(e => e.ModifiedUserId)
                    .HasMaxLength(30)
                    .HasColumnName("MODIFIED_USER_ID");

                entity.Property(e => e.ParticipantType)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("PARTICIPANT_TYPE")
                    .HasDefaultValueSql("(N'0')");

                entity.Property(e => e.ReportAmendedPrev)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("REPORT_AMENDED_PREV")
                    .HasDefaultValueSql("(N'false')");

                entity.Property(e => e.ReportIndentifier)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("REPORT_INDENTIFIER")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ReportPrDate).HasColumnName("REPORT_PR_DATE");

                entity.Property(e => e.ReportTxDate).HasColumnName("REPORT_TX_DATE");

                entity.Property(e => e.ReportingEntityId)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("REPORTING_ENTITY_ID")
                    .HasDefaultValueSql("(N'NA')");

                entity.Property(e => e.StrCloseDt).HasColumnName("STR_CLOSE_DT");

                entity.Property(e => e.StrCloseDttm)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("STR_CLOSE_DTTM");

                entity.Property(e => e.Tfield01)
                    .HasMaxLength(100)
                    .HasColumnName("TFIELD01");

                entity.Property(e => e.Tfield02)
                    .HasMaxLength(100)
                    .HasColumnName("TFIELD02");

                entity.Property(e => e.Tfield03)
                    .HasMaxLength(100)
                    .HasColumnName("TFIELD03");

                entity.Property(e => e.Tfield04)
                    .HasMaxLength(100)
                    .HasColumnName("TFIELD04");

                entity.Property(e => e.Tfield05)
                    .HasMaxLength(100)
                    .HasColumnName("TFIELD05");

                entity.Property(e => e.Tfield06)
                    .HasMaxLength(100)
                    .HasColumnName("TFIELD06");

                entity.Property(e => e.Tfield07)
                    .HasMaxLength(100)
                    .HasColumnName("TFIELD07");

                entity.Property(e => e.Tfield08)
                    .HasMaxLength(100)
                    .HasColumnName("TFIELD08");

                entity.Property(e => e.Tfield09)
                    .HasMaxLength(100)
                    .HasColumnName("TFIELD09");

                entity.Property(e => e.Tfield10)
                    .HasMaxLength(100)
                    .HasColumnName("TFIELD10");

                entity.Property(e => e.Tfield100)
                    .HasMaxLength(100)
                    .HasColumnName("TFIELD100");

                entity.Property(e => e.Tfield101)
                    .HasMaxLength(100)
                    .HasColumnName("TFIELD101");

                entity.Property(e => e.Tfield102)
                    .HasMaxLength(100)
                    .HasColumnName("TFIELD102");

                entity.Property(e => e.Tfield103)
                    .HasMaxLength(100)
                    .HasColumnName("TFIELD103");

                entity.Property(e => e.Tfield104)
                    .HasMaxLength(100)
                    .HasColumnName("TFIELD104");

                entity.Property(e => e.Tfield105)
                    .HasMaxLength(100)
                    .HasColumnName("TFIELD105");

                entity.Property(e => e.Tfield106)
                    .HasMaxLength(100)
                    .HasColumnName("TFIELD106");

                entity.Property(e => e.Tfield107)
                    .HasMaxLength(100)
                    .HasColumnName("TFIELD107");

                entity.Property(e => e.Tfield108)
                    .HasMaxLength(100)
                    .HasColumnName("TFIELD108");

                entity.Property(e => e.Tfield109)
                    .HasMaxLength(100)
                    .HasColumnName("TFIELD109");

                entity.Property(e => e.Tfield11)
                    .HasMaxLength(100)
                    .HasColumnName("TFIELD11");

                entity.Property(e => e.Tfield110)
                    .HasMaxLength(100)
                    .HasColumnName("TFIELD110");

                entity.Property(e => e.Tfield111)
                    .HasMaxLength(100)
                    .HasColumnName("TFIELD111");

                entity.Property(e => e.Tfield112)
                    .HasMaxLength(100)
                    .HasColumnName("TFIELD112");

                entity.Property(e => e.Tfield113)
                    .HasMaxLength(100)
                    .HasColumnName("TFIELD113");

                entity.Property(e => e.Tfield114)
                    .HasMaxLength(100)
                    .HasColumnName("TFIELD114");

                entity.Property(e => e.Tfield115)
                    .HasMaxLength(100)
                    .HasColumnName("TFIELD115");

                entity.Property(e => e.Tfield116)
                    .HasMaxLength(100)
                    .HasColumnName("TFIELD116");

                entity.Property(e => e.Tfield117)
                    .HasMaxLength(100)
                    .HasColumnName("TFIELD117");

                entity.Property(e => e.Tfield118)
                    .HasMaxLength(100)
                    .HasColumnName("TFIELD118");

                entity.Property(e => e.Tfield119)
                    .HasMaxLength(100)
                    .HasColumnName("TFIELD119");

                entity.Property(e => e.Tfield12)
                    .HasMaxLength(100)
                    .HasColumnName("TFIELD12");

                entity.Property(e => e.Tfield120)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("TFIELD120");

                entity.Property(e => e.Tfield13)
                    .HasMaxLength(100)
                    .HasColumnName("TFIELD13");

                entity.Property(e => e.Tfield14)
                    .HasMaxLength(100)
                    .HasColumnName("TFIELD14");

                entity.Property(e => e.Tfield15)
                    .HasMaxLength(100)
                    .HasColumnName("TFIELD15");

                entity.Property(e => e.Tfield16)
                    .HasMaxLength(100)
                    .HasColumnName("TFIELD16");

                entity.Property(e => e.Tfield17)
                    .HasMaxLength(100)
                    .HasColumnName("TFIELD17");

                entity.Property(e => e.Tfield18)
                    .HasMaxLength(100)
                    .HasColumnName("TFIELD18");

                entity.Property(e => e.Tfield19)
                    .HasMaxLength(100)
                    .HasColumnName("TFIELD19");

                entity.Property(e => e.Tfield20)
                    .HasMaxLength(100)
                    .HasColumnName("TFIELD20");

                entity.Property(e => e.Tfield21)
                    .HasMaxLength(100)
                    .HasColumnName("TFIELD21");

                entity.Property(e => e.Tfield22)
                    .HasMaxLength(100)
                    .HasColumnName("TFIELD22");

                entity.Property(e => e.Tfield23)
                    .HasMaxLength(100)
                    .HasColumnName("TFIELD23");

                entity.Property(e => e.Tfield24)
                    .HasMaxLength(100)
                    .HasColumnName("TFIELD24");

                entity.Property(e => e.Tfield25)
                    .HasMaxLength(100)
                    .HasColumnName("TFIELD25");

                entity.Property(e => e.Tfield26)
                    .HasMaxLength(100)
                    .HasColumnName("TFIELD26");

                entity.Property(e => e.Tfield27)
                    .HasMaxLength(100)
                    .HasColumnName("TFIELD27");

                entity.Property(e => e.Tfield28)
                    .HasMaxLength(100)
                    .HasColumnName("TFIELD28");

                entity.Property(e => e.Tfield29)
                    .HasMaxLength(100)
                    .HasColumnName("TFIELD29");

                entity.Property(e => e.Tfield30)
                    .HasMaxLength(100)
                    .HasColumnName("TFIELD30");

                entity.Property(e => e.Tfield31)
                    .HasMaxLength(100)
                    .HasColumnName("TFIELD31");

                entity.Property(e => e.Tfield32)
                    .HasMaxLength(100)
                    .HasColumnName("TFIELD32");

                entity.Property(e => e.Tfield33)
                    .HasMaxLength(100)
                    .HasColumnName("TFIELD33");

                entity.Property(e => e.Tfield34)
                    .HasMaxLength(100)
                    .HasColumnName("TFIELD34");

                entity.Property(e => e.Tfield35)
                    .HasMaxLength(100)
                    .HasColumnName("TFIELD35");

                entity.Property(e => e.Tfield36)
                    .HasMaxLength(100)
                    .HasColumnName("TFIELD36");

                entity.Property(e => e.Tfield37)
                    .HasMaxLength(100)
                    .HasColumnName("TFIELD37");

                entity.Property(e => e.Tfield38)
                    .HasMaxLength(100)
                    .HasColumnName("TFIELD38");

                entity.Property(e => e.Tfield39)
                    .HasMaxLength(100)
                    .HasColumnName("TFIELD39");

                entity.Property(e => e.Tfield40)
                    .HasMaxLength(100)
                    .HasColumnName("TFIELD40");

                entity.Property(e => e.Tfield41)
                    .HasMaxLength(100)
                    .HasColumnName("TFIELD41");

                entity.Property(e => e.Tfield42)
                    .HasMaxLength(100)
                    .HasColumnName("TFIELD42");

                entity.Property(e => e.Tfield43)
                    .HasMaxLength(100)
                    .HasColumnName("TFIELD43");

                entity.Property(e => e.Tfield44)
                    .HasMaxLength(100)
                    .HasColumnName("TFIELD44");

                entity.Property(e => e.Tfield45)
                    .HasMaxLength(100)
                    .HasColumnName("TFIELD45");

                entity.Property(e => e.Tfield46)
                    .HasMaxLength(100)
                    .HasColumnName("TFIELD46");

                entity.Property(e => e.Tfield47)
                    .HasMaxLength(100)
                    .HasColumnName("TFIELD47");

                entity.Property(e => e.Tfield48)
                    .HasMaxLength(100)
                    .HasColumnName("TFIELD48");

                entity.Property(e => e.Tfield49)
                    .HasMaxLength(100)
                    .HasColumnName("TFIELD49");

                entity.Property(e => e.Tfield50)
                    .HasMaxLength(256)
                    .HasColumnName("TFIELD50");

                entity.Property(e => e.Tfield51)
                    .HasMaxLength(100)
                    .HasColumnName("TFIELD51");

                entity.Property(e => e.Tfield52)
                    .HasMaxLength(100)
                    .HasColumnName("TFIELD52");

                entity.Property(e => e.Tfield53)
                    .HasMaxLength(100)
                    .HasColumnName("TFIELD53");

                entity.Property(e => e.Tfield54)
                    .HasMaxLength(100)
                    .HasColumnName("TFIELD54");

                entity.Property(e => e.Tfield55)
                    .HasMaxLength(100)
                    .HasColumnName("TFIELD55");

                entity.Property(e => e.Tfield56)
                    .HasMaxLength(100)
                    .HasColumnName("TFIELD56");

                entity.Property(e => e.Tfield57)
                    .HasMaxLength(100)
                    .HasColumnName("TFIELD57");

                entity.Property(e => e.Tfield58)
                    .HasMaxLength(100)
                    .HasColumnName("TFIELD58");

                entity.Property(e => e.Tfield59)
                    .HasMaxLength(100)
                    .HasColumnName("TFIELD59");

                entity.Property(e => e.Tfield60)
                    .HasMaxLength(100)
                    .HasColumnName("TFIELD60");

                entity.Property(e => e.Tfield61)
                    .HasMaxLength(100)
                    .HasColumnName("TFIELD61");

                entity.Property(e => e.Tfield62)
                    .HasMaxLength(100)
                    .HasColumnName("TFIELD62");

                entity.Property(e => e.Tfield63)
                    .HasMaxLength(100)
                    .HasColumnName("TFIELD63");

                entity.Property(e => e.Tfield64)
                    .HasMaxLength(100)
                    .HasColumnName("TFIELD64");

                entity.Property(e => e.Tfield65)
                    .HasMaxLength(100)
                    .HasColumnName("TFIELD65");

                entity.Property(e => e.Tfield66)
                    .HasMaxLength(100)
                    .HasColumnName("TFIELD66");

                entity.Property(e => e.Tfield67)
                    .HasMaxLength(100)
                    .HasColumnName("TFIELD67");

                entity.Property(e => e.Tfield68)
                    .HasMaxLength(100)
                    .HasColumnName("TFIELD68");

                entity.Property(e => e.Tfield69)
                    .HasMaxLength(100)
                    .HasColumnName("TFIELD69");

                entity.Property(e => e.Tfield70)
                    .HasMaxLength(100)
                    .HasColumnName("TFIELD70");

                entity.Property(e => e.Tfield71)
                    .HasMaxLength(100)
                    .HasColumnName("TFIELD71");

                entity.Property(e => e.Tfield72)
                    .HasMaxLength(100)
                    .HasColumnName("TFIELD72");

                entity.Property(e => e.Tfield73)
                    .HasMaxLength(100)
                    .HasColumnName("TFIELD73");

                entity.Property(e => e.Tfield74)
                    .HasMaxLength(100)
                    .HasColumnName("TFIELD74");

                entity.Property(e => e.Tfield75)
                    .HasMaxLength(100)
                    .HasColumnName("TFIELD75");

                entity.Property(e => e.Tfield76)
                    .HasMaxLength(100)
                    .HasColumnName("TFIELD76");

                entity.Property(e => e.Tfield77)
                    .HasMaxLength(100)
                    .HasColumnName("TFIELD77");

                entity.Property(e => e.Tfield78)
                    .HasMaxLength(100)
                    .HasColumnName("TFIELD78");

                entity.Property(e => e.Tfield79)
                    .HasMaxLength(100)
                    .HasColumnName("TFIELD79");

                entity.Property(e => e.Tfield80)
                    .HasMaxLength(100)
                    .HasColumnName("TFIELD80");

                entity.Property(e => e.Tfield81)
                    .HasMaxLength(100)
                    .HasColumnName("TFIELD81");

                entity.Property(e => e.Tfield82)
                    .HasMaxLength(100)
                    .HasColumnName("TFIELD82");

                entity.Property(e => e.Tfield83)
                    .HasMaxLength(100)
                    .HasColumnName("TFIELD83");

                entity.Property(e => e.Tfield84)
                    .HasMaxLength(100)
                    .HasColumnName("TFIELD84");

                entity.Property(e => e.Tfield85)
                    .HasMaxLength(100)
                    .HasColumnName("TFIELD85");

                entity.Property(e => e.Tfield86)
                    .HasMaxLength(100)
                    .HasColumnName("TFIELD86");

                entity.Property(e => e.Tfield87)
                    .HasMaxLength(100)
                    .HasColumnName("TFIELD87");

                entity.Property(e => e.Tfield88)
                    .HasMaxLength(100)
                    .HasColumnName("TFIELD88");

                entity.Property(e => e.Tfield89)
                    .HasMaxLength(100)
                    .HasColumnName("TFIELD89");

                entity.Property(e => e.Tfield90)
                    .HasMaxLength(100)
                    .HasColumnName("TFIELD90");

                entity.Property(e => e.Tfield91)
                    .HasMaxLength(100)
                    .HasColumnName("TFIELD91");

                entity.Property(e => e.Tfield92)
                    .HasMaxLength(100)
                    .HasColumnName("TFIELD92");

                entity.Property(e => e.Tfield93)
                    .HasMaxLength(100)
                    .HasColumnName("TFIELD93");

                entity.Property(e => e.Tfield94)
                    .HasMaxLength(100)
                    .HasColumnName("TFIELD94");

                entity.Property(e => e.Tfield95)
                    .HasMaxLength(100)
                    .HasColumnName("TFIELD95");

                entity.Property(e => e.Tfield96)
                    .HasMaxLength(100)
                    .HasColumnName("TFIELD96");

                entity.Property(e => e.Tfield97)
                    .HasMaxLength(100)
                    .HasColumnName("TFIELD97");

                entity.Property(e => e.Tfield98)
                    .HasMaxLength(100)
                    .HasColumnName("TFIELD98");

                entity.Property(e => e.Tfield99)
                    .HasMaxLength(100)
                    .HasColumnName("TFIELD99");

                entity.Property(e => e.TranAmount).HasColumnName("TRAN_AMOUNT");

                entity.Property(e => e.TranCode)
                    .HasMaxLength(8)
                    .HasColumnName("TRAN_CODE");

                entity.Property(e => e.TranDate).HasColumnName("TRAN_DATE");
            });

            modelBuilder.Entity<VwEsSsResult>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_ES_SS_RESULTS");

                entity.Property(e => e.AccountNo)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("ACCOUNT_NO");

                entity.Property(e => e.Category)
                    .HasMaxLength(500)
                    .HasColumnName("CATEGORY");

                entity.Property(e => e.Category1)
                    .HasMaxLength(500)
                    .HasColumnName("CATEGORY1");

                entity.Property(e => e.Category2)
                    .HasMaxLength(150)
                    .HasColumnName("CATEGORY2");

                entity.Property(e => e.CategoryFilter)
                    .HasMaxLength(500)
                    .HasColumnName("CATEGORY_FILTER");

                entity.Property(e => e.CifNo)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("CIF_NO");

                entity.Property(e => e.ClientCountry)
                    .HasMaxLength(200)
                    .HasColumnName("CLIENT_COUNTRY");

                entity.Property(e => e.ClientDob)
                    .HasMaxLength(50)
                    .HasColumnName("CLIENT_DOB");

                entity.Property(e => e.ClientGender)
                    .HasMaxLength(50)
                    .HasColumnName("CLIENT_GENDER");

                entity.Property(e => e.ClientName)
                    .HasMaxLength(1000)
                    .HasColumnName("CLIENT_NAME");

                entity.Property(e => e.ClientType)
                    .HasMaxLength(50)
                    .HasColumnName("CLIENT_TYPE");

                entity.Property(e => e.ConfidenceScore).HasColumnName("CONFIDENCE_SCORE");

                entity.Property(e => e.Country)
                    .HasMaxLength(4000)
                    .HasColumnName("COUNTRY");

                entity.Property(e => e.Dob)
                    .HasMaxLength(500)
                    .HasColumnName("DOB");

                entity.Property(e => e.EntityId)
                    .HasMaxLength(30)
                    .HasColumnName("ENTITY_ID");

                entity.Property(e => e.EntityType)
                    .HasMaxLength(50)
                    .HasColumnName("ENTITY_TYPE");

                entity.Property(e => e.Gender)
                    .HasMaxLength(50)
                    .HasColumnName("GENDER");

                entity.Property(e => e.InfoSource)
                    .HasMaxLength(50)
                    .HasColumnName("INFO_SOURCE");

                entity.Property(e => e.Match)
                    .HasMaxLength(50)
                    .HasColumnName("MATCH");

                entity.Property(e => e.NameType)
                    .HasMaxLength(255)
                    .HasColumnName("NAME_TYPE");

                entity.Property(e => e.Namesource)
                    .HasMaxLength(50)
                    .HasColumnName("NAMESOURCE");

                entity.Property(e => e.OriginalScriptName)
                    .HasMaxLength(500)
                    .HasColumnName("ORIGINAL_SCRIPT_NAME");

                entity.Property(e => e.Sanction)
                    .HasMaxLength(1024)
                    .HasColumnName("SANCTION");

                entity.Property(e => e.SanctionFilter)
                    .HasMaxLength(1024)
                    .HasColumnName("SANCTION_FILTER");

                entity.Property(e => e.SingleStringName2)
                    .HasMaxLength(500)
                    .HasColumnName("SINGLE_STRING_NAME2");

                entity.Property(e => e.SingleStringName3)
                    .HasMaxLength(2000)
                    .HasColumnName("SINGLE_STRING_NAME3");

                entity.Property(e => e.SysId)
                    .HasMaxLength(100)
                    .HasColumnName("SYS_ID");
            });

            modelBuilder.Entity<VwEsSsResultsCifacc>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_ES_SS_RESULTS_CIFACC");

                entity.Property(e => e.AccountNo)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("ACCOUNT_NO");

                entity.Property(e => e.CategoryFilter)
                    .HasMaxLength(500)
                    .HasColumnName("CATEGORY_FILTER");

                entity.Property(e => e.CifNo)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("CIF_NO");

                entity.Property(e => e.ClientCountry)
                    .HasMaxLength(200)
                    .HasColumnName("CLIENT_COUNTRY");

                entity.Property(e => e.ClientDob)
                    .HasMaxLength(50)
                    .HasColumnName("CLIENT_DOB");

                entity.Property(e => e.ClientGender)
                    .HasMaxLength(50)
                    .HasColumnName("CLIENT_GENDER");

                entity.Property(e => e.ClientName)
                    .HasMaxLength(1000)
                    .HasColumnName("CLIENT_NAME");

                entity.Property(e => e.ClientType)
                    .HasMaxLength(50)
                    .HasColumnName("CLIENT_TYPE");

                entity.Property(e => e.Id1No)
                    .HasMaxLength(50)
                    .HasColumnName("ID1_NO");

                entity.Property(e => e.SanctionFilter)
                    .HasMaxLength(1024)
                    .HasColumnName("SANCTION_FILTER");
            });

            modelBuilder.Entity<VwEsWlResult>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_ES_WL_RESULTS");

                entity.Property(e => e.AccountNo)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("ACCOUNT_NO");

                entity.Property(e => e.BrCode)
                    .HasMaxLength(50)
                    .HasColumnName("BR_CODE");

                entity.Property(e => e.Category)
                    .HasMaxLength(500)
                    .HasColumnName("CATEGORY");

                entity.Property(e => e.Category1)
                    .HasMaxLength(500)
                    .HasColumnName("CATEGORY1");

                entity.Property(e => e.Category2)
                    .HasMaxLength(150)
                    .HasColumnName("CATEGORY2");

                entity.Property(e => e.CifNo)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("CIF_NO");

                entity.Property(e => e.ClientCountry)
                    .HasMaxLength(200)
                    .HasColumnName("CLIENT_COUNTRY");

                entity.Property(e => e.ClientDob)
                    .HasMaxLength(50)
                    .HasColumnName("CLIENT_DOB");

                entity.Property(e => e.ClientGender)
                    .HasMaxLength(50)
                    .HasColumnName("CLIENT_GENDER");

                entity.Property(e => e.ClientName)
                    .HasMaxLength(50)
                    .HasColumnName("CLIENT_NAME");

                entity.Property(e => e.ClientType)
                    .HasMaxLength(50)
                    .HasColumnName("CLIENT_TYPE");

                entity.Property(e => e.ConfidenceScore).HasColumnName("CONFIDENCE_SCORE");

                entity.Property(e => e.DocRef)
                    .HasMaxLength(30)
                    .HasColumnName("DOC_REF");

                entity.Property(e => e.EntityId)
                    .HasMaxLength(30)
                    .HasColumnName("ENTITY_ID");

                entity.Property(e => e.EntityType)
                    .HasMaxLength(50)
                    .HasColumnName("ENTITY_TYPE");

                entity.Property(e => e.InfoSource)
                    .HasMaxLength(50)
                    .HasColumnName("INFO_SOURCE");

                entity.Property(e => e.Match)
                    .HasMaxLength(50)
                    .HasColumnName("MATCH");

                entity.Property(e => e.NameType)
                    .HasMaxLength(255)
                    .HasColumnName("NAME_TYPE");

                entity.Property(e => e.Namesource)
                    .HasMaxLength(50)
                    .HasColumnName("NAMESOURCE");

                entity.Property(e => e.OriginalScriptName)
                    .HasMaxLength(500)
                    .HasColumnName("ORIGINAL_SCRIPT_NAME");

                entity.Property(e => e.ProductCode)
                    .HasMaxLength(10)
                    .HasColumnName("PRODUCT_CODE");

                entity.Property(e => e.Sanction)
                    .HasMaxLength(1024)
                    .HasColumnName("SANCTION");

                entity.Property(e => e.SingleStringName2)
                    .HasMaxLength(500)
                    .HasColumnName("SINGLE_STRING_NAME2");

                entity.Property(e => e.SingleStringName3)
                    .HasMaxLength(2000)
                    .HasColumnName("SINGLE_STRING_NAME3");

                entity.Property(e => e.Status)
                    .HasMaxLength(50)
                    .HasColumnName("STATUS");

                entity.Property(e => e.SysId)
                    .HasMaxLength(100)
                    .HasColumnName("SYS_ID");

                entity.Property(e => e.TableNameUsed)
                    .HasMaxLength(50)
                    .HasColumnName("TABLE_NAME_USED");

                entity.Property(e => e.WlCountry)
                    .HasMaxLength(4000)
                    .HasColumnName("WL_COUNTRY");

                entity.Property(e => e.WlDob)
                    .HasMaxLength(500)
                    .HasColumnName("WL_DOB");

                entity.Property(e => e.WlGender)
                    .HasMaxLength(50)
                    .HasColumnName("WL_GENDER");
            });

            modelBuilder.Entity<VwEsWlResultsCifacc>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_ES_WL_RESULTS_CIFACC");

                entity.Property(e => e.AccountNo)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("ACCOUNT_NO");

                entity.Property(e => e.CifNo)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("CIF_NO");

                entity.Property(e => e.ClientCountry)
                    .HasMaxLength(200)
                    .HasColumnName("CLIENT_COUNTRY");

                entity.Property(e => e.ClientDob)
                    .HasMaxLength(50)
                    .HasColumnName("CLIENT_DOB");

                entity.Property(e => e.ClientGender)
                    .HasMaxLength(50)
                    .HasColumnName("CLIENT_GENDER");

                entity.Property(e => e.ClientName)
                    .HasMaxLength(50)
                    .HasColumnName("CLIENT_NAME");

                entity.Property(e => e.ClientType)
                    .HasMaxLength(50)
                    .HasColumnName("CLIENT_TYPE");

                entity.Property(e => e.Id1No)
                    .HasMaxLength(50)
                    .HasColumnName("ID1_NO");
            });

            modelBuilder.Entity<Watchlistalgorithm>(entity =>
            {
                entity.HasKey(e => new { e.CompCode, e.WlAlgo });

                entity.ToTable("WATCHLISTALGORITHM");

                entity.Property(e => e.CompCode)
                    .HasColumnName("COMP_CODE")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.WlAlgo).HasColumnName("WL_ALGO");

                entity.Property(e => e.BooleanFieldDesc)
                    .HasMaxLength(100)
                    .HasColumnName("BOOLEAN_FIELD_DESC");

                entity.Property(e => e.DispIconControl)
                    .HasMaxLength(10)
                    .HasColumnName("DISP_ICON_CONTROL");

                entity.Property(e => e.Enabled).HasColumnName("ENABLED");

                entity.Property(e => e.LinkPageId)
                    .HasMaxLength(50)
                    .HasColumnName("LINK_PAGE_ID");

                entity.Property(e => e.LinkTableFmt).HasColumnName("LINK_TABLE_FMT");

                entity.Property(e => e.LinkTableNo).HasColumnName("LINK_TABLE_NO");

                entity.Property(e => e.LinkTableType)
                    .HasMaxLength(20)
                    .HasColumnName("LINK_TABLE_TYPE");

                entity.Property(e => e.ModeMn)
                    .IsRequired()
                    .HasMaxLength(1)
                    .HasColumnName("MODE_MN")
                    .HasDefaultValueSql("(N'A')")
                    .HasComment("");

                entity.Property(e => e.NumericFieldDesc)
                    .HasMaxLength(100)
                    .HasColumnName("NUMERIC_FIELD_DESC");

                entity.Property(e => e.StampDttm)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("STAMP_DTTM");

                entity.Property(e => e.TextFieldDesc)
                    .HasMaxLength(100)
                    .HasColumnName("TEXT_FIELD_DESC");

                entity.Property(e => e.UserId)
                    .HasMaxLength(30)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.WlDesc)
                    .HasMaxLength(256)
                    .HasColumnName("WL_DESC")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.WlRmk)
                    .HasMaxLength(1000)
                    .HasColumnName("WL_RMK");
            });

            modelBuilder.Entity<Watchlistalgorithmcat>(entity =>
            {
                entity.HasKey(e => new { e.CompCode, e.CategoryType });

                entity.ToTable("WATCHLISTALGORITHMCAT");

                entity.Property(e => e.CompCode)
                    .HasColumnName("COMP_CODE")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.CategoryType)
                    .HasColumnName("CATEGORY_TYPE")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Cat1)
                    .HasMaxLength(1012)
                    .HasColumnName("CAT1");

                entity.Property(e => e.Cat2)
                    .HasMaxLength(1012)
                    .HasColumnName("CAT2");

                entity.Property(e => e.Cat3)
                    .HasMaxLength(1012)
                    .HasColumnName("CAT3");

                entity.Property(e => e.Cat4)
                    .HasMaxLength(2014)
                    .HasColumnName("CAT4");

                entity.Property(e => e.Cat5)
                    .HasMaxLength(2014)
                    .HasColumnName("CAT5");

                entity.Property(e => e.CatDesc)
                    .HasMaxLength(100)
                    .HasColumnName("CAT_DESC");

                entity.Property(e => e.ExcludedCat1).HasColumnName("EXCLUDED_CAT1");

                entity.Property(e => e.ExcludedCat2).HasColumnName("EXCLUDED_CAT2");

                entity.Property(e => e.ExcludedCat3).HasColumnName("EXCLUDED_CAT3");

                entity.Property(e => e.ExcludedCat4).HasColumnName("EXCLUDED_CAT4");

                entity.Property(e => e.ExcludedCat5).HasColumnName("EXCLUDED_CAT5");

                entity.Property(e => e.ModeMn)
                    .HasMaxLength(1)
                    .HasColumnName("MODE_MN")
                    .HasDefaultValueSql("(N'A')")
                    .HasComment("");

                entity.Property(e => e.StampDttm)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("STAMP_DTTM");

                entity.Property(e => e.UserId)
                    .HasMaxLength(30)
                    .HasColumnName("USER_ID");
            });

            modelBuilder.Entity<Watchlistalgorithmdtl>(entity =>
            {
                entity.HasKey(e => new { e.CompCode, e.WlAlgo, e.WlType, e.WlKey })
                    .HasName("PK_WATCHLISTALGORITHMDTL_1");

                entity.ToTable("WATCHLISTALGORITHMDTL");

                entity.Property(e => e.CompCode)
                    .HasColumnName("COMP_CODE")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.WlAlgo).HasColumnName("WL_ALGO");

                entity.Property(e => e.WlType)
                    .HasMaxLength(20)
                    .HasColumnName("WL_TYPE");

                entity.Property(e => e.WlKey)
                    .HasMaxLength(20)
                    .HasColumnName("WL_KEY");

                entity.Property(e => e.ApplyEditDistant)
                    .HasColumnName("APPLY_EDIT_DISTANT")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.BooleanValue).HasColumnName("BOOLEAN_VALUE");

                entity.Property(e => e.ModeMn)
                    .HasMaxLength(1)
                    .HasColumnName("MODE_MN")
                    .HasDefaultValueSql("(N'A')")
                    .HasComment("");

                entity.Property(e => e.NumericValue)
                    .HasColumnName("NUMERIC_VALUE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SetHitPercents).HasColumnName("SET_HIT_PERCENTS");

                entity.Property(e => e.ShowNoOfTopRec).HasColumnName("SHOW_NO_OF_TOP_REC");

                entity.Property(e => e.StampDttm)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("STAMP_DTTM");

                entity.Property(e => e.TextValue)
                    .HasMaxLength(100)
                    .HasColumnName("TEXT_VALUE");

                entity.Property(e => e.UserId)
                    .HasMaxLength(30)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.WlDtlDesc)
                    .HasMaxLength(256)
                    .HasColumnName("WL_DTL_DESC")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<Watchlistcountryrisk>(entity =>
            {
                entity.HasKey(e => new { e.CompCode, e.RiskType, e.HighRiskKey })
                    .HasName("PK_WATCHLISTHIGHRISK");

                entity.ToTable("WATCHLISTCOUNTRYRISK");

                entity.Property(e => e.CompCode)
                    .HasColumnName("COMP_CODE")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.RiskType).HasColumnName("RISK_TYPE");

                entity.Property(e => e.HighRiskKey)
                    .HasMaxLength(100)
                    .HasColumnName("HIGH_RISK_KEY");

                entity.Property(e => e.AuditCreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("AUDIT_CREATED_DATE")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.AuditCreatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_CREATED_USER")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AuditUpdatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("AUDIT_UPDATED_DATE");

                entity.Property(e => e.AuditUpdatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_UPDATED_USER")
                    .HasDefaultValueSql("('')")
                    .HasComment("User who updating");

                entity.Property(e => e.Category)
                    .HasMaxLength(50)
                    .HasColumnName("CATEGORY");

                entity.Property(e => e.CurrencyDescr)
                    .HasMaxLength(100)
                    .HasColumnName("CURRENCY_DESCR");

                entity.Property(e => e.DisplayOreder).HasColumnName("DISPLAY_OREDER");

                entity.Property(e => e.HighRiskScore1).HasColumnName("HIGH_RISK_SCORE1");

                entity.Property(e => e.HighRiskScore2).HasColumnName("HIGH_RISK_SCORE2");

                entity.Property(e => e.HighRiskScore3).HasColumnName("HIGH_RISK_SCORE3");

                entity.Property(e => e.HighRiskScore4).HasColumnName("HIGH_RISK_SCORE4");

                entity.Property(e => e.HighRiskScore5).HasColumnName("HIGH_RISK_SCORE5");

                entity.Property(e => e.IsoAlpha3)
                    .HasMaxLength(10)
                    .HasColumnName("ISO_ALPHA_3");

                entity.Property(e => e.IsoCurrCode)
                    .HasMaxLength(10)
                    .HasColumnName("ISO_CURR_CODE");

                entity.Property(e => e.IsoNumericCode)
                    .HasMaxLength(10)
                    .HasColumnName("ISO_NUMERIC_CODE");

                entity.Property(e => e.ModeMn)
                    .HasMaxLength(1)
                    .HasColumnName("MODE_MN")
                    .HasDefaultValueSql("(N'A')")
                    .HasComment("");

                entity.Property(e => e.RiskDescription)
                    .HasMaxLength(100)
                    .HasColumnName("RISK_DESCRIPTION");

                entity.Property(e => e.Status)
                    .HasColumnName("STATUS")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<Watchlistresultmatrix>(entity =>
            {
                entity.HasKey(e => new { e.CompCode, e.HitPercent });

                entity.ToTable("WATCHLISTRESULTMATRIX");

                entity.Property(e => e.CompCode)
                    .HasColumnName("COMP_CODE")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.HitPercent).HasColumnName("HIT_PERCENT");

                entity.Property(e => e.ModeMn)
                    .HasMaxLength(1)
                    .HasColumnName("MODE_MN")
                    .HasDefaultValueSql("(N'A')")
                    .HasComment("");

                entity.Property(e => e.RelGroup).HasColumnName("REL_GROUP");

                entity.Property(e => e.ShowRangeFr).HasColumnName("SHOW_RANGE_FR");

                entity.Property(e => e.ShowRangeFr1)
                    .HasColumnName("SHOW_RANGE_FR1")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ShowRangeTo).HasColumnName("SHOW_RANGE_TO");

                entity.Property(e => e.ShowRangeTo1).HasColumnName("SHOW_RANGE_TO1");

                entity.Property(e => e.ShowTopRec).HasColumnName("SHOW_TOP_REC");

                entity.Property(e => e.StampDttm)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("STAMP_DTTM");

                entity.Property(e => e.UserId)
                    .HasMaxLength(30)
                    .HasColumnName("USER_ID");
            });

            modelBuilder.Entity<Watchliststoplist>(entity =>
            {
                entity.HasKey(e => new { e.CompCode, e.AbbrValue })
                    .HasName("PK_ABBREVIATION");

                entity.ToTable("WATCHLISTSTOPLIST");

                entity.Property(e => e.CompCode)
                    .HasColumnName("COMP_CODE")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.AbbrValue)
                    .HasMaxLength(30)
                    .HasColumnName("ABBR_VALUE");

                entity.Property(e => e.AbbrReplacement)
                    .HasMaxLength(60)
                    .HasColumnName("ABBR_REPLACEMENT");

                entity.Property(e => e.ModeMn)
                    .HasMaxLength(1)
                    .HasColumnName("MODE_MN")
                    .HasDefaultValueSql("(N'A')")
                    .HasComment("");

                entity.Property(e => e.OrgDescription)
                    .HasMaxLength(60)
                    .HasColumnName("ORG_DESCRIPTION");

                entity.Property(e => e.StampDttm)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("STAMP_DTTM");

                entity.Property(e => e.Status).HasColumnName("STATUS");

                entity.Property(e => e.UserId)
                    .HasMaxLength(30)
                    .HasColumnName("USER_ID");
            });

            modelBuilder.Entity<Wcfwlhitapproval>(entity =>
            {
                entity.HasKey(e => new { e.CompCode, e.ScanNo });

                entity.ToTable("WCFWLHITAPPROVAL");

                entity.Property(e => e.CompCode)
                    .HasColumnName("COMP_CODE")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ScanNo).HasColumnName("SCAN_NO");

                entity.Property(e => e.AlertId).HasColumnName("ALERT_ID");

                entity.Property(e => e.ApprovalStatus).HasColumnName("APPROVAL_STATUS");

                entity.Property(e => e.ApprovalStatus1)
                    .HasColumnName("APPROVAL_STATUS1")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ApprovalStatus2).HasColumnName("APPROVAL_STATUS2");

                entity.Property(e => e.ApprovalStatus3)
                    .HasColumnName("APPROVAL_STATUS3")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ApprovedBy1)
                    .HasMaxLength(30)
                    .HasColumnName("APPROVED_BY1");

                entity.Property(e => e.ApprovedBy2)
                    .HasMaxLength(30)
                    .HasColumnName("APPROVED_BY2");

                entity.Property(e => e.ApprovedBy3)
                    .HasMaxLength(30)
                    .HasColumnName("APPROVED_BY3");

                entity.Property(e => e.ApprovedDt1).HasColumnName("APPROVED_DT1");

                entity.Property(e => e.ApprovedDt2)
                    .HasColumnName("APPROVED_DT2")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ApprovedDt3).HasColumnName("APPROVED_DT3");

                entity.Property(e => e.ApprovedTm1).HasColumnName("APPROVED_TM1");

                entity.Property(e => e.ApprovedTm2).HasColumnName("APPROVED_TM2");

                entity.Property(e => e.ApprovedTm3).HasColumnName("APPROVED_TM3");

                entity.Property(e => e.BrCode)
                    .HasMaxLength(20)
                    .HasColumnName("BR_CODE");

                entity.Property(e => e.CifId)
                    .HasMaxLength(30)
                    .HasColumnName("CIF_ID");

                entity.Property(e => e.DismissBrInd).HasColumnName("DISMISS_BR_IND");

                entity.Property(e => e.DismissInd).HasColumnName("DISMISS_IND");

                entity.Property(e => e.DismissInd2).HasColumnName("DISMISS_IND2");

                entity.Property(e => e.DoneUserId)
                    .HasMaxLength(35)
                    .HasColumnName("DONE_USER_ID");

                entity.Property(e => e.HitDate).HasColumnName("HIT_DATE");

                entity.Property(e => e.HitTime).HasColumnName("HIT_TIME");

                entity.Property(e => e.NoOfApprovalDone)
                    .HasColumnName("NO_OF_APPROVAL_DONE")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NoOfApprovalRequired).HasColumnName("NO_OF_APPROVAL_REQUIRED");

                entity.Property(e => e.NoOfRejectedDone).HasColumnName("NO_OF_REJECTED_DONE");

                entity.Property(e => e.ProductCode)
                    .HasMaxLength(8)
                    .HasColumnName("PRODUCT_CODE");

                entity.Property(e => e.Remarks)
                    .HasMaxLength(512)
                    .HasColumnName("REMARKS");

                entity.Property(e => e.ReturnOk).HasColumnName("RETURN_OK");

                entity.Property(e => e.RiskUsedInd)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("RISK_USED_IND")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.RjRemarks)
                    .HasMaxLength(512)
                    .HasColumnName("RJ_REMARKS")
                    .HasDefaultValueSql("(N'None')");

                entity.Property(e => e.ScanFullPartil)
                    .IsRequired()
                    .HasMaxLength(6)
                    .HasColumnName("SCAN_FULL_PARTIL")
                    .HasDefaultValueSql("(N'F')");

                entity.Property(e => e.ScanInput)
                    .HasMaxLength(300)
                    .HasColumnName("SCAN_INPUT");

                entity.Property(e => e.ScanType).HasColumnName("SCAN_TYPE");

                entity.Property(e => e.Sysname)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("SYSNAME");

                entity.Property(e => e.UploadFileName)
                    .HasMaxLength(150)
                    .HasColumnName("UPLOAD_FILE_NAME");

                entity.Property(e => e.UserId1)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("USER_ID1")
                    .HasDefaultValueSql("(N'None')");

                entity.Property(e => e.UserId2)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("USER_ID2")
                    .HasDefaultValueSql("(N'None')");

                entity.Property(e => e.UserId3)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("USER_ID3")
                    .HasDefaultValueSql("(N'None')");

                entity.Property(e => e.YourRef)
                    .HasMaxLength(30)
                    .HasColumnName("YOUR_REF");
            });

            modelBuilder.Entity<Wcfwlhitapprovallog>(entity =>
            {
                entity.HasKey(e => new { e.ScanNo, e.AutoSysId })
                    .HasName("PK_WCFWLHITEVENTLOG");

                entity.ToTable("WCFWLHITAPPROVALLOG");

                entity.Property(e => e.ScanNo).HasColumnName("SCAN_NO");

                entity.Property(e => e.AutoSysId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("AUTO_SYS_ID");

                entity.Property(e => e.ApprovalDate).HasColumnName("APPROVAL_DATE");

                entity.Property(e => e.ApprovalTime).HasColumnName("APPROVAL_TIME");

                entity.Property(e => e.ApprovalType)
                    .HasMaxLength(30)
                    .HasColumnName("APPROVAL_TYPE")
                    .HasDefaultValueSql("(N'Reject')");

                entity.Property(e => e.ApprovedBy)
                    .HasMaxLength(35)
                    .HasColumnName("APPROVED_BY");

                entity.Property(e => e.EstDate).HasColumnName("EST_DATE");

                entity.Property(e => e.Remark)
                    .HasMaxLength(2000)
                    .HasColumnName("REMARK");
            });

            modelBuilder.Entity<Wcfwlhitrisk>(entity =>
            {
                entity.HasKey(e => new { e.CodeComp, e.ScanNo, e.CodeOrg });

                entity.ToTable("WCFWLHITRISK");

                entity.Property(e => e.CodeComp)
                    .HasColumnName("CODE_COMP")
                    .HasComment("company code");

                entity.Property(e => e.ScanNo).HasColumnName("SCAN_NO");

                entity.Property(e => e.CodeOrg)
                    .HasColumnName("CODE_ORG")
                    .HasComment("organization code");

                entity.Property(e => e.RiskApprovalStatus)
                    .HasColumnName("RISK_APPROVAL_STATUS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.RiskCode1)
                    .HasMaxLength(30)
                    .HasColumnName("RISK_CODE1")
                    .HasDefaultValueSql("(N'NA')");

                entity.Property(e => e.RiskCode10)
                    .HasMaxLength(30)
                    .HasColumnName("RISK_CODE10")
                    .HasDefaultValueSql("('NA')");

                entity.Property(e => e.RiskCode11)
                    .HasMaxLength(30)
                    .HasColumnName("RISK_CODE11")
                    .HasDefaultValueSql("('NA')");

                entity.Property(e => e.RiskCode12)
                    .HasMaxLength(30)
                    .HasColumnName("RISK_CODE12")
                    .HasDefaultValueSql("('NA')");

                entity.Property(e => e.RiskCode13)
                    .HasMaxLength(30)
                    .HasColumnName("RISK_CODE13")
                    .HasDefaultValueSql("('NA')");

                entity.Property(e => e.RiskCode14)
                    .HasMaxLength(30)
                    .HasColumnName("RISK_CODE14")
                    .HasDefaultValueSql("('NA')");

                entity.Property(e => e.RiskCode15)
                    .HasMaxLength(30)
                    .HasColumnName("RISK_CODE15")
                    .HasDefaultValueSql("('NA')");

                entity.Property(e => e.RiskCode16)
                    .HasMaxLength(30)
                    .HasColumnName("RISK_CODE16")
                    .HasDefaultValueSql("('NA')");

                entity.Property(e => e.RiskCode17)
                    .HasMaxLength(30)
                    .HasColumnName("RISK_CODE17")
                    .HasDefaultValueSql("('NA')");

                entity.Property(e => e.RiskCode18)
                    .HasMaxLength(30)
                    .HasColumnName("RISK_CODE18")
                    .HasDefaultValueSql("('NA')");

                entity.Property(e => e.RiskCode19)
                    .HasMaxLength(30)
                    .HasColumnName("RISK_CODE19")
                    .HasDefaultValueSql("('NA')");

                entity.Property(e => e.RiskCode2)
                    .HasMaxLength(30)
                    .HasColumnName("RISK_CODE2")
                    .HasDefaultValueSql("(N'NA')");

                entity.Property(e => e.RiskCode20)
                    .HasMaxLength(30)
                    .HasColumnName("RISK_CODE20")
                    .HasDefaultValueSql("('NA')");

                entity.Property(e => e.RiskCode3)
                    .HasMaxLength(30)
                    .HasColumnName("RISK_CODE3")
                    .HasDefaultValueSql("(N'NA')");

                entity.Property(e => e.RiskCode4)
                    .HasMaxLength(30)
                    .HasColumnName("RISK_CODE4")
                    .HasDefaultValueSql("(N'NA')");

                entity.Property(e => e.RiskCode5)
                    .HasMaxLength(30)
                    .HasColumnName("RISK_CODE5")
                    .HasDefaultValueSql("(N'NA')");

                entity.Property(e => e.RiskCode6)
                    .HasMaxLength(30)
                    .HasColumnName("RISK_CODE6")
                    .HasDefaultValueSql("(N'NA')");

                entity.Property(e => e.RiskCode7)
                    .HasMaxLength(30)
                    .HasColumnName("RISK_CODE7")
                    .HasDefaultValueSql("(N'NA')");

                entity.Property(e => e.RiskCode8)
                    .HasMaxLength(30)
                    .HasColumnName("RISK_CODE8")
                    .HasDefaultValueSql("(N'NA')");

                entity.Property(e => e.RiskCode9)
                    .HasMaxLength(30)
                    .HasColumnName("RISK_CODE9")
                    .HasDefaultValueSql("(N'NA')");

                entity.Property(e => e.RiskFactor1)
                    .HasMaxLength(100)
                    .HasColumnName("RISK_FACTOR1")
                    .HasDefaultValueSql("(N'NA')");

                entity.Property(e => e.RiskFactor10)
                    .HasMaxLength(100)
                    .HasColumnName("RISK_FACTOR10")
                    .HasDefaultValueSql("('NA')");

                entity.Property(e => e.RiskFactor11)
                    .HasMaxLength(100)
                    .HasColumnName("RISK_FACTOR11")
                    .HasDefaultValueSql("('NA')");

                entity.Property(e => e.RiskFactor12)
                    .HasMaxLength(100)
                    .HasColumnName("RISK_FACTOR12")
                    .HasDefaultValueSql("('NA')");

                entity.Property(e => e.RiskFactor13)
                    .HasMaxLength(100)
                    .HasColumnName("RISK_FACTOR13")
                    .HasDefaultValueSql("('NA')");

                entity.Property(e => e.RiskFactor14)
                    .HasMaxLength(100)
                    .HasColumnName("RISK_FACTOR14")
                    .HasDefaultValueSql("('NA')");

                entity.Property(e => e.RiskFactor15)
                    .HasMaxLength(100)
                    .HasColumnName("RISK_FACTOR15")
                    .HasDefaultValueSql("('NA')");

                entity.Property(e => e.RiskFactor16)
                    .HasMaxLength(100)
                    .HasColumnName("RISK_FACTOR16")
                    .HasDefaultValueSql("('NA')");

                entity.Property(e => e.RiskFactor17)
                    .HasMaxLength(100)
                    .HasColumnName("RISK_FACTOR17")
                    .HasDefaultValueSql("('NA')");

                entity.Property(e => e.RiskFactor18)
                    .HasMaxLength(100)
                    .HasColumnName("RISK_FACTOR18")
                    .HasDefaultValueSql("('NA')");

                entity.Property(e => e.RiskFactor19)
                    .HasMaxLength(100)
                    .HasColumnName("RISK_FACTOR19")
                    .HasDefaultValueSql("('NA')");

                entity.Property(e => e.RiskFactor2)
                    .HasMaxLength(100)
                    .HasColumnName("RISK_FACTOR2")
                    .HasDefaultValueSql("(N'NA')");

                entity.Property(e => e.RiskFactor20)
                    .HasMaxLength(100)
                    .HasColumnName("RISK_FACTOR20")
                    .HasDefaultValueSql("('NA')");

                entity.Property(e => e.RiskFactor3)
                    .HasMaxLength(100)
                    .HasColumnName("RISK_FACTOR3")
                    .HasDefaultValueSql("(N'NA')");

                entity.Property(e => e.RiskFactor4)
                    .HasMaxLength(100)
                    .HasColumnName("RISK_FACTOR4")
                    .HasDefaultValueSql("(N'NA')");

                entity.Property(e => e.RiskFactor5)
                    .HasMaxLength(100)
                    .HasColumnName("RISK_FACTOR5")
                    .HasDefaultValueSql("(N'NA')");

                entity.Property(e => e.RiskFactor6)
                    .HasMaxLength(100)
                    .HasColumnName("RISK_FACTOR6")
                    .HasDefaultValueSql("(N'NA')");

                entity.Property(e => e.RiskFactor7)
                    .HasMaxLength(100)
                    .HasColumnName("RISK_FACTOR7")
                    .HasDefaultValueSql("(N'NA')");

                entity.Property(e => e.RiskFactor8)
                    .HasMaxLength(100)
                    .HasColumnName("RISK_FACTOR8")
                    .HasDefaultValueSql("(N'NA')");

                entity.Property(e => e.RiskFactor9)
                    .HasMaxLength(100)
                    .HasColumnName("RISK_FACTOR9")
                    .HasDefaultValueSql("(N'NA')");

                entity.Property(e => e.RiskLevel1)
                    .HasColumnName("RISK_LEVEL1")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.RiskLevel10)
                    .HasColumnName("RISK_LEVEL10")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.RiskLevel11)
                    .HasColumnName("RISK_LEVEL11")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.RiskLevel12)
                    .HasColumnName("RISK_LEVEL12")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.RiskLevel13)
                    .HasColumnName("RISK_LEVEL13")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.RiskLevel14)
                    .HasColumnName("RISK_LEVEL14")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.RiskLevel15)
                    .HasColumnName("RISK_LEVEL15")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.RiskLevel16)
                    .HasColumnName("RISK_LEVEL16")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.RiskLevel17)
                    .HasColumnName("RISK_LEVEL17")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.RiskLevel18)
                    .HasColumnName("RISK_LEVEL18")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.RiskLevel19)
                    .HasColumnName("RISK_LEVEL19")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.RiskLevel2)
                    .HasColumnName("RISK_LEVEL2")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.RiskLevel20)
                    .HasColumnName("RISK_LEVEL20")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.RiskLevel3)
                    .HasColumnName("RISK_LEVEL3")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.RiskLevel4)
                    .HasColumnName("RISK_LEVEL4")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.RiskLevel5)
                    .HasColumnName("RISK_LEVEL5")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.RiskLevel6)
                    .HasColumnName("RISK_LEVEL6")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.RiskLevel7)
                    .HasColumnName("RISK_LEVEL7")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.RiskLevel8)
                    .HasColumnName("RISK_LEVEL8")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.RiskLevel9)
                    .HasColumnName("RISK_LEVEL9")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.RiskLevelDesc)
                    .HasMaxLength(30)
                    .HasColumnName("RISK_LEVEL_DESC")
                    .HasDefaultValueSql("(N'NA')");

                entity.Property(e => e.RiskLevelValue)
                    .HasColumnName("RISK_LEVEL_VALUE")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.RiskScore)
                    .HasColumnName("RISK_SCORE")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.RiskValues1)
                    .HasColumnName("RISK_VALUES1")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.RiskValues10)
                    .HasColumnName("RISK_VALUES10")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.RiskValues11)
                    .HasColumnName("RISK_VALUES11")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.RiskValues12)
                    .HasColumnName("RISK_VALUES12")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.RiskValues13)
                    .HasColumnName("RISK_VALUES13")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.RiskValues14)
                    .HasColumnName("RISK_VALUES14")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.RiskValues15)
                    .HasColumnName("RISK_VALUES15")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.RiskValues16)
                    .HasColumnName("RISK_VALUES16")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.RiskValues17)
                    .HasColumnName("RISK_VALUES17")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.RiskValues18)
                    .HasColumnName("RISK_VALUES18")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.RiskValues19)
                    .HasColumnName("RISK_VALUES19")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.RiskValues2)
                    .HasColumnName("RISK_VALUES2")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.RiskValues20)
                    .HasColumnName("RISK_VALUES20")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.RiskValues3)
                    .HasColumnName("RISK_VALUES3")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.RiskValues4)
                    .HasColumnName("RISK_VALUES4")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.RiskValues5)
                    .HasColumnName("RISK_VALUES5")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.RiskValues6)
                    .HasColumnName("RISK_VALUES6")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.RiskValues7)
                    .HasColumnName("RISK_VALUES7")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.RiskValues8)
                    .HasColumnName("RISK_VALUES8")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.RiskValues9)
                    .HasColumnName("RISK_VALUES9")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<Wcfwlhittran>(entity =>
            {
                entity.HasKey(e => new { e.CompCode, e.ScanNo, e.SrcSeqNo, e.EntityId, e.SysId, e.AutoSeqNo });

                entity.ToTable("WCFWLHITTRAN");

                entity.Property(e => e.CompCode)
                    .HasColumnName("COMP_CODE")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ScanNo).HasColumnName("SCAN_NO");

                entity.Property(e => e.SrcSeqNo).HasColumnName("SRC_SEQ_NO");

                entity.Property(e => e.EntityId)
                    .HasMaxLength(30)
                    .HasColumnName("ENTITY_ID");

                entity.Property(e => e.SysId).HasColumnName("SYS_ID");

                entity.Property(e => e.AutoSeqNo)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("AUTO_SEQ_NO");

                entity.Property(e => e.AccountNo)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("ACCOUNT_NO")
                    .HasDefaultValueSql("(N'NA')");

                entity.Property(e => e.BatchDate)
                    .HasColumnType("datetime")
                    .HasColumnName("BATCH_DATE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Category)
                    .HasMaxLength(512)
                    .HasColumnName("CATEGORY");

                entity.Property(e => e.Categorynum)
                    .HasMaxLength(500)
                    .HasColumnName("CATEGORYNUM")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CifId)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("CIF_ID")
                    .HasDefaultValueSql("(N'NA')");

                entity.Property(e => e.Country)
                    .HasMaxLength(150)
                    .HasColumnName("COUNTRY");

                entity.Property(e => e.Dobs)
                    .HasMaxLength(100)
                    .HasColumnName("DOBS");

                entity.Property(e => e.EntityType)
                    .HasMaxLength(20)
                    .HasColumnName("ENTITY_TYPE")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FalsePositiveInd).HasColumnName("FALSE_POSITIVE_IND");

                entity.Property(e => e.Gender)
                    .HasMaxLength(20)
                    .HasColumnName("GENDER")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.HitIdOrName)
                    .HasColumnName("HIT_ID_OR_NAME")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.IdValue)
                    .HasMaxLength(150)
                    .HasColumnName("ID_VALUE");

                entity.Property(e => e.InfoSource)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("INFO_SOURCE")
                    .HasDefaultValueSql("(N'DJ')");

                entity.Property(e => e.InvestigateStatus).HasColumnName("INVESTIGATE_STATUS");

                entity.Property(e => e.LastUptDate).HasColumnName("LAST_UPT_DATE");

                entity.Property(e => e.LastUptTime).HasColumnName("LAST_UPT_TIME");

                entity.Property(e => e.Match)
                    .HasMaxLength(20)
                    .HasColumnName("MATCH")
                    .HasDefaultValueSql("('NA')");

                entity.Property(e => e.MatchPercent).HasColumnName("MATCH_PERCENT");

                entity.Property(e => e.ModeMn)
                    .HasMaxLength(1)
                    .HasColumnName("MODE_MN")
                    .HasDefaultValueSql("('A')");

                entity.Property(e => e.NameType)
                    .HasMaxLength(255)
                    .HasColumnName("NAME_TYPE");

                entity.Property(e => e.Namesource)
                    .HasMaxLength(20)
                    .HasColumnName("NAMESOURCE");

                entity.Property(e => e.OriginalScriptName)
                    .HasMaxLength(255)
                    .HasColumnName("ORIGINAL_SCRIPT_NAME")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Remarks)
                    .HasMaxLength(2000)
                    .HasColumnName("REMARKS");

                entity.Property(e => e.Sanction)
                    .HasMaxLength(1024)
                    .HasColumnName("SANCTION")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SingleStringName)
                    .HasMaxLength(255)
                    .HasColumnName("SINGLE_STRING_NAME");

                entity.Property(e => e.Subcategory)
                    .HasMaxLength(50)
                    .HasColumnName("SUBCATEGORY")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TypeOfExposition).HasColumnName("TYPE_OF_EXPOSITION");

                entity.Property(e => e.UserId)
                    .HasMaxLength(30)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.WeightageCompute)
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasColumnName("WEIGHTAGE_COMPUTE")
                    .HasDefaultValueSql("('NA')");

                entity.Property(e => e.WeightagePercent).HasColumnName("WEIGHTAGE_PERCENT");

                entity.Property(e => e.YourRef)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("YOUR_REF")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<Wcfwlinputtext>(entity =>
            {
                entity.HasKey(e => new { e.CompCode, e.ScanNo, e.SrcSeqNo });

                entity.ToTable("WCFWLINPUTTEXT");

                entity.Property(e => e.CompCode)
                    .HasColumnName("COMP_CODE")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ScanNo).HasColumnName("SCAN_NO");

                entity.Property(e => e.SrcSeqNo).HasColumnName("SRC_SEQ_NO");

                entity.Property(e => e.BrCode)
                    .HasMaxLength(20)
                    .HasColumnName("BR_CODE");

                entity.Property(e => e.HitResult)
                    .IsRequired()
                    .HasMaxLength(1)
                    .HasColumnName("HIT_RESULT")
                    .HasDefaultValueSql("(N'N')");

                entity.Property(e => e.HitResultText)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasColumnName("HIT_RESULT_TEXT")
                    .HasDefaultValueSql("(N'NNNNN')");

                entity.Property(e => e.ScanFullPartail).HasColumnName("SCAN_FULL_PARTAIL");

                entity.Property(e => e.ScanType).HasColumnName("SCAN_TYPE");

                entity.Property(e => e.SearchCategory)
                    .HasMaxLength(500)
                    .HasColumnName("SEARCH_CATEGORY")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SearchDob)
                    .HasMaxLength(30)
                    .HasColumnName("SEARCH_DOB");

                entity.Property(e => e.SearchEntityType)
                    .HasMaxLength(20)
                    .HasColumnName("SEARCH_ENTITY_TYPE")
                    .HasDefaultValueSql("('NA')");

                entity.Property(e => e.SearchGender)
                    .HasMaxLength(20)
                    .HasColumnName("SEARCH_GENDER")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SearchId)
                    .HasMaxLength(100)
                    .HasColumnName("SEARCH_ID");

                entity.Property(e => e.SearchName)
                    .HasMaxLength(150)
                    .HasColumnName("SEARCH_NAME");

                entity.Property(e => e.SearchSanction)
                    .HasMaxLength(1024)
                    .HasColumnName("SEARCH_SANCTION")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SearchSubcategory)
                    .HasMaxLength(50)
                    .HasColumnName("SEARCH_SUBCATEGORY")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SendDate).HasColumnName("SEND_DATE");

                entity.Property(e => e.SendTime).HasColumnName("SEND_TIME");

                entity.Property(e => e.SerachAddress)
                    .HasMaxLength(256)
                    .HasColumnName("SERACH_ADDRESS");

                entity.Property(e => e.SerachCountry)
                    .HasMaxLength(50)
                    .HasColumnName("SERACH_COUNTRY");

                entity.Property(e => e.SysName)
                    .HasMaxLength(20)
                    .HasColumnName("SYS_NAME");

                entity.Property(e => e.UserId)
                    .HasMaxLength(35)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.YourRef)
                    .HasMaxLength(30)
                    .HasColumnName("YOUR_REF");
            });

            modelBuilder.Entity<Wcfwslog>(entity =>
            {
                entity.HasKey(e => e.LogSeq)
                    .HasName("PK__WCFWSLOG__F49E45A9CF1AC591");

                entity.ToTable("WCFWSLOG");

                entity.Property(e => e.LogSeq)
                    .ValueGeneratedNever()
                    .HasColumnName("LOG_SEQ");

                entity.Property(e => e.Authpswd)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("AUTHPSWD")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Authuser)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("AUTHUSER")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Brcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("BRCODE")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Content)
                    .IsRequired()
                    .HasColumnName("CONTENT")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.LogEnd)
                    .HasColumnType("datetime")
                    .HasColumnName("LOG_END");

                entity.Property(e => e.LogStart)
                    .HasColumnType("datetime")
                    .HasColumnName("LOG_START")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Passexpirydate)
                    .IsRequired()
                    .HasMaxLength(256)
                    .HasColumnName("PASSEXPIRYDATE")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Passexpirydtverify)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("PASSEXPIRYDTVERIFY")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Passportno)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("PASSPORTNO")
                    .HasDefaultValueSql("('')")
                    .HasComment("Passport Number");

                entity.Property(e => e.Passportverify)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("PASSPORTVERIFY")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Riskfactors)
                    .IsRequired()
                    .HasMaxLength(1024)
                    .HasColumnName("RISKFACTORS")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Rtnencryptscanid)
                    .IsRequired()
                    .HasMaxLength(1024)
                    .HasColumnName("RTNENCRYPTSCANID")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Rtnhit)
                    .IsRequired()
                    .HasMaxLength(1024)
                    .HasColumnName("RTNHIT")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Rtnscanid)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("RTNSCANID")
                    .HasDefaultValueSql("('0')");

                entity.Property(e => e.Scanoption)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasColumnName("SCANOPTION")
                    .HasDefaultValueSql("('0')");

                entity.Property(e => e.Searchcountry)
                    .IsRequired()
                    .HasMaxLength(512)
                    .HasColumnName("SEARCHCOUNTRY")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Searchdob)
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasColumnName("SEARCHDOB")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Searchgender)
                    .HasMaxLength(20)
                    .HasColumnName("SEARCHGENDER");

                entity.Property(e => e.Searchid)
                    .IsRequired()
                    .HasMaxLength(512)
                    .HasColumnName("SEARCHID")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Searchname)
                    .IsRequired()
                    .HasMaxLength(1024)
                    .HasColumnName("SEARCHNAME")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Securityno1)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("SECURITYNO1")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Securityno2)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("SECURITYNO2")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SysName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("SYS_NAME")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Uniqueno)
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasColumnName("UNIQUENO")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Username)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("USERNAME")
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<WlBatchdtl>(entity =>
            {
                entity.HasKey(e => new { e.CodeComp, e.CodeOrg, e.JobId, e.InputId });

                entity.ToTable("WL_BATCHDTL");

                entity.Property(e => e.CodeComp)
                    .HasColumnName("CODE_COMP")
                    .HasComment("Code Company");

                entity.Property(e => e.CodeOrg)
                    .HasColumnName("CODE_ORG")
                    .HasComment("Code Organization");

                entity.Property(e => e.JobId)
                    .HasColumnName("JOB_ID")
                    .HasComment("Running No for Job");

                entity.Property(e => e.InputId)
                    .HasMaxLength(50)
                    .HasColumnName("INPUT_ID")
                    .HasComment("ID created for each individual\\n- To insert incrementally from csv to db");

                entity.Property(e => e.AuditCreatedDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("AUDIT_CREATED_DATE")
                    .HasComment("Date record created");

                entity.Property(e => e.AuditCreatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_CREATED_USER")
                    .HasComment("user who created the record");

                entity.Property(e => e.AuditUpdatedDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("AUDIT_UPDATED_DATE")
                    .HasComment("Date record updated");

                entity.Property(e => e.AuditUpdatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_UPDATED_USER")
                    .HasComment("user who updated the record");

                entity.Property(e => e.InfoCategory)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("INFO_CATEGORY")
                    .HasDefaultValueSql("('N/A')")
                    .HasComment("Screened");

                entity.Property(e => e.InfoCountry)
                    .HasColumnName("INFO_COUNTRY")
                    .HasComment("Country risk verification\\n0-disable\\n1-enable");

                entity.Property(e => e.InfoDateExp)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("INFO_DATE_EXP")
                    .HasDefaultValueSql("('N/A')")
                    .HasComment("Expiry Date");

                entity.Property(e => e.InfoDob)
                    .IsRequired()
                    .HasMaxLength(15)
                    .HasColumnName("INFO_DOB")
                    .HasDefaultValueSql("('N/A')")
                    .HasComment("Screened DOB");

                entity.Property(e => e.InfoEntType)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("INFO_ENT_TYPE")
                    .HasDefaultValueSql("('N/A')")
                    .HasComment("Screened entity type");

                entity.Property(e => e.InfoGender)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasColumnName("INFO_GENDER")
                    .HasDefaultValueSql("('N/A')")
                    .HasComment("Screened gender");

                entity.Property(e => e.InfoId)
                    .HasMaxLength(50)
                    .HasColumnName("INFO_ID")
                    .HasComment("Screened ID");

                entity.Property(e => e.InfoName)
                    .HasMaxLength(255)
                    .HasColumnName("INFO_NAME")
                    .HasComment("Screened name");

                entity.Property(e => e.InfoNationality)
                    .HasMaxLength(50)
                    .HasColumnName("INFO_NATIONALITY")
                    .HasComment("Screened nationality");

                entity.Property(e => e.InfoNative)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("INFO_NATIVE")
                    .HasDefaultValueSql("('N/A')")
                    .HasComment("Screened native name");

                entity.Property(e => e.InfoPassport)
                    .HasColumnName("INFO_PASSPORT")
                    .HasComment("0-disable\\n1-enable");

                entity.Property(e => e.InfoPurpose)
                    .HasColumnName("INFO_PURPOSE")
                    .HasComment("TBD");

                entity.Property(e => e.InfoSec)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("INFO_SEC")
                    .HasDefaultValueSql("('N/A')")
                    .HasComment("Security No");

                entity.Property(e => e.InfoSecExp)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("INFO_SEC_EXP")
                    .HasDefaultValueSql("('N/A')")
                    .HasComment("Expiry date security no");

                entity.Property(e => e.InfoSource)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("INFO_SOURCE")
                    .HasDefaultValueSql("('N/A')")
                    .HasComment("Screened info source");

                entity.Property(e => e.ResultHit)
                    .HasColumnName("RESULT_HIT")
                    .HasDefaultValueSql("((0))")
                    .HasComment("0-No Hit\\n1-Hit");
            });

            modelBuilder.Entity<WlBatchlog>(entity =>
            {
                entity.HasKey(e => new { e.CodeComp, e.CodeOrg, e.JobId });

                entity.ToTable("WL_BATCHLOG");

                entity.Property(e => e.CodeComp)
                    .HasColumnName("CODE_COMP")
                    .HasComment("Code Company");

                entity.Property(e => e.CodeOrg)
                    .HasColumnName("CODE_ORG")
                    .HasComment("Code Organization");

                entity.Property(e => e.JobId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("JOB_ID")
                    .HasComment("Running No for Job");

                entity.Property(e => e.Active)
                    .HasColumnName("ACTIVE")
                    .HasDefaultValueSql("((1))")
                    .HasComment("0-archive\\n1-active");

                entity.Property(e => e.AuditCreatedDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("AUDIT_CREATED_DATE")
                    .HasComment("Date record created");

                entity.Property(e => e.AuditCreatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_CREATED_USER")
                    .HasComment("user who created the record");

                entity.Property(e => e.AuditUpdatedDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("AUDIT_UPDATED_DATE")
                    .HasComment("Date record updated");

                entity.Property(e => e.AuditUpdatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_UPDATED_USER")
                    .HasComment("user who updated the record");

                entity.Property(e => e.FileEncode).HasColumnName("FILE_ENCODE");

                entity.Property(e => e.Message)
                    .HasMaxLength(1000)
                    .HasColumnName("MESSAGE");

                entity.Property(e => e.ResultFileEncode).HasColumnName("RESULT_FILE_ENCODE");

                entity.Property(e => e.ResultFileName)
                    .HasMaxLength(150)
                    .HasColumnName("RESULT_FILE_NAME")
                    .HasComment("Generated filename");

                entity.Property(e => e.ResultFileSize)
                    .HasColumnName("RESULT_FILE_SIZE")
                    .HasComment("Generated file size");

                entity.Property(e => e.Status)
                    .HasColumnName("STATUS")
                    .HasComment("0-Pending\\n1-In Progress\\n2-Completed");

                entity.Property(e => e.TotalHit)
                    .HasColumnName("TOTAL_HIT")
                    .HasComment("Total record hit");

                entity.Property(e => e.TotalProcessed)
                    .HasColumnName("TOTAL_PROCESSED")
                    .HasComment("Total record successfully processed");

                entity.Property(e => e.TotalRecord)
                    .HasColumnName("TOTAL_RECORD")
                    .HasComment("Total record available in file");

                entity.Property(e => e.UploadFileName)
                    .HasMaxLength(150)
                    .HasColumnName("UPLOAD_FILE_NAME")
                    .HasComment("Uploaded filename");

                entity.Property(e => e.UploadFileSize)
                    .HasColumnName("UPLOAD_FILE_SIZE")
                    .HasComment("Uploaded file size");

                entity.Property(e => e.UploadSource)
                    .HasMaxLength(50)
                    .HasColumnName("UPLOAD_SOURCE")
                    .HasComment("Source type of uploaded file (only apply for internal upload)");

                entity.Property(e => e.UploadType)
                    .HasColumnName("UPLOAD_TYPE")
                    .HasComment("1-Watchlist\\n2-Screening");
            });

            modelBuilder.Entity<WlUpdateLog>(entity =>
            {
                entity.ToTable("WL_UPDATE_LOG");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.FileDate).HasColumnName("FILE_DATE");

                entity.Property(e => e.FileName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("FILE_NAME");

                entity.Property(e => e.FileType)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("FILE_TYPE");

                entity.Property(e => e.UpdateDate)
                    .HasColumnType("datetime")
                    .HasColumnName("UPDATE_DATE");

                entity.Property(e => e.UpdateStatus).HasColumnName("UPDATE_STATUS");

                entity.Property(e => e.WatchlistType)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("WATCHLIST_TYPE");
            });

            modelBuilder.Entity<WsAccessToken>(entity =>
            {
                entity.HasKey(e => new { e.AutoSeqNo, e.CompCode })
                    .HasName("PK_WS_ACCESS_TOKEN_1");

                entity.ToTable("WS_ACCESS_TOKEN");

                entity.Property(e => e.AutoSeqNo)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("AUTO_SEQ_NO");

                entity.Property(e => e.CompCode).HasColumnName("COMP_CODE");

                entity.Property(e => e.AccessToken)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("ACCESS_TOKEN");

                entity.Property(e => e.Expires)
                    .HasColumnType("datetime")
                    .HasColumnName("EXPIRES");

                entity.Property(e => e.ExpiresIn).HasColumnName("EXPIRES_IN");

                entity.Property(e => e.Issued)
                    .HasColumnType("datetime")
                    .HasColumnName("ISSUED");

                entity.Property(e => e.StampDttm)
                    .HasColumnType("datetime")
                    .HasColumnName("STAMP_DTTM");

                entity.Property(e => e.UserId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.Username)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USERNAME");
            });

            modelBuilder.Entity<staff>(entity =>
            {
                entity.HasKey(e => new { e.CodeComp, e.CodeOrg, e.UserId })
                    .HasName("PK_USER");

                entity.ToTable("STAFF");

                entity.Property(e => e.CodeComp)
                    .HasColumnName("CODE_COMP")
                    .HasComment("Code to distinguish which company");

                entity.Property(e => e.CodeOrg)
                    .HasColumnName("CODE_ORG")
                    .HasComment("Coed to distinguish which organization");

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .HasColumnName("USER_ID")
                    .HasComment("User ID use to access system");

                entity.Property(e => e.AccessToken)
                    .HasMaxLength(255)
                    .HasColumnName("ACCESS_TOKEN");

                entity.Property(e => e.AuditCreatedDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("AUDIT_CREATED_DATE")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date of this user created");

                entity.Property(e => e.AuditCreatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_CREATED_USER")
                    .HasComment("User who create the ID");

                entity.Property(e => e.AuditFirstLogindate)
                    .HasColumnName("AUDIT_FIRST_LOGINDATE")
                    .HasComment("Store the first date user login into system");

                entity.Property(e => e.AuditFirstLogintime)
                    .HasColumnName("AUDIT_FIRST_LOGINTIME")
                    .HasComment("Store the first time user login into system");

                entity.Property(e => e.AuditLastLogindate)
                    .HasColumnName("AUDIT_LAST_LOGINDATE")
                    .HasComment("Store the latest date user login into system");

                entity.Property(e => e.AuditLastLogintime)
                    .HasColumnName("AUDIT_LAST_LOGINTIME")
                    .HasComment("Store the latest time user login into system");

                entity.Property(e => e.AuditRetry)
                    .HasColumnName("AUDIT_RETRY")
                    .HasDefaultValueSql("((0))")
                    .HasComment("To store current no of retry attempt by user");

                entity.Property(e => e.AuditUpdatedDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("AUDIT_UPDATED_DATE")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date of user profile being updated");

                entity.Property(e => e.AuditUpdatedUser)
                    .HasMaxLength(50)
                    .HasColumnName("AUDIT_UPDATED_USER")
                    .HasComment("User who update the record of this ID");

                entity.Property(e => e.ConfigAccessDateFrom)
                    .HasColumnName("CONFIG_ACCESS_DATE_FROM")
                    .HasDefaultValueSql("((0))")
                    .HasComment("To configure first date user able to login");

                entity.Property(e => e.ConfigAccessDateTo)
                    .HasColumnName("CONFIG_ACCESS_DATE_TO")
                    .HasDefaultValueSql("((0))")
                    .HasComment("To configure last date user able to login");

                entity.Property(e => e.ConfigAccessTimeFrom)
                    .HasColumnName("CONFIG_ACCESS_TIME_FROM")
                    .HasDefaultValueSql("((0))")
                    .HasComment("To configure earliest time user able to login");

                entity.Property(e => e.ConfigAccessTimeTo)
                    .HasColumnName("CONFIG_ACCESS_TIME_TO")
                    .HasDefaultValueSql("((0))")
                    .HasComment("To configure latest time user able to login");

                entity.Property(e => e.ConfigAd)
                    .HasColumnName("CONFIG_AD")
                    .HasComment("To indicate user is accessing to AD/non AD credentials");

                entity.Property(e => e.ConfigAuthDate).HasColumnName("CONFIG_AUTH_DATE");

                entity.Property(e => e.ConfigAuthNo).HasColumnName("CONFIG_AUTH_NO");

                entity.Property(e => e.ConfigAuthTime).HasColumnName("CONFIG_AUTH_TIME");

                entity.Property(e => e.ConfigAuthUser)
                    .HasMaxLength(50)
                    .HasColumnName("CONFIG_AUTH_USER");

                entity.Property(e => e.ConfigExpiryDate)
                    .HasColumnName("CONFIG_EXPIRY_DATE")
                    .HasDefaultValueSql("((0))")
                    .HasComment("To configure when this ID to be expired");

                entity.Property(e => e.ConfigExpiryDay)
                    .HasColumnName("CONFIG_EXPIRY_DAY")
                    .HasDefaultValueSql("((0))")
                    .HasComment("To configure how long (days) this ID will active");

                entity.Property(e => e.ConfigLanguage).HasColumnName("CONFIG_LANGUAGE");

                entity.Property(e => e.ConfigMaxRetry)
                    .HasColumnName("CONFIG_MAX_RETRY")
                    .HasDefaultValueSql("((0))")
                    .HasComment("To configure max number of retry");

                entity.Property(e => e.ConfigPassword)
                    .HasMaxLength(500)
                    .HasColumnName("CONFIG_PASSWORD")
                    .HasComment("Storing SHA-256 password");

                entity.Property(e => e.ConfigStatus)
                    .HasColumnName("CONFIG_STATUS")
                    .HasDefaultValueSql("((0))")
                    .HasComment("Indicate status of current user (active,inactive,lock)");

                entity.Property(e => e.ConfigTheme).HasColumnName("CONFIG_THEME");

                entity.Property(e => e.FlagPasswordReset)
                    .HasMaxLength(50)
                    .HasColumnName("FLAG_PASSWORD_RESET")
                    .HasDefaultValueSql("((0))")
                    .HasComment("Temporary password stored for reset purpose");

                entity.Property(e => e.InfoNameFirst)
                    .HasMaxLength(50)
                    .HasColumnName("INFO_NAME_FIRST")
                    .HasComment("User first name");

                entity.Property(e => e.InfoNameFull)
                    .HasMaxLength(200)
                    .HasColumnName("INFO_NAME_FULL")
                    .HasComment("User Full Name");

                entity.Property(e => e.InfoNameLast)
                    .HasMaxLength(50)
                    .HasColumnName("INFO_NAME_LAST")
                    .HasComment("User last name");

                entity.Property(e => e.InfoNameMiddle)
                    .HasMaxLength(50)
                    .HasColumnName("INFO_NAME_MIDDLE")
                    .HasComment("User middle name");

                entity.Property(e => e.Position)
                    .HasMaxLength(250)
                    .HasColumnName("POSITION");

                entity.Property(e => e.UserDasboard)
                    .HasMaxLength(30)
                    .HasColumnName("USER_DASBOARD");

                entity.Property(e => e.UserEmail)
                    .HasMaxLength(50)
                    .HasColumnName("USER_EMAIL")
                    .HasComment("To assign an email for BAU to following user");

                entity.Property(e => e.UserMenu)
                    .HasColumnName("USER_MENU")
                    .HasComment("To configure which menu is accessible by following user");

                entity.Property(e => e.UserModule)
                    .HasMaxLength(300)
                    .HasColumnName("USER_MODULE")
                    .HasComment("To configure which module is accessible by following user");

                entity.Property(e => e.UserOffice)
                    .HasMaxLength(30)
                    .HasColumnName("USER_OFFICE")
                    .HasComment("To assign a group of user to following user");

                entity.Property(e => e.UserRole)
                    .HasMaxLength(50)
                    .HasColumnName("USER_ROLE");

                entity.Property(e => e.UserRouting)
                    .HasMaxLength(30)
                    .HasColumnName("USER_ROUTING")
                    .HasComment("To assign viewable redflag to following user");

                entity.Property(e => e.UserType)
                    .HasColumnName("USER_TYPE")
                    .HasComment("Distinguishing user type as :\\n- system admin\\n- user admin\\n- user");

                entity.Property(e => e.UserWorkflow)
                    .HasMaxLength(30)
                    .HasColumnName("USER_WORKFLOW")
                    .HasComment("To assign user workflow process");

                entity.Property(e => e.WfOmLevel)
                    .HasColumnName("WF_OM_LEVEL")
                    .HasComment("Onboard Monitoring workflow template level");

                entity.Property(e => e.WfOmTemplate)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("WF_OM_TEMPLATE")
                    .HasDefaultValueSql("('')")
                    .HasComment("Onboard Monitoring workflow template ID");

                entity.Property(e => e.WfPmLevel)
                    .HasColumnName("WF_PM_LEVEL")
                    .HasComment("Payment Monitoring workflow template level");

                entity.Property(e => e.WfPmTemplate)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("WF_PM_TEMPLATE")
                    .HasDefaultValueSql("('')")
                    .HasComment("Payment Monitoring workflow template ID");

                entity.Property(e => e.WfRpLevel)
                    .HasColumnName("WF_RP_LEVEL")
                    .HasComment("RP Workflow template level");

                entity.Property(e => e.WfRpTemplate)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("WF_RP_TEMPLATE")
                    .HasDefaultValueSql("('')")
                    .HasComment("RP Workflow template ID");

                entity.Property(e => e.WfTmLevel)
                    .HasColumnName("WF_TM_LEVEL")
                    .HasComment("TM Workflow template level");

                entity.Property(e => e.WfTmTemplate)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("WF_TM_TEMPLATE")
                    .HasDefaultValueSql("('')")
                    .HasComment("TM Workflow template ID");

                entity.Property(e => e.WfTsLevel)
                    .HasColumnName("WF_TS_LEVEL")
                    .HasComment("Transaction Screening workflow template level");

                entity.Property(e => e.WfTsTemplate)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("WF_TS_TEMPLATE")
                    .HasDefaultValueSql("('')")
                    .HasComment("Transaction Screening workflow template ID");

                entity.Property(e => e.WfWmLevel)
                    .HasColumnName("WF_WM_LEVEL")
                    .HasComment("WM Workflow template level");

                entity.Property(e => e.WfWmTemplate)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("WF_WM_TEMPLATE")
                    .HasDefaultValueSql("('')")
                    .HasComment("WM Workflow template ID");
            });

            modelBuilder.HasSequence<int>("AYA_SERIAL_SEQNO")
                .HasMin(1)
                .HasMax(200);

            modelBuilder.HasSequence<int>("HITLOGGER_SEQ_NO");

            modelBuilder.HasSequence("NO_MASTER_SEQ").StartsAt(110000120);

            modelBuilder.HasSequence("RF_CASE_WM");

            modelBuilder.HasSequence("RF_OM_ID");

            modelBuilder.HasSequence("RF_TM_ID").StartsAt(129);

            modelBuilder.HasSequence("RF_TM_SEQ").HasMin(1);

            modelBuilder.HasSequence<int>("RF_WM_ID");

            modelBuilder.HasSequence("RPT_SET_SEQ");

            modelBuilder.HasSequence<int>("SeqOnboard");

            modelBuilder.HasSequence<int>("SEQONBOARDLOG");

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}
